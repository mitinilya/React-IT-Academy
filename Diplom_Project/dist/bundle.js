/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={249:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(354),o=n.n(r),a=n(314),i=n.n(a)()(o());i.push([e.id,"body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color:#007bff;\n    color: white;\n    padding: 10px 20px;\n  }\n  \n  .header-logo a {\n    color: white;\n    text-decoration: none;\n    font-size: 1.5rem;\n    font-weight: bold;\n  }\n  \n  .header-actions a {\n    color: white;\n    text-decoration: none;\n    margin-left: 20px;\n    font-size: 1rem;\n  }\n  \n  .header-actions a:hover {\n    text-decoration: underline;\n  }\n  \n  \n  .car-list {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 20px;\n    padding: 20px;\n  }\n  \n  .car-card {\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 16px;\n    text-align: center;\n  }\n  \n  .car-card img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 4px;\n  }\n  \n  .car-card button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .car-card button:hover {\n    background-color: #0056b3;\n  }\n  \n  .cart {\n    padding: 20px;\n  }\n  \n  .cart ul {\n    list-style: none;\n    padding: 0;\n  }\n  \n  .cart li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 10px;\n  }\n  \n  .cart li img {\n    border-radius: 4px;\n  }\n  .cart-item-enter {\n    opacity: 0;\n  }\n  \n  .cart-item-enter-active {\n    opacity: 1;\n    transition: opacity 300ms;\n  }\n  \n  .cart-item-exit {\n    opacity: 1;\n  }\n  \n  .cart-item-exit-active {\n    opacity: 0;\n    transition: opacity 300ms;\n  }\n  #cssload-wrapper {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tz-index: 15;\n\toverflow: hidden;\n}\n\n.cssload-loader {\n\twidth: 413px;\n\theight: 413px;\n\tborder: 3px rgb(0,0,0) solid;\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\tmargin: -206px 0 0 -206px;\n\tborder-radius: 50%;\n\t\t-o-border-radius: 50%;\n\t\t-ms-border-radius: 50%;\n\t\t-webkit-border-radius: 50%;\n\t\t-moz-border-radius: 50%;\n}\n\n.cssload-loader .cssload-loading {\n\tfont-size: 28px;\n\tposition: absolute;\n\twidth: 100%;\n\ttext-align: center;\n\tline-height: 39px;\n\tfont-family: 'Century Gothic', sans-serif;\n\tfont-style: italic;\n\tleft: 0;\n\ttop: 50%;\n\tmargin-top: 55px;\n\tcolor: rgb(0,0,0);\n\tfont-weight: bold;\n\ttext-transform: uppercase;\n\t\t-o-text-transform: uppercase;\n\t\t-ms-text-transform: uppercase;\n\t\t-webkit-text-transform: uppercase;\n\t\t-moz-text-transform: uppercase;\n}\n\n.cssload-loader-circle-1 {\n\twidth: 380px;\n\theight: 380px;\n\tleft: 14px;\n\ttop: 14px;\n\tborder: 3px rgb(0,0,0) solid;\n\tposition: absolute;\n\tborder-right-color: transparent;\n\tborder-radius: 50%;\n\t\t-o-border-radius: 50%;\n\t\t-ms-border-radius: 50%;\n\t\t-webkit-border-radius: 50%;\n\t\t-moz-border-radius: 50%;\n\tanimation: spin 6.15s linear infinite;\n\t\t-o-animation: spin 6.15s linear infinite;\n\t\t-ms-animation: spin 6.15s linear infinite;\n\t\t-webkit-animation: spin 6.15s linear infinite;\n\t\t-moz-animation: spin 6.15s linear infinite;\n}\n\n.cssload-loader-circle-2 {\n\twidth: 347px;\n\theight: 347px;\n\tleft: 14px;\n\ttop: 14px;\n\tborder: 3px transparent solid;\n\tposition: absolute;\n\tborder-right-color: rgb(232,21,18);\n\tborder-radius: 50%;\n\t\t-o-border-radius: 50%;\n\t\t-ms-border-radius: 50%;\n\t\t-webkit-border-radius: 50%;\n\t\t-moz-border-radius: 50%;\n\tanimation: spin 10.25s linear infinite;\n\t\t-o-animation: spin 10.25s linear infinite;\n\t\t-ms-animation: spin 10.25s linear infinite;\n\t\t-webkit-animation: spin 10.25s linear infinite;\n\t\t-moz-animation: spin 10.25s linear infinite;\n}\n\n.cssload-loader .cssload-line {\n\twidth: 28px;\n\theight: 6px;\n\tbackground: rgb(0,0,0);\n\tposition: absolute;\n}\n\n.cssload-loader .cssload-line:nth-child(1) {\n\tleft: 44px;\n\ttop: 50%;\n\tmargin-top: -3px;\n}\n\n.cssload-loader .cssload-line:nth-child(2) {\n\ttransform: rotate(45deg);\n\t\t-o-transform: rotate(45deg);\n\t\t-ms-transform: rotate(45deg);\n\t\t-webkit-transform: rotate(45deg);\n\t\t-moz-transform: rotate(45deg);\n\tleft: 91px;\n\ttop: 91px;\n}\n\n.cssload-loader .cssload-line:nth-child(3) {\n\ttop: 44px;\n\tleft: 50%;\n\twidth: 6px;\n\theight: 28px;\n}\n\n.cssload-loader .cssload-line:nth-child(4) {\n\ttransform: rotate(135deg);\n\t\t-o-transform: rotate(135deg);\n\t\t-ms-transform: rotate(135deg);\n\t\t-webkit-transform: rotate(135deg);\n\t\t-moz-transform: rotate(135deg);\n\tright: 91px;\n\ttop: 91px;\n}\n\n.cssload-loader .cssload-line:nth-child(5) {\n\tright: 44px;\n\ttop: 50%;\n\tmargin-top: -3px;\n}\n\n.cssload-loader .cssload-line:nth-child(6) {\n\ttransform: rotate(45deg);\n\t\t-o-transform: rotate(45deg);\n\t\t-ms-transform: rotate(45deg);\n\t\t-webkit-transform: rotate(45deg);\n\t\t-moz-transform: rotate(45deg);\n\tright: 91px;\n\tbottom: 91px;\n\tbackground: rgb(232,21,18);\n}\n\n.cssload-loader .cssload-subline {\n\tposition: absolute;\n\twidth: 8px;\n\theight: 6px;\n\tbackground: rgb(0,0,0);\n}\n\n.cssload-loader .cssload-subline:nth-child(7) {\n\ttransform: rotate(22.5deg);\n\t\t-o-transform: rotate(22.5deg);\n\t\t-ms-transform: rotate(22.5deg);\n\t\t-webkit-transform: rotate(22.5deg);\n\t\t-moz-transform: rotate(22.5deg);\n\tleft: 58px;\n\ttop: 138px;\n}\n\n.cssload-loader .cssload-subline:nth-child(8) {\n\ttransform: rotate(67.5deg);\n\t\t-o-transform: rotate(67.5deg);\n\t\t-ms-transform: rotate(67.5deg);\n\t\t-webkit-transform: rotate(67.5deg);\n\t\t-moz-transform: rotate(67.5deg);\n\tleft: 138px;\n\ttop: 58px;\n}\n\n.cssload-loader .cssload-subline:nth-child(9) {\n\ttransform: rotate(112.5deg);\n\t\t-o-transform: rotate(112.5deg);\n\t\t-ms-transform: rotate(112.5deg);\n\t\t-webkit-transform: rotate(112.5deg);\n\t\t-moz-transform: rotate(112.5deg);\n\tright: 138px;\n\ttop: 58px;\n}\n\n.cssload-loader .cssload-subline:nth-child(10) {\n\ttransform: rotate(157.5deg);\n\t\t-o-transform: rotate(157.5deg);\n\t\t-ms-transform: rotate(157.5deg);\n\t\t-webkit-transform: rotate(157.5deg);\n\t\t-moz-transform: rotate(157.5deg);\n\tright: 58px;\n\ttop: 138px;\n}\n\n.cssload-loader .cssload-subline:nth-child(11) {\n\ttransform: rotate(22.5deg);\n\t\t-o-transform: rotate(22.5deg);\n\t\t-ms-transform: rotate(22.5deg);\n\t\t-webkit-transform: rotate(22.5deg);\n\t\t-moz-transform: rotate(22.5deg);\n\tright: 55px;\n\tbottom: 135px;\n\tbackground: rgb(232,21,18);\n}\n\n.cssload-loader .cssload-needle {\n\twidth: 39px;\n\theight: 39px;\n\tborder: 3px rgb(0,0,0) solid;\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\tmargin: -22px 0 0 -22px;\n\tz-index: 1;\n\tborder-radius: 50%;\n\t\t-o-border-radius: 50%;\n\t\t-ms-border-radius: 50%;\n\t\t-webkit-border-radius: 50%;\n\t\t-moz-border-radius: 50%;\n\tanimation: pegIt 6.15s infinite ease-in-out;\n\t\t-o-animation: pegIt 6.15s infinite ease-in-out;\n\t\t-ms-animation: pegIt 6.15s infinite ease-in-out;\n\t\t-webkit-animation: pegIt 6.15s infinite ease-in-out;\n\t\t-moz-animation: pegIt 6.15s infinite ease-in-out;\n}\n\n.cssload-loader .cssload-needle:before {\n\tcontent: \"\";\n\twidth: 0;\n\theight: 0;\n\tborder-style: solid;\n\tborder-width: 9.5px 138px 9.5px 0;\n\tborder-color: transparent rgb(232,21,18) transparent transparent;\n\tposition: absolute;\n\tright: 50%;\n\ttop: 50%;\n\tmargin: -9.5px 0 0 0;\n\tborder-radius: 0 50% 50% 0;\n\t\t-o-border-radius: 0 50% 50% 0;\n\t\t-ms-border-radius: 0 50% 50% 0;\n\t\t-webkit-border-radius: 0 50% 50% 0;\n\t\t-moz-border-radius: 0 50% 50% 0;\n}\n\n\n\n\n\n@keyframes pegIt {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\t16% {\n\t\ttransform: rotate(75deg);\n\t}\n\t25% {\n\t\ttransform: rotate(55deg);\n\t}\n\t30% {\n\t\ttransform: rotate(90deg);\n\t}\n\t36% {\n\t\ttransform: rotate(170deg);\n\t}\n\t42% {\n\t\ttransform: rotate(150deg);\n\t}\n\t50% {\n\t\ttransform: rotate(227deg);\n\t}\n\t100% {\n\t\ttransform: rotate(0deg);\n\t}\n}\n\n@-o-keyframes pegIt {\n\t0% {\n\t\t-o-transform: rotate(0deg);\n\t}\n\t16% {\n\t\t-o-transform: rotate(75deg);\n\t}\n\t25% {\n\t\t-o-transform: rotate(55deg);\n\t}\n\t30% {\n\t\t-o-transform: rotate(90deg);\n\t}\n\t36% {\n\t\t-o-transform: rotate(170deg);\n\t}\n\t42% {\n\t\ttransform: rotate(150deg);\n\t}\n\t50% {\n\t\t-o-transform: rotate(227deg);\n\t}\n\t100% {\n\t\t-o-transform: rotate(0deg);\n\t}\n}\n\n@-ms-keyframes pegIt {\n\t0% {\n\t\t-ms-transform: rotate(0deg);\n\t}\n\t16% {\n\t\t-ms-transform: rotate(75deg);\n\t}\n\t25% {\n\t\t-ms-transform: rotate(55deg);\n\t}\n\t30% {\n\t\t-ms-transform: rotate(90deg);\n\t}\n\t36% {\n\t\t-ms-transform: rotate(170deg);\n\t}\n\t42% {\n\t\ttransform: rotate(150deg);\n\t}\n\t50% {\n\t\t-ms-transform: rotate(227deg);\n\t}\n\t100% {\n\t\t-ms-transform: rotate(0deg);\n\t}\n}\n\n@-webkit-keyframes pegIt {\n\t0% {\n\t\t-webkit-transform: rotate(0deg);\n\t}\n\t16% {\n\t\t-webkit-transform: rotate(75deg);\n\t}\n\t25% {\n\t\t-webkit-transform: rotate(55deg);\n\t}\n\t30% {\n\t\t-webkit-transform: rotate(90deg);\n\t}\n\t36% {\n\t\t-webkit-transform: rotate(170deg);\n\t}\n\t42% {\n\t\ttransform: rotate(150deg);\n\t}\n\t50% {\n\t\t-webkit-transform: rotate(227deg);\n\t}\n\t100% {\n\t\t-webkit-transform: rotate(0deg);\n\t}\n}\n\n@-moz-keyframes pegIt {\n\t0% {\n\t\t-moz-transform: rotate(0deg);\n\t}\n\t16% {\n\t\t-moz-transform: rotate(75deg);\n\t}\n\t25% {\n\t\t-moz-transform: rotate(55deg);\n\t}\n\t30% {\n\t\t-moz-transform: rotate(90deg);\n\t}\n\t36% {\n\t\t-moz-transform: rotate(170deg);\n\t}\n\t42% {\n\t\ttransform: rotate(150deg);\n\t}\n\t50% {\n\t\t-moz-transform: rotate(227deg);\n\t}\n\t100% {\n\t\t-moz-transform: rotate(0deg);\n\t}\n}\n\n@keyframes spin {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\t100% {\n\t\ttransform: rotate(360deg);\n\t}\n}\n\n@-o-keyframes spin {\n\t0% {\n\t\t-o-transform: rotate(0deg);\n\t}\n\t100% {\n\t\t-o-transform: rotate(360deg);\n\t}\n}\n\n@-ms-keyframes spin {\n\t0% {\n\t\t-ms-transform: rotate(0deg);\n\t}\n\t100% {\n\t\t-ms-transform: rotate(360deg);\n\t}\n}\n\n@-webkit-keyframes spin {\n\t0% {\n\t\t-webkit-transform: rotate(0deg);\n\t}\n\t100% {\n\t\t-webkit-transform: rotate(360deg);\n\t}\n}\n\n@-moz-keyframes spin {\n\t0% {\n\t\t-moz-transform: rotate(0deg);\n\t}\n\t100% {\n\t\t-moz-transform: rotate(360deg);\n\t}\n}\n.login-page {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    background-color: #f4f4f9;\n  }\n  \n  .login-form-container {\n    width: 400px;\n    padding: 30px;\n    background: white;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n  \n  .login-form-container h1 {\n    font-size: 1.8rem;\n    margin-bottom: 20px;\n    text-align: center;\n    color: #333;\n  }\n  \n  .login-form-container form {\n    display: flex;\n    flex-direction: column;\n  }\n  \n  .login-form-container label {\n    margin-bottom: 10px;\n    font-weight: bold;\n    color: #555;\n  }\n  \n  .login-form-container input {\n    padding: 10px;\n    margin-bottom: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 1rem;\n  }\n  \n  .login-form-container input:focus {\n    border-color: #007bff;\n    outline: none;\n  }\n  \n  .login-form-container button {\n    padding: 10px 15px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    font-size: 1rem;\n    cursor: pointer;\n  }\n  \n  .login-form-container button:hover {\n    background-color: #0056b3;\n  }\n  \n  .login-form-container p {\n    text-align: center;\n    color: red;\n    font-weight: bold;\n    margin-top: 10px;\n  }\n  /* styles/main.css */\n\n/* Стили для списка брендов */\n.brand-list-container {\n    padding: 20px;\n    background-color: #f7e5e5;\n    text-align: center;\n    border-radius: 5px;\n  }\n  \n  .brand-list {\n    list-style: none;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  \n  .brand-item {\n    margin: 10px;\n    padding: 5px;\n  }\n  \n  .brand-link {\n    text-decoration: none;\n    padding: 10px 20px;\n    background-color: #3498db;\n    color: white;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n  }\n  \n  .brand-link:hover {\n    background-color: #2980b9;\n  }\n  /* Стили для корзины */\n.cart {\n\tpadding: 20px;\n\tbackground-color: #f9f9f9;\n\tborder-radius: 8px;\n\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n\tmax-width: 1200px;\n\tmargin: 20px auto;\n  }\n  \n  .cart h1 {\n\tfont-size: 2rem;\n\tfont-weight: bold;\n\tmargin-bottom: 20px;\n\tcolor: #333;\n  }\n  \n  /* Стили для пустой корзины */\n  .cart p {\n\tcolor: #777;\n\tfont-size: 1.2rem;\n\ttext-align: center;\n  }\n  \n  /* Стили для списка товаров в корзине */\n  .cart ul {\n\tlist-style: none;\n\tpadding: 0;\n  }\n  \n  .cart li {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tbackground-color: #fff;\n\tpadding: 20px;\n\tmargin-bottom: 10px;\n\tborder-radius: 8px;\n\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n  \n  .cart li:hover {\n\tbackground-color: #f1f1f1;\n\ttransition: background-color 0.3s;\n  }\n  \n  /* Изображение товара */\n  .cart li img {\n\twidth: 100px;\n\theight: auto;\n\tborder-radius: 4px;\n\tmargin-right: 20px;\n  }\n  \n  /* Информация о товаре */\n  .cart li h3 {\n\tfont-size: 1.1rem;\n\tfont-weight: 500;\n\tcolor: #333;\n\tmargin-bottom: 5px;\n  }\n  \n  .cart li p {\n\tcolor: #666;\n\tfont-size: 1rem;\n\tmargin-bottom: 10px;\n  }\n  \n  /* Кнопка удаления */\n  .cart li button {\n\tbackground-color: #e74c3c;\n\tcolor: white;\n\tpadding: 8px 16px;\n\tborder: none;\n\tborder-radius: 5px;\n\tcursor: pointer;\n\ttransition: background-color 0.3s ease;\n  }\n  \n  .cart li button:hover {\n\tbackground-color: #c0392b;\n  }\n  \n  .cart li button:focus {\n\toutline: none;\n  }\n  ","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,SAAS;IACT,UAAU;IACV,sBAAsB;EACxB;EACA;IACE,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,wBAAwB;IACxB,YAAY;IACZ,kBAAkB;EACpB;;EAEA;IACE,YAAY;IACZ,qBAAqB;IACrB,iBAAiB;IACjB,iBAAiB;EACnB;;EAEA;IACE,YAAY;IACZ,qBAAqB;IACrB,iBAAiB;IACjB,eAAe;EACjB;;EAEA;IACE,0BAA0B;EAC5B;;;EAGA;IACE,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,aAAa;EACf;;EAEA;IACE,sBAAsB;IACtB,kBAAkB;IAClB,aAAa;IACb,kBAAkB;EACpB;;EAEA;IACE,eAAe;IACf,YAAY;IACZ,kBAAkB;EACpB;;EAEA;IACE,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,eAAe;EACjB;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,gBAAgB;IAChB,UAAU;EACZ;;EAEA;IACE,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;EACrB;;EAEA;IACE,kBAAkB;EACpB;EACA;IACE,UAAU;EACZ;;EAEA;IACE,UAAU;IACV,yBAAyB;EAC3B;;EAEA;IACE,UAAU;EACZ;;EAEA;IACE,UAAU;IACV,yBAAyB;EAC3B;EACA;CACD,kBAAkB;CAClB,OAAO;CACP,MAAM;CACN,QAAQ;CACR,SAAS;CACT,WAAW;CACX,gBAAgB;AACjB;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,4BAA4B;CAC5B,kBAAkB;CAClB,SAAS;CACT,QAAQ;CACR,yBAAyB;CACzB,kBAAkB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,0BAA0B;EAC1B,uBAAuB;AACzB;;AAEA;CACC,eAAe;CACf,kBAAkB;CAClB,WAAW;CACX,kBAAkB;CAClB,iBAAiB;CACjB,yCAAyC;CACzC,kBAAkB;CAClB,OAAO;CACP,QAAQ;CACR,gBAAgB;CAChB,iBAAiB;CACjB,iBAAiB;CACjB,yBAAyB;EACxB,4BAA4B;EAC5B,6BAA6B;EAC7B,iCAAiC;EACjC,8BAA8B;AAChC;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,UAAU;CACV,SAAS;CACT,4BAA4B;CAC5B,kBAAkB;CAClB,+BAA+B;CAC/B,kBAAkB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,0BAA0B;EAC1B,uBAAuB;CACxB,qCAAqC;EACpC,wCAAwC;EACxC,yCAAyC;EACzC,6CAA6C;EAC7C,0CAA0C;AAC5C;;AAEA;CACC,YAAY;CACZ,aAAa;CACb,UAAU;CACV,SAAS;CACT,6BAA6B;CAC7B,kBAAkB;CAClB,kCAAkC;CAClC,kBAAkB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,0BAA0B;EAC1B,uBAAuB;CACxB,sCAAsC;EACrC,yCAAyC;EACzC,0CAA0C;EAC1C,8CAA8C;EAC9C,2CAA2C;AAC7C;;AAEA;CACC,WAAW;CACX,WAAW;CACX,sBAAsB;CACtB,kBAAkB;AACnB;;AAEA;CACC,UAAU;CACV,QAAQ;CACR,gBAAgB;AACjB;;AAEA;CACC,wBAAwB;EACvB,2BAA2B;EAC3B,4BAA4B;EAC5B,gCAAgC;EAChC,6BAA6B;CAC9B,UAAU;CACV,SAAS;AACV;;AAEA;CACC,SAAS;CACT,SAAS;CACT,UAAU;CACV,YAAY;AACb;;AAEA;CACC,yBAAyB;EACxB,4BAA4B;EAC5B,6BAA6B;EAC7B,iCAAiC;EACjC,8BAA8B;CAC/B,WAAW;CACX,SAAS;AACV;;AAEA;CACC,WAAW;CACX,QAAQ;CACR,gBAAgB;AACjB;;AAEA;CACC,wBAAwB;EACvB,2BAA2B;EAC3B,4BAA4B;EAC5B,gCAAgC;EAChC,6BAA6B;CAC9B,WAAW;CACX,YAAY;CACZ,0BAA0B;AAC3B;;AAEA;CACC,kBAAkB;CAClB,UAAU;CACV,WAAW;CACX,sBAAsB;AACvB;;AAEA;CACC,0BAA0B;EACzB,6BAA6B;EAC7B,8BAA8B;EAC9B,kCAAkC;EAClC,+BAA+B;CAChC,UAAU;CACV,UAAU;AACX;;AAEA;CACC,0BAA0B;EACzB,6BAA6B;EAC7B,8BAA8B;EAC9B,kCAAkC;EAClC,+BAA+B;CAChC,WAAW;CACX,SAAS;AACV;;AAEA;CACC,2BAA2B;EAC1B,8BAA8B;EAC9B,+BAA+B;EAC/B,mCAAmC;EACnC,gCAAgC;CACjC,YAAY;CACZ,SAAS;AACV;;AAEA;CACC,2BAA2B;EAC1B,8BAA8B;EAC9B,+BAA+B;EAC/B,mCAAmC;EACnC,gCAAgC;CACjC,WAAW;CACX,UAAU;AACX;;AAEA;CACC,0BAA0B;EACzB,6BAA6B;EAC7B,8BAA8B;EAC9B,kCAAkC;EAClC,+BAA+B;CAChC,WAAW;CACX,aAAa;CACb,0BAA0B;AAC3B;;AAEA;CACC,WAAW;CACX,YAAY;CACZ,4BAA4B;CAC5B,kBAAkB;CAClB,SAAS;CACT,QAAQ;CACR,uBAAuB;CACvB,UAAU;CACV,kBAAkB;EACjB,qBAAqB;EACrB,sBAAsB;EACtB,0BAA0B;EAC1B,uBAAuB;CACxB,2CAA2C;EAC1C,8CAA8C;EAC9C,+CAA+C;EAC/C,mDAAmD;EACnD,gDAAgD;AAClD;;AAEA;CACC,WAAW;CACX,QAAQ;CACR,SAAS;CACT,mBAAmB;CACnB,iCAAiC;CACjC,gEAAgE;CAChE,kBAAkB;CAClB,UAAU;CACV,QAAQ;CACR,oBAAoB;CACpB,0BAA0B;EACzB,6BAA6B;EAC7B,8BAA8B;EAC9B,kCAAkC;EAClC,+BAA+B;AACjC;;;;;;AAMA;CACC;EACC,uBAAuB;CACxB;CACA;EACC,wBAAwB;CACzB;CACA;EACC,wBAAwB;CACzB;CACA;EACC,wBAAwB;CACzB;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,uBAAuB;CACxB;AACD;;AAEA;CACC;EACC,0BAA0B;CAC3B;CACA;EACC,2BAA2B;CAC5B;CACA;EACC,2BAA2B;CAC5B;CACA;EACC,2BAA2B;CAC5B;CACA;EACC,4BAA4B;CAC7B;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,4BAA4B;CAC7B;CACA;EACC,0BAA0B;CAC3B;AACD;;AAEA;CACC;EACC,2BAA2B;CAC5B;CACA;EACC,4BAA4B;CAC7B;CACA;EACC,4BAA4B;CAC7B;CACA;EACC,4BAA4B;CAC7B;CACA;EACC,6BAA6B;CAC9B;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,6BAA6B;CAC9B;CACA;EACC,2BAA2B;CAC5B;AACD;;AAEA;CACC;EACC,+BAA+B;CAChC;CACA;EACC,gCAAgC;CACjC;CACA;EACC,gCAAgC;CACjC;CACA;EACC,gCAAgC;CACjC;CACA;EACC,iCAAiC;CAClC;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,iCAAiC;CAClC;CACA;EACC,+BAA+B;CAChC;AACD;;AAEA;CACC;EACC,4BAA4B;CAC7B;CACA;EACC,6BAA6B;CAC9B;CACA;EACC,6BAA6B;CAC9B;CACA;EACC,6BAA6B;CAC9B;CACA;EACC,8BAA8B;CAC/B;CACA;EACC,yBAAyB;CAC1B;CACA;EACC,8BAA8B;CAC/B;CACA;EACC,4BAA4B;CAC7B;AACD;;AAEA;CACC;EACC,uBAAuB;CACxB;CACA;EACC,yBAAyB;CAC1B;AACD;;AAEA;CACC;EACC,0BAA0B;CAC3B;CACA;EACC,4BAA4B;CAC7B;AACD;;AAEA;CACC;EACC,2BAA2B;CAC5B;CACA;EACC,6BAA6B;CAC9B;AACD;;AAEA;CACC;EACC,+BAA+B;CAChC;CACA;EACC,iCAAiC;CAClC;AACD;;AAEA;CACC;EACC,4BAA4B;CAC7B;CACA;EACC,8BAA8B;CAC/B;AACD;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;IACjB,yBAAyB;EAC3B;;EAEA;IACE,YAAY;IACZ,aAAa;IACb,iBAAiB;IACjB,mBAAmB;IACnB,wCAAwC;EAC1C;;EAEA;IACE,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;EACb;;EAEA;IACE,aAAa;IACb,sBAAsB;EACxB;;EAEA;IACE,mBAAmB;IACnB,iBAAiB;IACjB,WAAW;EACb;;EAEA;IACE,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,kBAAkB;IAClB,eAAe;EACjB;;EAEA;IACE,qBAAqB;IACrB,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,eAAe;EACjB;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,kBAAkB;IAClB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;EAClB;EACA,oBAAoB;;AAEtB,6BAA6B;AAC7B;IACI,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,kBAAkB;EACpB;;EAEA;IACE,gBAAgB;IAChB,aAAa;IACb,eAAe;IACf,uBAAuB;EACzB;;EAEA;IACE,YAAY;IACZ,YAAY;EACd;;EAEA;IACE,qBAAqB;IACrB,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,sCAAsC;EACxC;;EAEA;IACE,yBAAyB;EAC3B;EACA,sBAAsB;AACxB;CACC,aAAa;CACb,yBAAyB;CACzB,kBAAkB;CAClB,wCAAwC;CACxC,iBAAiB;CACjB,iBAAiB;EAChB;;EAEA;CACD,eAAe;CACf,iBAAiB;CACjB,mBAAmB;CACnB,WAAW;EACV;;EAEA,6BAA6B;EAC7B;CACD,WAAW;CACX,iBAAiB;CACjB,kBAAkB;EACjB;;EAEA,uCAAuC;EACvC;CACD,gBAAgB;CAChB,UAAU;EACT;;EAEA;CACD,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,sBAAsB;CACtB,aAAa;CACb,mBAAmB;CACnB,kBAAkB;CAClB,wCAAwC;EACvC;;EAEA;CACD,yBAAyB;CACzB,iCAAiC;EAChC;;EAEA,uBAAuB;EACvB;CACD,YAAY;CACZ,YAAY;CACZ,kBAAkB;CAClB,kBAAkB;EACjB;;EAEA,wBAAwB;EACxB;CACD,iBAAiB;CACjB,gBAAgB;CAChB,WAAW;CACX,kBAAkB;EACjB;;EAEA;CACD,WAAW;CACX,eAAe;CACf,mBAAmB;EAClB;;EAEA,oBAAoB;EACpB;CACD,yBAAyB;CACzB,YAAY;CACZ,iBAAiB;CACjB,YAAY;CACZ,kBAAkB;CAClB,eAAe;CACf,sCAAsC;EACrC;;EAEA;CACD,yBAAyB;EACxB;;EAEA;CACD,aAAa;EACZ",sourcesContent:["body {\r\n    font-family: Arial, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  .header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-color:#007bff;\r\n    color: white;\r\n    padding: 10px 20px;\r\n  }\r\n  \r\n  .header-logo a {\r\n    color: white;\r\n    text-decoration: none;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .header-actions a {\r\n    color: white;\r\n    text-decoration: none;\r\n    margin-left: 20px;\r\n    font-size: 1rem;\r\n  }\r\n  \r\n  .header-actions a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  \r\n  \r\n  .car-list {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n    gap: 20px;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .car-card {\r\n    border: 1px solid #ddd;\r\n    border-radius: 8px;\r\n    padding: 16px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .car-card img {\r\n    max-width: 100%;\r\n    height: auto;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  .car-card button {\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    padding: 8px 16px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .car-card button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .cart {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .cart ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .cart li {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .cart li img {\r\n    border-radius: 4px;\r\n  }\r\n  .cart-item-enter {\r\n    opacity: 0;\r\n  }\r\n  \r\n  .cart-item-enter-active {\r\n    opacity: 1;\r\n    transition: opacity 300ms;\r\n  }\r\n  \r\n  .cart-item-exit {\r\n    opacity: 1;\r\n  }\r\n  \r\n  .cart-item-exit-active {\r\n    opacity: 0;\r\n    transition: opacity 300ms;\r\n  }\r\n  #cssload-wrapper {\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tz-index: 15;\r\n\toverflow: hidden;\r\n}\r\n\r\n.cssload-loader {\r\n\twidth: 413px;\r\n\theight: 413px;\r\n\tborder: 3px rgb(0,0,0) solid;\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\ttop: 50%;\r\n\tmargin: -206px 0 0 -206px;\r\n\tborder-radius: 50%;\r\n\t\t-o-border-radius: 50%;\r\n\t\t-ms-border-radius: 50%;\r\n\t\t-webkit-border-radius: 50%;\r\n\t\t-moz-border-radius: 50%;\r\n}\r\n\r\n.cssload-loader .cssload-loading {\r\n\tfont-size: 28px;\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\ttext-align: center;\r\n\tline-height: 39px;\r\n\tfont-family: 'Century Gothic', sans-serif;\r\n\tfont-style: italic;\r\n\tleft: 0;\r\n\ttop: 50%;\r\n\tmargin-top: 55px;\r\n\tcolor: rgb(0,0,0);\r\n\tfont-weight: bold;\r\n\ttext-transform: uppercase;\r\n\t\t-o-text-transform: uppercase;\r\n\t\t-ms-text-transform: uppercase;\r\n\t\t-webkit-text-transform: uppercase;\r\n\t\t-moz-text-transform: uppercase;\r\n}\r\n\r\n.cssload-loader-circle-1 {\r\n\twidth: 380px;\r\n\theight: 380px;\r\n\tleft: 14px;\r\n\ttop: 14px;\r\n\tborder: 3px rgb(0,0,0) solid;\r\n\tposition: absolute;\r\n\tborder-right-color: transparent;\r\n\tborder-radius: 50%;\r\n\t\t-o-border-radius: 50%;\r\n\t\t-ms-border-radius: 50%;\r\n\t\t-webkit-border-radius: 50%;\r\n\t\t-moz-border-radius: 50%;\r\n\tanimation: spin 6.15s linear infinite;\r\n\t\t-o-animation: spin 6.15s linear infinite;\r\n\t\t-ms-animation: spin 6.15s linear infinite;\r\n\t\t-webkit-animation: spin 6.15s linear infinite;\r\n\t\t-moz-animation: spin 6.15s linear infinite;\r\n}\r\n\r\n.cssload-loader-circle-2 {\r\n\twidth: 347px;\r\n\theight: 347px;\r\n\tleft: 14px;\r\n\ttop: 14px;\r\n\tborder: 3px transparent solid;\r\n\tposition: absolute;\r\n\tborder-right-color: rgb(232,21,18);\r\n\tborder-radius: 50%;\r\n\t\t-o-border-radius: 50%;\r\n\t\t-ms-border-radius: 50%;\r\n\t\t-webkit-border-radius: 50%;\r\n\t\t-moz-border-radius: 50%;\r\n\tanimation: spin 10.25s linear infinite;\r\n\t\t-o-animation: spin 10.25s linear infinite;\r\n\t\t-ms-animation: spin 10.25s linear infinite;\r\n\t\t-webkit-animation: spin 10.25s linear infinite;\r\n\t\t-moz-animation: spin 10.25s linear infinite;\r\n}\r\n\r\n.cssload-loader .cssload-line {\r\n\twidth: 28px;\r\n\theight: 6px;\r\n\tbackground: rgb(0,0,0);\r\n\tposition: absolute;\r\n}\r\n\r\n.cssload-loader .cssload-line:nth-child(1) {\r\n\tleft: 44px;\r\n\ttop: 50%;\r\n\tmargin-top: -3px;\r\n}\r\n\r\n.cssload-loader .cssload-line:nth-child(2) {\r\n\ttransform: rotate(45deg);\r\n\t\t-o-transform: rotate(45deg);\r\n\t\t-ms-transform: rotate(45deg);\r\n\t\t-webkit-transform: rotate(45deg);\r\n\t\t-moz-transform: rotate(45deg);\r\n\tleft: 91px;\r\n\ttop: 91px;\r\n}\r\n\r\n.cssload-loader .cssload-line:nth-child(3) {\r\n\ttop: 44px;\r\n\tleft: 50%;\r\n\twidth: 6px;\r\n\theight: 28px;\r\n}\r\n\r\n.cssload-loader .cssload-line:nth-child(4) {\r\n\ttransform: rotate(135deg);\r\n\t\t-o-transform: rotate(135deg);\r\n\t\t-ms-transform: rotate(135deg);\r\n\t\t-webkit-transform: rotate(135deg);\r\n\t\t-moz-transform: rotate(135deg);\r\n\tright: 91px;\r\n\ttop: 91px;\r\n}\r\n\r\n.cssload-loader .cssload-line:nth-child(5) {\r\n\tright: 44px;\r\n\ttop: 50%;\r\n\tmargin-top: -3px;\r\n}\r\n\r\n.cssload-loader .cssload-line:nth-child(6) {\r\n\ttransform: rotate(45deg);\r\n\t\t-o-transform: rotate(45deg);\r\n\t\t-ms-transform: rotate(45deg);\r\n\t\t-webkit-transform: rotate(45deg);\r\n\t\t-moz-transform: rotate(45deg);\r\n\tright: 91px;\r\n\tbottom: 91px;\r\n\tbackground: rgb(232,21,18);\r\n}\r\n\r\n.cssload-loader .cssload-subline {\r\n\tposition: absolute;\r\n\twidth: 8px;\r\n\theight: 6px;\r\n\tbackground: rgb(0,0,0);\r\n}\r\n\r\n.cssload-loader .cssload-subline:nth-child(7) {\r\n\ttransform: rotate(22.5deg);\r\n\t\t-o-transform: rotate(22.5deg);\r\n\t\t-ms-transform: rotate(22.5deg);\r\n\t\t-webkit-transform: rotate(22.5deg);\r\n\t\t-moz-transform: rotate(22.5deg);\r\n\tleft: 58px;\r\n\ttop: 138px;\r\n}\r\n\r\n.cssload-loader .cssload-subline:nth-child(8) {\r\n\ttransform: rotate(67.5deg);\r\n\t\t-o-transform: rotate(67.5deg);\r\n\t\t-ms-transform: rotate(67.5deg);\r\n\t\t-webkit-transform: rotate(67.5deg);\r\n\t\t-moz-transform: rotate(67.5deg);\r\n\tleft: 138px;\r\n\ttop: 58px;\r\n}\r\n\r\n.cssload-loader .cssload-subline:nth-child(9) {\r\n\ttransform: rotate(112.5deg);\r\n\t\t-o-transform: rotate(112.5deg);\r\n\t\t-ms-transform: rotate(112.5deg);\r\n\t\t-webkit-transform: rotate(112.5deg);\r\n\t\t-moz-transform: rotate(112.5deg);\r\n\tright: 138px;\r\n\ttop: 58px;\r\n}\r\n\r\n.cssload-loader .cssload-subline:nth-child(10) {\r\n\ttransform: rotate(157.5deg);\r\n\t\t-o-transform: rotate(157.5deg);\r\n\t\t-ms-transform: rotate(157.5deg);\r\n\t\t-webkit-transform: rotate(157.5deg);\r\n\t\t-moz-transform: rotate(157.5deg);\r\n\tright: 58px;\r\n\ttop: 138px;\r\n}\r\n\r\n.cssload-loader .cssload-subline:nth-child(11) {\r\n\ttransform: rotate(22.5deg);\r\n\t\t-o-transform: rotate(22.5deg);\r\n\t\t-ms-transform: rotate(22.5deg);\r\n\t\t-webkit-transform: rotate(22.5deg);\r\n\t\t-moz-transform: rotate(22.5deg);\r\n\tright: 55px;\r\n\tbottom: 135px;\r\n\tbackground: rgb(232,21,18);\r\n}\r\n\r\n.cssload-loader .cssload-needle {\r\n\twidth: 39px;\r\n\theight: 39px;\r\n\tborder: 3px rgb(0,0,0) solid;\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\ttop: 50%;\r\n\tmargin: -22px 0 0 -22px;\r\n\tz-index: 1;\r\n\tborder-radius: 50%;\r\n\t\t-o-border-radius: 50%;\r\n\t\t-ms-border-radius: 50%;\r\n\t\t-webkit-border-radius: 50%;\r\n\t\t-moz-border-radius: 50%;\r\n\tanimation: pegIt 6.15s infinite ease-in-out;\r\n\t\t-o-animation: pegIt 6.15s infinite ease-in-out;\r\n\t\t-ms-animation: pegIt 6.15s infinite ease-in-out;\r\n\t\t-webkit-animation: pegIt 6.15s infinite ease-in-out;\r\n\t\t-moz-animation: pegIt 6.15s infinite ease-in-out;\r\n}\r\n\r\n.cssload-loader .cssload-needle:before {\r\n\tcontent: \"\";\r\n\twidth: 0;\r\n\theight: 0;\r\n\tborder-style: solid;\r\n\tborder-width: 9.5px 138px 9.5px 0;\r\n\tborder-color: transparent rgb(232,21,18) transparent transparent;\r\n\tposition: absolute;\r\n\tright: 50%;\r\n\ttop: 50%;\r\n\tmargin: -9.5px 0 0 0;\r\n\tborder-radius: 0 50% 50% 0;\r\n\t\t-o-border-radius: 0 50% 50% 0;\r\n\t\t-ms-border-radius: 0 50% 50% 0;\r\n\t\t-webkit-border-radius: 0 50% 50% 0;\r\n\t\t-moz-border-radius: 0 50% 50% 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n@keyframes pegIt {\r\n\t0% {\r\n\t\ttransform: rotate(0deg);\r\n\t}\r\n\t16% {\r\n\t\ttransform: rotate(75deg);\r\n\t}\r\n\t25% {\r\n\t\ttransform: rotate(55deg);\r\n\t}\r\n\t30% {\r\n\t\ttransform: rotate(90deg);\r\n\t}\r\n\t36% {\r\n\t\ttransform: rotate(170deg);\r\n\t}\r\n\t42% {\r\n\t\ttransform: rotate(150deg);\r\n\t}\r\n\t50% {\r\n\t\ttransform: rotate(227deg);\r\n\t}\r\n\t100% {\r\n\t\ttransform: rotate(0deg);\r\n\t}\r\n}\r\n\r\n@-o-keyframes pegIt {\r\n\t0% {\r\n\t\t-o-transform: rotate(0deg);\r\n\t}\r\n\t16% {\r\n\t\t-o-transform: rotate(75deg);\r\n\t}\r\n\t25% {\r\n\t\t-o-transform: rotate(55deg);\r\n\t}\r\n\t30% {\r\n\t\t-o-transform: rotate(90deg);\r\n\t}\r\n\t36% {\r\n\t\t-o-transform: rotate(170deg);\r\n\t}\r\n\t42% {\r\n\t\ttransform: rotate(150deg);\r\n\t}\r\n\t50% {\r\n\t\t-o-transform: rotate(227deg);\r\n\t}\r\n\t100% {\r\n\t\t-o-transform: rotate(0deg);\r\n\t}\r\n}\r\n\r\n@-ms-keyframes pegIt {\r\n\t0% {\r\n\t\t-ms-transform: rotate(0deg);\r\n\t}\r\n\t16% {\r\n\t\t-ms-transform: rotate(75deg);\r\n\t}\r\n\t25% {\r\n\t\t-ms-transform: rotate(55deg);\r\n\t}\r\n\t30% {\r\n\t\t-ms-transform: rotate(90deg);\r\n\t}\r\n\t36% {\r\n\t\t-ms-transform: rotate(170deg);\r\n\t}\r\n\t42% {\r\n\t\ttransform: rotate(150deg);\r\n\t}\r\n\t50% {\r\n\t\t-ms-transform: rotate(227deg);\r\n\t}\r\n\t100% {\r\n\t\t-ms-transform: rotate(0deg);\r\n\t}\r\n}\r\n\r\n@-webkit-keyframes pegIt {\r\n\t0% {\r\n\t\t-webkit-transform: rotate(0deg);\r\n\t}\r\n\t16% {\r\n\t\t-webkit-transform: rotate(75deg);\r\n\t}\r\n\t25% {\r\n\t\t-webkit-transform: rotate(55deg);\r\n\t}\r\n\t30% {\r\n\t\t-webkit-transform: rotate(90deg);\r\n\t}\r\n\t36% {\r\n\t\t-webkit-transform: rotate(170deg);\r\n\t}\r\n\t42% {\r\n\t\ttransform: rotate(150deg);\r\n\t}\r\n\t50% {\r\n\t\t-webkit-transform: rotate(227deg);\r\n\t}\r\n\t100% {\r\n\t\t-webkit-transform: rotate(0deg);\r\n\t}\r\n}\r\n\r\n@-moz-keyframes pegIt {\r\n\t0% {\r\n\t\t-moz-transform: rotate(0deg);\r\n\t}\r\n\t16% {\r\n\t\t-moz-transform: rotate(75deg);\r\n\t}\r\n\t25% {\r\n\t\t-moz-transform: rotate(55deg);\r\n\t}\r\n\t30% {\r\n\t\t-moz-transform: rotate(90deg);\r\n\t}\r\n\t36% {\r\n\t\t-moz-transform: rotate(170deg);\r\n\t}\r\n\t42% {\r\n\t\ttransform: rotate(150deg);\r\n\t}\r\n\t50% {\r\n\t\t-moz-transform: rotate(227deg);\r\n\t}\r\n\t100% {\r\n\t\t-moz-transform: rotate(0deg);\r\n\t}\r\n}\r\n\r\n@keyframes spin {\r\n\t0% {\r\n\t\ttransform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\ttransform: rotate(360deg);\r\n\t}\r\n}\r\n\r\n@-o-keyframes spin {\r\n\t0% {\r\n\t\t-o-transform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\t-o-transform: rotate(360deg);\r\n\t}\r\n}\r\n\r\n@-ms-keyframes spin {\r\n\t0% {\r\n\t\t-ms-transform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\t-ms-transform: rotate(360deg);\r\n\t}\r\n}\r\n\r\n@-webkit-keyframes spin {\r\n\t0% {\r\n\t\t-webkit-transform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\t-webkit-transform: rotate(360deg);\r\n\t}\r\n}\r\n\r\n@-moz-keyframes spin {\r\n\t0% {\r\n\t\t-moz-transform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\t-moz-transform: rotate(360deg);\r\n\t}\r\n}\r\n.login-page {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    background-color: #f4f4f9;\r\n  }\r\n  \r\n  .login-form-container {\r\n    width: 400px;\r\n    padding: 30px;\r\n    background: white;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  .login-form-container h1 {\r\n    font-size: 1.8rem;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n    color: #333;\r\n  }\r\n  \r\n  .login-form-container form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .login-form-container label {\r\n    margin-bottom: 10px;\r\n    font-weight: bold;\r\n    color: #555;\r\n  }\r\n  \r\n  .login-form-container input {\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    font-size: 1rem;\r\n  }\r\n  \r\n  .login-form-container input:focus {\r\n    border-color: #007bff;\r\n    outline: none;\r\n  }\r\n  \r\n  .login-form-container button {\r\n    padding: 10px 15px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .login-form-container button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .login-form-container p {\r\n    text-align: center;\r\n    color: red;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  /* styles/main.css */\r\n\r\n/* Стили для списка брендов */\r\n.brand-list-container {\r\n    padding: 20px;\r\n    background-color: #f7e5e5;\r\n    text-align: center;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .brand-list {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .brand-item {\r\n    margin: 10px;\r\n    padding: 5px;\r\n  }\r\n  \r\n  .brand-link {\r\n    text-decoration: none;\r\n    padding: 10px 20px;\r\n    background-color: #3498db;\r\n    color: white;\r\n    border-radius: 5px;\r\n    transition: background-color 0.3s ease;\r\n  }\r\n  \r\n  .brand-link:hover {\r\n    background-color: #2980b9;\r\n  }\r\n  /* Стили для корзины */\r\n.cart {\r\n\tpadding: 20px;\r\n\tbackground-color: #f9f9f9;\r\n\tborder-radius: 8px;\r\n\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n\tmax-width: 1200px;\r\n\tmargin: 20px auto;\r\n  }\r\n  \r\n  .cart h1 {\r\n\tfont-size: 2rem;\r\n\tfont-weight: bold;\r\n\tmargin-bottom: 20px;\r\n\tcolor: #333;\r\n  }\r\n  \r\n  /* Стили для пустой корзины */\r\n  .cart p {\r\n\tcolor: #777;\r\n\tfont-size: 1.2rem;\r\n\ttext-align: center;\r\n  }\r\n  \r\n  /* Стили для списка товаров в корзине */\r\n  .cart ul {\r\n\tlist-style: none;\r\n\tpadding: 0;\r\n  }\r\n  \r\n  .cart li {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n\tbackground-color: #fff;\r\n\tpadding: 20px;\r\n\tmargin-bottom: 10px;\r\n\tborder-radius: 8px;\r\n\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .cart li:hover {\r\n\tbackground-color: #f1f1f1;\r\n\ttransition: background-color 0.3s;\r\n  }\r\n  \r\n  /* Изображение товара */\r\n  .cart li img {\r\n\twidth: 100px;\r\n\theight: auto;\r\n\tborder-radius: 4px;\r\n\tmargin-right: 20px;\r\n  }\r\n  \r\n  /* Информация о товаре */\r\n  .cart li h3 {\r\n\tfont-size: 1.1rem;\r\n\tfont-weight: 500;\r\n\tcolor: #333;\r\n\tmargin-bottom: 5px;\r\n  }\r\n  \r\n  .cart li p {\r\n\tcolor: #666;\r\n\tfont-size: 1rem;\r\n\tmargin-bottom: 10px;\r\n  }\r\n  \r\n  /* Кнопка удаления */\r\n  .cart li button {\r\n\tbackground-color: #e74c3c;\r\n\tcolor: white;\r\n\tpadding: 8px 16px;\r\n\tborder: none;\r\n\tborder-radius: 5px;\r\n\tcursor: pointer;\r\n\ttransition: background-color 0.3s ease;\r\n  }\r\n  \r\n  .cart li button:hover {\r\n\tbackground-color: #c0392b;\r\n  }\r\n  \r\n  .cart li button:focus {\r\n\toutline: none;\r\n  }\r\n  "],sourceRoot:""}]);const l=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},146:(e,t,n)=>{var r=n(404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var v=d(n,y);try{s(t,y,v)}catch(e){}}}}return t}},691:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case m:case u:return e;default:return t}}case o:return t}}}function w(e){return C(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||C(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return C(e)===s},t.isContextProvider=function(e){return C(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return C(e)===d},t.isFragment=function(e){return C(e)===a},t.isLazy=function(e){return C(e)===g},t.isMemo=function(e){return C(e)===m},t.isPortal=function(e){return C(e)===o},t.isProfiler=function(e){return C(e)===l},t.isStrictMode=function(e){return C(e)===i},t.isSuspense=function(e){return C(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===A||e.$$typeof===y)},t.typeOf=C},404:(e,t,n)=>{e.exports=n(691)},551:(e,t,n)=>{var r=n(159),o=n(982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=Symbol.for("react.element"),w=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),B=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),_=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var z,j=Object.assign;function $(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var M=!1;function F(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function D(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case w:return"Portal";case E:return"Profiler";case k:return"StrictMode";case O:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,xe=null,ke=null;function Ee(e){if(e=Ao(e)){if("function"!=typeof we)throw Error(a(280));var t=e.stateNode;t&&(t=wo(t),we(e.stateNode,e.type,t))}}function Se(e){xe?ke?ke.push(e):ke=[e]:xe=e}function Be(){if(xe){var e=xe,t=ke;if(ke=xe=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function Oe(){}var _e=!1;function Te(e,t,n){if(_e)return e(t,n);_e=!0;try{return Pe(e,t,n)}finally{_e=!1,(null!==xe||null!==ke)&&(Oe(),Be())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=wo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Re=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){Re=!1}function Ie(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var ze=!1,je=null,$e=!1,Me=null,Fe={onError:function(e){ze=!0,je=e}};function De(e,t,n,r,o,a,i,l,u){ze=!1,je=null,Ie.apply(Fe,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Ue(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ve(o),e;if(i===r)return Ve(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ge=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,qe=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Xe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&!(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&4194240&a))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function At(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var Ct,wt,xt,kt,Et,St=!1,Bt=[],Pt=null,Ot=null,_t=null,Tt=new Map,Lt=new Map,Rt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function zt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=Ao(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function jt(e){var t=bo(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Et(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function $t(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Ao(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function Mt(e,t,n){$t(e)&&n.delete(t)}function Ft(){St=!1,null!==Pt&&$t(Pt)&&(Pt=null),null!==Ot&&$t(Ot)&&(Ot=null),null!==_t&&$t(_t)&&(_t=null),Tt.forEach(Mt),Lt.forEach(Mt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Ut(e){function t(t){return Dt(t,e)}if(0<Bt.length){Dt(Bt[0],e);for(var n=1;n<Bt.length;n++){var r=Bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Dt(Pt,e),null!==Ot&&Dt(Ot,e),null!==_t&&Dt(_t,e),Tt.forEach(t),Lt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)jt(n),null===n.blockedOn&&Rt.shift()}var Wt=A.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=1,Gt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Yt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=4,Gt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Gt(e,t,n,r){if(Vt){var o=qt(e,t,n,r);if(null===o)Vr(e,t,r,Qt,n),It(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=zt(Pt,e,t,n,r,o),!0;case"dragenter":return Ot=zt(Ot,e,t,n,r,o),!0;case"mouseover":return _t=zt(_t,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Tt.set(a,zt(Tt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Lt.set(a,zt(Lt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==o;){var a=Ao(o);if(null!==a&&Ct(a),null===(a=qt(e,t,n,r))&&Vr(e,t,r,Qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Qt=null;function qt(e,t,n,r){if(Qt=null,null!==(e=bo(e=Ce(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=j({},sn,{view:0,detail:0}),dn=on(fn),pn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(j({},pn,{dataTransfer:0})),gn=on(j({},fn,{relatedTarget:0})),yn=on(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(vn),An=on(j({},sn,{data:0})),Cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function En(){return kn}var Sn=j({},fn,{key:function(e){if(e.key){var t=Cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=on(Sn),Pn=on(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=on(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),_n=on(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(Tn),Rn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,In=null;c&&"documentMode"in document&&(In=document.documentMode);var zn=c&&"TextEvent"in window&&!In,jn=c&&(!Nn||In&&8<In&&11>=In),$n=String.fromCharCode(32),Mn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Se(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Gn=null;function Qn(e){$r(e,0)}function qn(e){if(G(Co(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Gn=Yn=null)}function nr(e){if("value"===e.propertyName&&qn(Gn)){var t=[];Hn(t,Gn,e,Ce(e)),Te(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Gn)}function ar(e,t){if("click"===e)return qn(t)}function ir(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Yr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Cr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Cr("Animation","AnimationEnd"),animationiteration:Cr("Animation","AnimationIteration"),animationstart:Cr("Animation","AnimationStart"),transitionend:Cr("Transition","TransitionEnd")},xr={},kr={};function Er(e){if(xr[e])return xr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return xr[e]=n[t];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var Sr=Er("animationend"),Br=Er("animationiteration"),Pr=Er("animationstart"),Or=Er("transitionend"),_r=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){_r.set(e,t),u(t,[e])}for(var Rr=0;Rr<Tr.length;Rr++){var Nr=Tr[Rr];Lr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Lr(Sr,"onAnimationEnd"),Lr(Br,"onAnimationIteration"),Lr(Pr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(Or,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(De.apply(this,arguments),ze){if(!ze)throw Error(a(198));var c=je;ze=!1,je=null,$e||($e=!0,Me=c)}}(r,t,void 0,e),e.currentTarget=null}function $r(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;jr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;jr(o,l,s),a=u}}}if($e)throw e=Me,$e=!1,Me=null,e}function Mr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Dr]){e[Dr]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Dr]||(t[Dr]=!0,Fr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Kt(t)){case 1:var o=Ht;break;case 4:o=Yt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=a,o=Ce(n),i=[];e:{var l=_r.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Bn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Sr:case Br:case Pr:u=yn;break;case Or:u=_n;break;case"scroll":u=dn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Le(h,d))&&c.push(Hr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Ae||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=Ue(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:Co(u),p=null==s?l:Co(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Gr(p))h++;for(p=0,m=d;m;m=Gr(m))p++;for(;0<h-p;)c=Gr(c),h--;for(;0<p-h;)d=Gr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Gr(c),d=Gr(d)}c=null}else c=null;null!==u&&Qr(i,l,u,c,!1),null!==s&&null!==f&&Qr(i,f,s,c,!0)}if("select"===(u=(l=r?Co(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Kn;else if(Vn(l))if(Xn)g=ir;else{g=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ar);switch(g&&(g=g(e,r))?Hn(i,g,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?Co(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Ar(i,n,o)}var v;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(v=en()):(Zt="value"in(Xt=o)?Xt.value:Xt.textContent,Un=!0)),0<(y=Yr(r,b)).length&&(b=new An(b,e,null,n,o),i.push({event:b,listeners:y}),(v||null!==(v=Dn(n)))&&(b.data=v))),(v=zn?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(Mn=!0,$n);case"textInput":return(e=t.data)===$n&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Nn&&Fn(e,t)?(e=en(),Jt=Zt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(o=new An("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=v)}$r(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Le(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Le(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Le(n,a))&&i.unshift(Hr(n,u,l)):o||null!=(u=Le(n,a))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Kr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Ut(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,yo="__reactListeners$"+fo,vo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function Ao(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Co(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wo(e){return e[ho]||null}var xo=[],ko=-1;function Eo(e){return{current:e}}function So(e){0>ko||(e.current=xo[ko],xo[ko]=null,ko--)}function Bo(e,t){ko++,xo[ko]=e.current,e.current=t}var Po={},Oo=Eo(Po),_o=Eo(!1),To=Po;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ro(e){return null!=e.childContextTypes}function No(){So(_o),So(Oo)}function Io(e,t,n){if(Oo.current!==Po)throw Error(a(168));Bo(Oo,t),Bo(_o,n)}function zo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return j({},n,r)}function jo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,To=Oo.current,Bo(Oo,e),Bo(_o,_o.current),!0}function $o(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=zo(e,t,To),r.__reactInternalMemoizedMergedChildContext=e,So(_o),So(Oo),Bo(Oo,e)):So(_o),Bo(_o,n)}var Mo=null,Fo=!1,Do=!1;function Uo(e){null===Mo?Mo=[e]:Mo.push(e)}function Wo(){if(!Do&&null!==Mo){Do=!0;var e=0,t=bt;try{var n=Mo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mo=null,Fo=!1}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),Ge(Je,Wo),t}finally{bt=t,Do=!1}}return null}var Vo=[],Ho=0,Yo=null,Go=0,Qo=[],qo=0,Ko=null,Xo=1,Zo="";function Jo(e,t){Vo[Ho++]=Go,Vo[Ho++]=Yo,Yo=e,Go=t}function ea(e,t,n){Qo[qo++]=Xo,Qo[qo++]=Zo,Qo[qo++]=Ko,Ko=e;var r=Xo;e=Zo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Zo=a+e}else Xo=1<<a|n<<o|r,Zo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Yo;)Yo=Vo[--Ho],Vo[Ho]=null,Go=Vo[--Ho],Vo[Ho]=null;for(;e===Ko;)Ko=Qo[--qo],Qo[qo]=null,Zo=Qo[--qo],Qo[qo]=null,Xo=Qo[--qo],Qo[qo]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Ts(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ko?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ts(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function sa(e){return!(!(1&e.mode)||128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(sa(e))throw Error(a(418));t=so(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(sa(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(sa(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=so(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?so(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=so(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ga=A.ReactCurrentBatchConfig;function ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function va(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ba(e){return(0,e._init)(e._payload)}function Aa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Rs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=js(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===x?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===L&&ba(a)===t.type)?((r=o(t,n.props)).ref=ya(e,t,n),r.return=e,r):((r=Ns(n.type,n.key,n.props,null,e.mode,r)).ref=ya(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$s(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Is(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=js(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case C:return(n=Ns(t.type,t.key,t.props,null,e.mode,n)).ref=ya(e,null,t),n.return=e,n;case w:return(t=$s(t,e.mode,n)).return=e,t;case L:return d(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=Is(t,e.mode,n,null)).return=e,t;va(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case C:return n.key===o?s(e,t,n,r):null;case w:return n.key===o?c(e,t,n,r):null;case L:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||I(n))return null!==o?null:f(e,t,n,r,null);va(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case C:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case L:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||I(r))return f(t,e=e.get(n)||null,r,o,null);va(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,f=g}if(m===l.length)return n(o,f),aa&&Jo(o,m),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return aa&&Jo(o,m),s}for(f=r(o,f);m<l.length;m++)null!==(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),aa&&Jo(o,m),s}function g(o,l,u,s){var c=I(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,g=l=0,y=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(o,m,v.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,m=y}if(v.done)return n(o,m),aa&&Jo(o,g),c;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=d(o,v.value,s))&&(l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return aa&&Jo(o,g),c}for(m=r(o,m);!v.done;g++,v=u.next())null!==(v=h(m,o,g,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return e&&m.forEach((function(e){return t(o,e)})),aa&&Jo(o,g),c}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case C:e:{for(var s=i.key,c=a;null!==c;){if(c.key===s){if((s=i.type)===x){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===L&&ba(s)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=ya(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===x?((a=Is(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Ns(i.type,i.key,i.props,null,r.mode,u)).ref=ya(r,a,i),u.return=r,r=u)}return l(r);case w:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=$s(i,r.mode,u)).return=r,r=a}return l(r);case L:return e(r,a,(c=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(I(i))return g(r,a,i,u);va(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=js(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Ca=Aa(!0),wa=Aa(!1),xa=Eo(null),ka=null,Ea=null,Sa=null;function Ba(){Sa=Ea=ka=null}function Pa(e){var t=xa.current;So(xa),e._currentValue=t}function Oa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _a(e,t){ka=e,Sa=Ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bl=!0),e.firstContext=null)}function Ta(e){var t=e._currentValue;if(Sa!==e)if(e={context:e,memoizedValue:t,next:null},null===Ea){if(null===ka)throw Error(a(308));Ea=e,ka.dependencies={lanes:0,firstContext:e}}else Ea=Ea.next=e;return t}var La=null;function Ra(e){null===La?La=[e]:La.push(e)}function Na(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ra(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ia(e,r)}function Ia(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var za=!1;function ja(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function $a(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ma(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Pu){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ia(e,n)}return null===(o=r.interleaved)?(t.next=t,Ra(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ia(e,n)}function Da(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Wa(e,t,n,r){var o=e.updateQueue;za=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?a=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,c=s=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:za=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);zu|=i,e.lanes=i,e.memoizedState=f}}function Va(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ha={},Ya=Eo(Ha),Ga=Eo(Ha),Qa=Eo(Ha);function qa(e){if(e===Ha)throw Error(a(174));return e}function Ka(e,t){switch(Bo(Qa,t),Bo(Ga,e),Bo(Ya,Ha),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}So(Ya),Bo(Ya,t)}function Xa(){So(Ya),So(Ga),So(Qa)}function Za(e){qa(Qa.current);var t=qa(Ya.current),n=ue(t,e.type);t!==n&&(Bo(Ga,e),Bo(Ya,n))}function Ja(e){Ga.current===e&&(So(Ya),So(Ga))}var ei=Eo(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var oi=A.ReactCurrentDispatcher,ai=A.ReactCurrentBatchConfig,ii=0,li=null,ui=null,si=null,ci=!1,fi=!1,di=0,pi=0;function hi(){throw Error(a(321))}function mi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,o,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oi.current=null===e||null===e.memoizedState?Ji:el,e=n(r,o),fi){i=0;do{if(fi=!1,di=0,25<=i)throw Error(a(301));i+=1,si=ui=null,t.updateQueue=null,oi.current=tl,e=n(r,o)}while(fi)}if(oi.current=Zi,t=null!==ui&&null!==ui.next,ii=0,si=ui=li=null,ci=!1,t)throw Error(a(300));return e}function yi(){var e=0!==di;return di=0,e}function vi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===si?li.memoizedState=si=e:si=si.next=e,si}function bi(){if(null===ui){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=ui.next;var t=null===si?li.memoizedState:si.next;if(null!==t)si=t,ui=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ui=e).memoizedState,baseState:ui.baseState,baseQueue:ui.baseQueue,queue:ui.queue,next:null},null===si?li.memoizedState=si=e:si=si.next=e}return si}function Ai(e,t){return"function"==typeof t?t(e):t}function Ci(e){var t=bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ui,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ii&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,li.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,li.lanes|=i,zu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function wi(e){var t=bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function xi(){}function ki(e,t){var n=li,r=bi(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,bl=!0),r=r.queue,zi(Bi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==si&&1&si.memoizedState.tag){if(n.flags|=2048,Ti(9,Si.bind(null,n,r,o,t),void 0,null),null===Ou)throw Error(a(349));30&ii||Ei(n,t,o)}return o}function Ei(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Si(e,t,n,r){t.value=n,t.getSnapshot=r,Pi(t)&&Oi(e)}function Bi(e,t,n){return n((function(){Pi(t)&&Oi(e)}))}function Pi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Oi(e){var t=Ia(e,1);null!==t&&ns(t,e,1,-1)}function _i(e){var t=vi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=Qi.bind(null,li,e),[t.memoizedState,e]}function Ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Li(){return bi().memoizedState}function Ri(e,t,n,r){var o=vi();li.flags|=e,o.memoizedState=Ti(1|t,n,void 0,void 0===r?null:r)}function Ni(e,t,n,r){var o=bi();r=void 0===r?null:r;var a=void 0;if(null!==ui){var i=ui.memoizedState;if(a=i.destroy,null!==r&&mi(r,i.deps))return void(o.memoizedState=Ti(t,n,a,r))}li.flags|=e,o.memoizedState=Ti(1|t,n,a,r)}function Ii(e,t){return Ri(8390656,8,e,t)}function zi(e,t){return Ni(2048,8,e,t)}function ji(e,t){return Ni(4,2,e,t)}function $i(e,t){return Ni(4,4,e,t)}function Mi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,Ni(4,4,Mi.bind(null,t,e),n)}function Di(){}function Ui(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Wi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Vi(e,t,n){return 21&ii?(lr(n,t)||(n=mt(),li.lanes|=n,zu|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n)}function Hi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ai.transition;ai.transition={};try{e(!1),t()}finally{bt=n,ai.transition=r}}function Yi(){return bi().memoizedState}function Gi(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},qi(e)?Ki(t,n):null!==(n=Na(e,t,n,r))&&(ns(n,e,r,es()),Xi(n,t,r))}function Qi(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(qi(e))Ki(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,Ra(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Na(e,t,o,r))&&(ns(n,e,r,o=es()),Xi(n,t,r))}}function qi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Ki(e,t){fi=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Zi={readContext:Ta,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},Ji={readContext:Ta,useCallback:function(e,t){return vi().memoizedState=[e,void 0===t?null:t],e},useContext:Ta,useEffect:Ii,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ri(4194308,4,Mi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ri(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ri(4,2,e,t)},useMemo:function(e,t){var n=vi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=vi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Gi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vi().memoizedState=e},useState:_i,useDebugValue:Di,useDeferredValue:function(e){return vi().memoizedState=e},useTransition:function(){var e=_i(!1),t=e[0];return e=Hi.bind(null,e[1]),vi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,o=vi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Ou)throw Error(a(349));30&ii||Ei(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Ii(Bi.bind(null,r,i,e),[e]),r.flags|=2048,Ti(9,Si.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=vi(),t=Ou.identifierPrefix;if(aa){var n=Zo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=di++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:Ta,useCallback:Ui,useContext:Ta,useEffect:zi,useImperativeHandle:Fi,useInsertionEffect:ji,useLayoutEffect:$i,useMemo:Wi,useReducer:Ci,useRef:Li,useState:function(){return Ci(Ai)},useDebugValue:Di,useDeferredValue:function(e){return Vi(bi(),ui.memoizedState,e)},useTransition:function(){return[Ci(Ai)[0],bi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Yi,unstable_isNewReconciler:!1},tl={readContext:Ta,useCallback:Ui,useContext:Ta,useEffect:zi,useImperativeHandle:Fi,useInsertionEffect:ji,useLayoutEffect:$i,useMemo:Wi,useReducer:wi,useRef:Li,useState:function(){return wi(Ai)},useDebugValue:Di,useDeferredValue:function(e){var t=bi();return null===ui?t.memoizedState=e:Vi(t,ui.memoizedState,e)},useTransition:function(){return[wi(Ai)[0],bi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Yi,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ol={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),a=Ma(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(ns(t,e,o,r),Da(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),a=Ma(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(ns(t,e,o,r),Da(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Ma(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Fa(e,o,r))&&(ns(t,e,r,n),Da(t,e,r))}};function al(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function il(e,t,n){var r=!1,o=Po,a=t.contextType;return"object"==typeof a&&null!==a?a=Ta(a):(o=Ro(t)?To:Oo.current,a=(r=null!=(r=t.contextTypes))?Lo(e,o):Po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ol,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ol.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},ja(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ta(a):(a=Ro(t)?To:Oo.current,o.context=Lo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(rl(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ol.enqueueReplaceState(o,o.state,null),Wa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function sl(e,t){try{var n="",r=t;do{n+=D(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function cl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=Ma(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vu||(Vu=!0,Hu=r),fl(0,t)},n}function hl(e,t,n){(n=Ma(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ma(-1,1)).tag=2,Fa(n,t,1))),n.lanes|=1),e)}var vl=A.ReactCurrentOwner,bl=!1;function Al(e,t,n,r){t.child=null===e?wa(t,null,n,r):Ca(t,e.child,n,r)}function Cl(e,t,n,r,o){n=n.render;var a=t.ref;return _a(t,o),r=gi(e,t,n,r,a,o),n=yi(),null===e||bl?(aa&&n&&ta(t),t.flags|=1,Al(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vl(e,t,o))}function wl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ls(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ns(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,xl(e,t,a,r,o))}if(a=e.child,!(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Vl(e,t,o)}return t.flags|=1,(e=Rs(a,r)).ref=t.ref,e.return=t,t.child=e}function xl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=a,!(e.lanes&o))return t.lanes=e.lanes,Vl(e,t,o);131072&e.flags&&(bl=!0)}}return Sl(e,t,n,r,o)}function kl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Bo(Ru,Lu),Lu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Bo(Ru,Lu),Lu|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Bo(Ru,Lu),Lu|=n;else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Bo(Ru,Lu),Lu|=r;return Al(e,t,o,n),t.child}function El(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Sl(e,t,n,r,o){var a=Ro(n)?To:Oo.current;return a=Lo(t,a),_a(t,o),n=gi(e,t,n,r,a,o),r=yi(),null===e||bl?(aa&&r&&ta(t),t.flags|=1,Al(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vl(e,t,o))}function Bl(e,t,n,r,o){if(Ro(n)){var a=!0;jo(t)}else a=!1;if(_a(t,o),null===t.stateNode)Wl(e,t),il(t,n,r),ul(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Ta(s):Lo(t,s=Ro(n)?To:Oo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ll(t,i,r,s),za=!1;var d=t.memoizedState;i.state=d,Wa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||_o.current||za?("function"==typeof c&&(rl(t,n,c,r),u=t.memoizedState),(l=za||al(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,$a(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:nl(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ta(u):Lo(t,u=Ro(n)?To:Oo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ll(t,i,r,u),za=!1,d=t.memoizedState,i.state=d,Wa(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||_o.current||za?("function"==typeof p&&(rl(t,n,p,r),h=t.memoizedState),(s=za||al(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Pl(e,t,n,r,a,o)}function Pl(e,t,n,r,o,a){El(e,t);var i=!!(128&t.flags);if(!r&&!i)return o&&$o(t,n,!1),Vl(e,t,a);r=t.stateNode,vl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ca(t,e.child,null,a),t.child=Ca(t,null,l,a)):Al(e,t,l,a),t.memoizedState=r.state,o&&$o(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?Io(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Io(0,t.context,!1),Ka(e,t.containerInfo)}function _l(e,t,n,r,o){return ha(),ma(o),t.flags|=256,Al(e,t,n,r),t.child}var Tl,Ll,Rl,Nl,Il={dehydrated:null,treeContext:null,retryLane:0};function zl(e){return{baseLanes:e,cachePool:null,transitions:null}}function jl(e,t,n){var r,o=t.pendingProps,i=ei.current,l=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Bo(ei,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},1&o||null===l?l=zs(u,o,0,null):(l.childLanes=0,l.pendingProps=u),e=Is(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=zl(n),t.memoizedState=Il,e):$l(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Ml(e,t,l,r=cl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=zs({mode:"visible",children:r.children},o,0,null),(i=Is(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&Ca(t,e.child,null,l),t.child.memoizedState=zl(l),t.memoizedState=Il,i);if(!(1&t.mode))return Ml(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Ml(e,t,l,r=cl(i=Error(a(419)),r,void 0))}if(u=!!(l&e.childLanes),bl||u){if(null!==(r=Ou)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|l)?0:o)&&o!==i.retryLane&&(i.retryLane=o,Ia(e,o),ns(r,e,o,-1))}return ms(),Ml(e,t,l,r=cl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Bs.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=so(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Qo[qo++]=Xo,Qo[qo++]=Zo,Qo[qo++]=Ko,Xo=e.id,Zo=e.overflow,Ko=t),(t=$l(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:o.children};return 1&u||t.child===i?(o=Rs(i,s)).subtreeFlags=14680064&i.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null),null!==r?l=Rs(r,l):(l=Is(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?zl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Il,o}return e=(l=e.child).sibling,o=Rs(l,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function $l(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ml(e,t,n,r){return null!==r&&ma(r),Ca(t,e.child,null,n),(e=$l(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Oa(e.return,t,n)}function Dl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ul(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Al(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fl(e,n,t);else if(19===e.tag)Fl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Bo(ei,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Dl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ti(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Dl(t,!0,n,null,a);break;case"together":Dl(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Wl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Rs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return Ro(t.type)&&No(),Yl(t),null;case 3:return r=t.stateNode,Xa(),So(_o),So(Oo),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ia&&(is(ia),ia=null))),Ll(e,t),Yl(t),null;case 5:Ja(t);var o=qa(Qa.current);if(n=t.type,null!==e&&null!=t.stateNode)Rl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Yl(t),null}if(e=qa(Ya.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=!!(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)Mr(Ir[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":K(r,i),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Mr("invalid",r);break;case"textarea":oe(r,i),Mr("invalid",r)}for(var u in ve(n,i),o=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Mr("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Tl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)Mr(Ir[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":K(e,r),o=q(e,r),Mr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=j({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Mr("invalid",e)}for(i in ve(n,o),s=o)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Mr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)Nl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=qa(Qa.current),qa(Ya.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Zr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Yl(t),null;case 13:if(So(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&1&t.mode&&!(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),i=!1}else null!==ia&&(is(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Nu&&(Nu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return Xa(),Ll(e,t),null===e&&Ur(t.stateNode.containerInfo),Yl(t),null;case 10:return Pa(t.type._context),Yl(t),null;case 19:if(So(ei),null===(i=t.memoizedState))return Yl(t),null;if(r=!!(128&t.flags),null===(u=i.rendering))if(r)Hl(i,!1);else{if(0!==Nu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=ti(e))){for(t.flags|=128,Hl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Bo(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Uu&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return Yl(t),null}else 2*Xe()-i.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ei.current,Bo(ei,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Lu)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Ql(e,t){switch(na(t),t.tag){case 1:return Ro(t.type)&&No(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xa(),So(_o),So(Oo),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Ja(t),null;case 13:if(So(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return So(ei),null;case 4:return Xa(),null;case 10:return Pa(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ll=function(){},Rl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,qa(Ya.current);var a,i=null;switch(n){case"input":o=q(e,o),r=q(e,r),i=[];break;case"select":o=j({},o,{value:void 0}),r=j({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(a in u)!u.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&u[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Mr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Nl=function(e,t,n,r){n!==r&&(t.flags|=4)};var ql=!1,Kl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function Jl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ks(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){ks(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&eu(t,n,a)}o=o.next}while(o!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[yo],delete t[vo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,fu=!1;function du(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Kl||Jl(n,t);case 6:var r=cu,o=fu;cu=null,du(e,t,n),fu=o,null!==(cu=r)&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Ut(e)):uo(cu,n.stateNode));break;case 4:r=cu,o=fu,cu=n.stateNode.containerInfo,fu=!0,du(e,t,n),cu=r,fu=o;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(2&a||4&a)&&eu(n,t,i),o=o.next}while(o!==r)}du(e,t,n);break;case 1:if(!Kl&&(Jl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ks(n,t,e)}du(e,t,n);break;case 21:du(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,du(e,t,n),Kl=r):du(e,t,n);break;default:du(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xl),t.forEach((function(t){var r=Ps.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,fu=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===cu)throw Error(a(160));pu(i,l,o),cu=null,fu=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){ks(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),yu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){ks(e,e.return,t)}try{nu(5,e,e.return)}catch(t){ks(e,e.return,t)}}break;case 1:mu(t,e),yu(e),512&r&&null!==n&&Jl(n,n.return);break;case 5:if(mu(t,e),yu(e),512&r&&null!==n&&Jl(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){ks(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(o,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(u){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){ks(e,e.return,t)}}break;case 6:if(mu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){ks(e,e.return,t)}}break;case 3:if(mu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){ks(e,e.return,t)}break;case 4:default:mu(t,e),yu(e);break;case 13:mu(t,e),yu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Du=Xe())),4&r&&hu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(c=Kl)||f,mu(t,e),Kl=c):mu(t,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Jl(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){ks(r,n,e)}}break;case 5:Jl(p,p.return);break;case 22:if(null!==p.memoizedState){Cu(d);continue}}null!==h?(h.return=p,Zl=h):Cu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){ks(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){ks(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),yu(e),4&r&&hu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,lu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(a(161))}}catch(t){ks(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vu(e,t,n){Zl=e,bu(e,t,n)}function bu(e,t,n){for(var r=!!(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||ql;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Kl;l=ql;var s=Kl;if(ql=i,(Kl=u)&&!s)for(Zl=o;null!==Zl;)u=(i=Zl).child,22===i.tag&&null!==i.memoizedState?wu(o):null!==u?(u.return=i,Zl=u):wu(o);for(;null!==a;)Zl=a,bu(a,t,n),a=a.sibling;Zl=o,ql=l,Kl=s}Au(e)}else 8772&o.subtreeFlags&&null!==a?(a.return=o,Zl=a):Au(e)}}function Au(e){for(;null!==Zl;){var t=Zl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Kl||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Va(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Va(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(a(163))}Kl||512&t.flags&&ou(t)}catch(e){ks(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function Cu(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function wu(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){ks(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){ks(t,o,e)}}var a=t.return;try{ou(t)}catch(e){ks(t,a,e)}break;case 5:var i=t.return;try{ou(t)}catch(e){ks(t,i,e)}}}catch(e){ks(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var xu,ku=Math.ceil,Eu=A.ReactCurrentDispatcher,Su=A.ReactCurrentOwner,Bu=A.ReactCurrentBatchConfig,Pu=0,Ou=null,_u=null,Tu=0,Lu=0,Ru=Eo(0),Nu=0,Iu=null,zu=0,ju=0,$u=0,Mu=null,Fu=null,Du=0,Uu=1/0,Wu=null,Vu=!1,Hu=null,Yu=null,Gu=!1,Qu=null,qu=0,Ku=0,Xu=null,Zu=-1,Ju=0;function es(){return 6&Pu?Xe():-1!==Zu?Zu:Zu=Xe()}function ts(e){return 1&e.mode?2&Pu&&0!==Tu?Tu&-Tu:null!==ga.transition?(0===Ju&&(Ju=mt()),Ju):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type):1}function ns(e,t,n,r){if(50<Ku)throw Ku=0,Xu=null,Error(a(185));yt(e,n,r),2&Pu&&e===Ou||(e===Ou&&(!(2&Pu)&&(ju|=n),4===Nu&&ls(e,Tu)),rs(e,r),1===n&&0===Pu&&!(1&t.mode)&&(Uu=Xe()+500,Fo&&Wo()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?l&n&&!(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Ou?Tu:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fo=!0,Uo(e)}(us.bind(null,e)):Uo(us.bind(null,e)),io((function(){!(6&Pu)&&Wo()})),n=null;else{switch(At(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Os(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Zu=-1,Ju=0,6&Pu)throw Error(a(327));var n=e.callbackNode;if(ws()&&e.callbackNode!==n)return null;var r=dt(e,e===Ou?Tu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=gs(e,r);else{t=r;var o=Pu;Pu|=2;var i=hs();for(Ou===e&&Tu===t||(Wu=null,Uu=Xe()+500,ds(e,t));;)try{vs();break}catch(t){ps(e,t)}Ba(),Eu.current=i,Pu=o,null!==_u?t=0:(Ou=null,Tu=0,t=Nu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=as(e,o)),1===t)throw n=Iu,ds(e,0),ls(e,r),rs(e,Xe()),n;if(6===t)ls(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=gs(e,r),2===t&&(i=ht(e),0!==i&&(r=i,t=as(e,i))),1!==t)))throw n=Iu,ds(e,0),ls(e,r),rs(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Cs(e,Fu,Wu);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=Du+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Cs.bind(null,e,Fu,Wu),t);break}Cs(e,Fu,Wu);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ro(Cs.bind(null,e,Fu,Wu),r);break}Cs(e,Fu,Wu);break;default:throw Error(a(329))}}}return rs(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function as(e,t){var n=Mu;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=gs(e,t))&&(t=Fu,Fu=n,null!==t&&is(t)),e}function is(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function ls(e,t){for(t&=~$u,t&=~ju,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(6&Pu)throw Error(a(327));ws();var t=dt(e,0);if(!(1&t))return rs(e,Xe()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Iu,ds(e,0),ls(e,t),rs(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cs(e,Fu,Wu),rs(e,Xe()),null}function ss(e,t){var n=Pu;Pu|=1;try{return e(t)}finally{0===(Pu=n)&&(Uu=Xe()+500,Fo&&Wo())}}function cs(e){null!==Qu&&0===Qu.tag&&!(6&Pu)&&ws();var t=Pu;Pu|=1;var n=Bu.transition,r=bt;try{if(Bu.transition=null,bt=1,e)return e()}finally{bt=r,Bu.transition=n,!(6&(Pu=t))&&Wo()}}function fs(){Lu=Ru.current,So(Ru)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==_u)for(n=_u.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&No();break;case 3:Xa(),So(_o),So(Oo),ri();break;case 5:Ja(r);break;case 4:Xa();break;case 13:case 19:So(ei);break;case 10:Pa(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Ou=e,_u=e=Rs(e.current,null),Tu=Lu=t,Nu=0,Iu=null,$u=ju=zu=0,Fu=Mu=null,null!==La){for(t=0;t<La.length;t++)if(null!==(r=(n=La[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}La=null}return e}function ps(e,t){for(;;){var n=_u;try{if(Ba(),oi.current=Zi,ci){for(var r=li.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ci=!1}if(ii=0,si=ui=li=null,fi=!1,di=0,Su.current=null,null===n||null===n.return){Nu=1,Iu=t,_u=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Tu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=gl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&ml(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(!(1&t)){ml(i,c,t),ms();break e}s=Error(a(426))}else if(aa&&1&u.mode){var y=gl(l);if(null!==y){!(65536&y.flags)&&(y.flags|=256),yl(y,l,u,0,t),ma(sl(s,u));break e}}i=s=sl(s,u),4!==Nu&&(Nu=2),null===Mu?Mu=[i]:Mu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ua(i,pl(0,s,t));break e;case 1:u=s;var v=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof v.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Yu&&Yu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ua(i,hl(i,u,t));break e}}i=i.return}while(null!==i)}As(n)}catch(e){t=e,_u===n&&null!==n&&(_u=n=n.return);continue}break}}function hs(){var e=Eu.current;return Eu.current=Zi,null===e?Zi:e}function ms(){0!==Nu&&3!==Nu&&2!==Nu||(Nu=4),null===Ou||!(268435455&zu)&&!(268435455&ju)||ls(Ou,Tu)}function gs(e,t){var n=Pu;Pu|=2;var r=hs();for(Ou===e&&Tu===t||(Wu=null,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}if(Ba(),Pu=n,Eu.current=r,null!==_u)throw Error(a(261));return Ou=null,Tu=0,Nu}function ys(){for(;null!==_u;)bs(_u)}function vs(){for(;null!==_u&&!qe();)bs(_u)}function bs(e){var t=xu(e.alternate,e,Lu);e.memoizedProps=e.pendingProps,null===t?As(e):_u=t,Su.current=null}function As(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ql(n,t)))return n.flags&=32767,void(_u=n);if(null===e)return Nu=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Gl(n,t,Lu)))return void(_u=n);if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===Nu&&(Nu=5)}function Cs(e,t,n){var r=bt,o=Bu.transition;try{Bu.transition=null,bt=1,function(e,t,n,r){do{ws()}while(null!==Qu);if(6&Pu)throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Ou&&(_u=Ou=null,Tu=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Gu||(Gu=!0,Os(tt,(function(){return ws(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Bu.transition,Bu.transition=null;var l=bt;bt=1;var u=Pu;Pu|=4,Su.current=null,function(e,t){if(eo=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=l),p===i&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:nl(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(a(163))}}catch(e){ks(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=tu,tu=!1}(e,n),gu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,vu(n,e,o),Ke(),Pu=u,bt=l,Bu.transition=i}else e.current=n;if(Gu&&(Gu=!1,Qu=e,qu=o),0===(i=e.pendingLanes)&&(Yu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Vu)throw Vu=!1,e=Hu,Hu=null,e;!!(1&qu)&&0!==e.tag&&ws(),1&(i=e.pendingLanes)?e===Xu?Ku++:(Ku=0,Xu=e):Ku=0,Wo()}(e,t,n,r)}finally{Bu.transition=o,bt=r}return null}function ws(){if(null!==Qu){var e=At(qu),t=Bu.transition,n=bt;try{if(Bu.transition=null,bt=16>e?16:e,null===Qu)var r=!1;else{if(e=Qu,Qu=null,qu=0,6&Pu)throw Error(a(331));var o=Pu;for(Pu|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(16&Zl.flags){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Zl=c;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:nu(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(au(f),f===c){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Zl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(2048&(i=Zl).flags)switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Zl=v;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var A=(l=Zl).child;if(2064&l.subtreeFlags&&null!==A)A.return=l,Zl=A;else e:for(l=b;null!==Zl;){if(2048&(u=Zl).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){ks(u,u.return,e)}if(u===l){Zl=null;break e}var C=u.sibling;if(null!==C){C.return=u.return,Zl=C;break e}Zl=u.return}}if(Pu=o,Wo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Bu.transition=t}}return!1}function xs(e,t,n){e=Fa(e,t=pl(0,t=sl(n,t),1),1),t=es(),null!==e&&(yt(e,1,t),rs(e,t))}function ks(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){t=Fa(t,e=hl(t,e=sl(n,e),1),1),e=es(),null!==t&&(yt(t,1,e),rs(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Ou===e&&(Tu&n)===n&&(4===Nu||3===Nu&&(130023424&Tu)===Tu&&500>Xe()-Du?ds(e,0):$u|=n),rs(e,t)}function Ss(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Ia(e,t))&&(yt(e,t,n),rs(e,n))}function Bs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ss(e,n)}function Ps(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Ss(e,n)}function Os(e,t){return Ge(e,t)}function _s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,t,n,r){return new _s(e,t,n,r)}function Ls(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rs(e,t){var n=e.alternate;return null===n?((n=Ts(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ns(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ls(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Is(n.children,o,i,t);case k:l=8,o|=8;break;case E:return(e=Ts(12,n,t,2|o)).elementType=E,e.lanes=i,e;case O:return(e=Ts(13,n,t,o)).elementType=O,e.lanes=i,e;case _:return(e=Ts(19,n,t,o)).elementType=_,e.lanes=i,e;case R:return zs(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case B:l=9;break e;case P:l=11;break e;case T:l=14;break e;case L:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ts(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Is(e,t,n,r){return(e=Ts(7,e,r,t)).lanes=n,e}function zs(e,t,n,r){return(e=Ts(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function js(e,t,n){return(e=Ts(6,e,null,t)).lanes=n,e}function $s(e,t,n){return(t=Ts(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ms(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fs(e,t,n,r,o,a,i,l,u){return e=new Ms(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ts(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},ja(a),e}function Ds(e){if(!e)return Po;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ro(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Ro(n))return zo(e,n,t)}return t}function Us(e,t,n,r,o,a,i,l,u){return(e=Fs(n,r,!0,e,0,a,0,l,u)).context=Ds(null),n=e.current,(a=Ma(r=es(),o=ts(n))).callback=null!=t?t:null,Fa(n,a,o),e.current.lanes=o,yt(e,o,r),rs(e,r),e}function Ws(e,t,n,r){var o=t.current,a=es(),i=ts(o);return n=Ds(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ma(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Fa(o,t,i))&&(ns(e,o,i,a),Da(e,o,i)),i}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ys(e,t){Hs(e,t),(e=e.alternate)&&Hs(e,t)}xu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||_o.current)bl=!0;else{if(!(e.lanes&n||128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),ha();break;case 5:Za(t);break;case 1:Ro(t.type)&&jo(t);break;case 4:Ka(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Bo(xa,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Bo(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?jl(e,t,n):(Bo(ei,1&ei.current),null!==(e=Vl(e,t,n))?e.sibling:null);Bo(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Ul(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Bo(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Vl(e,t,n)}(e,t,n);bl=!!(131072&e.flags)}else bl=!1,aa&&1048576&t.flags&&ea(t,Go,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Wl(e,t),e=t.pendingProps;var o=Lo(t,Oo.current);_a(t,n),o=gi(null,t,r,e,o,n);var i=yi();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ro(r)?(i=!0,jo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ja(t),o.updater=ol,t.stateNode=o,o._reactInternals=t,ul(t,r,e,n),t=Pl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),Al(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Wl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ls(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===T)return 14}return 2}(r),e=nl(r,e),o){case 0:t=Sl(null,t,r,e,n);break e;case 1:t=Bl(null,t,r,e,n);break e;case 11:t=Cl(null,t,r,e,n);break e;case 14:t=wl(null,t,r,nl(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Sl(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bl(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 3:e:{if(Ol(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,$a(e,t),Wa(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_l(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=_l(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=so(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=wa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Vl(e,t,n);break e}Al(e,t,r,n)}t=t.child}return t;case 5:return Za(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),El(e,t),Al(e,t,l,n),t.child;case 6:return null===e&&ca(t),null;case 13:return jl(e,t,n);case 4:return Ka(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ca(t,null,r,n):Al(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 7:return Al(e,t,t.pendingProps,n),t.child;case 8:case 12:return Al(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Bo(xa,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!_o.current){t=Vl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Ma(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Oa(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Oa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Al(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,_a(t,n),r=r(o=Ta(o)),t.flags|=1,Al(e,t,r,n),t.child;case 14:return o=nl(r=t.type,t.pendingProps),wl(e,t,r,o=nl(r.type,o),n);case 15:return xl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:nl(r,o),Wl(e,t),t.tag=1,Ro(r)?(e=!0,jo(t)):e=!1,_a(t,n),il(t,r,o),ul(t,r,o,n),Pl(null,t,r,!0,e,n);case 19:return Ul(e,t,n);case 22:return kl(e,t,n)}throw Error(a(156,t.tag))};var Gs="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function qs(e){this._internalRoot=e}function Ks(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function Js(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Vs(i);l.call(e)}}Ws(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Vs(i);a.call(e)}}var i=Us(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=i,e[mo]=i.current,Ur(8===e.nodeType?e.parentNode:e),cs(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Vs(u);l.call(e)}}var u=Fs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[mo]=u.current,Ur(8===e.nodeType?e.parentNode:e),cs((function(){Ws(t,u,n,r)})),u}(n,t,e,o,r);return Vs(i)}qs.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Ws(e,t,null,null)},qs.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Ws(null,e,null,null)})),t[mo]=null}},qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&jt(e)}},Ct=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(vt(t,1|n),rs(t,Xe()),!(6&Pu)&&(Uu=Xe()+500,Wo()))}break;case 13:cs((function(){var t=Ia(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Ys(e,1)}},wt=function(e){if(13===e.tag){var t=Ia(e,134217728);null!==t&&ns(t,e,134217728,es()),Ys(e,134217728)}},xt=function(e){if(13===e.tag){var t=ts(e),n=Ia(e,t);null!==n&&ns(n,e,t,es()),Ys(e,t)}},kt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},we=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=wo(r);if(!o)throw Error(a(90));G(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=ss,Oe=cs;var ec={usingClientEntryPoint:!1,Events:[Ao,Co,wo,Se,Be,ss]},tc={findFiberByHostInstance:bo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{ot=rc.inject(nc),at=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ks(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ks(e))throw Error(a(299));var n=!1,r="",o=Gs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fs(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(a(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ks(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Gs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Us(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Ur(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new qs(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(a(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(a(40));return!!e._reactRootContainer&&(cs((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Js(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,n)=>{var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},799:(e,t)=>{Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},363:(e,t,n)=>{n(799)},69:(e,t)=>{Object.prototype.toString},20:(e,t,n)=>{var r=n(159),o=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:u,_owner:i.current}}t.jsx=u,t.jsxs=u},287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var A=b.prototype=new v;A.constructor=b,m(A,y.prototype),A.isPureReactComponent=!0;var C=Array.isArray,w=Object.prototype.hasOwnProperty,x={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,o)&&!k.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var B=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+P(u,0):a,C(i)?(o="",null!=e&&(o=e.replace(B,"$&/")+"/"),O(i,t,o,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(B,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",C(e))for(var s=0;s<e.length;s++){var c=a+P(l=e[s],s);u+=O(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=O(l=l.value,t,o,c=a+P(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function _(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},R={transition:null},N={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:R,ReactCurrentOwner:x};function I(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.act=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)w.call(t,s)&&!k.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=I,t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.3.1"},159:(e,t,n)=>{e.exports=n(287)},848:(e,t,n)=>{e.exports=n(20)},463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>a(u,n))s<o&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function C(e){if(g=!1,A(e),!m)if(null!==r(s))m=!0,R(w);else{var t=r(c);null!==t&&N(C,t.startTime-e)}}function w(e,n){m=!1,g&&(g=!1,v(S),S=-1),h=!0;var a=p;try{for(A(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!O());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&o(s),A(n)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&N(C,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,k=!1,E=null,S=-1,B=5,P=-1;function O(){return!(t.unstable_now()-P<B)}function _(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?x():(k=!1,E=null)}}else k=!1}if("function"==typeof b)x=function(){b(_)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,L=T.port2;T.port1.onmessage=_,x=function(){L.postMessage(null)}}else x=function(){y(_,0)};function R(e){E=e,k||(k=!0,x())}function N(e,n){S=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(g?(v(S),S=-1):g=!0,N(C,a-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,R(w))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{e.exports=n(463)},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var u=r(e,o),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=u}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},63:(e,t,n)=>{var r=n(159),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useState,i=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=a({inst:{value:n,getSnapshot:t}}),o=r[0].inst,c=r[1];return l((function(){o.value=n,o.getSnapshot=t,s(o)&&c({inst:o})}),[e,n,t]),i((function(){return s(o)&&c({inst:o}),e((function(){s(o)&&c({inst:o})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},940:(e,t,n)=>{var r=n(159),o=n(888),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=o.useSyncExternalStore,l=r.useRef,u=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s((function(){function e(e){if(!u){if(u=!0,i=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return l=t}return l=e}if(t=l,a(i,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(i=e,l=n)}var i,l,u=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,o]);var p=i(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),c(p),p}},888:(e,t,n)=>{e.exports=n(63)},242:(e,t,n)=>{e.exports=n(940)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var a=o(72),i=o.n(a),l=o(825),u=o.n(l),s=o(659),c=o.n(s),f=o(56),d=o.n(f),p=o(540),h=o.n(p),m=o(113),g=o.n(m),y=o(249),v={};v.styleTagTransform=g(),v.setAttributes=d(),v.insert=c().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=h(),i()(y.A,v),y.A&&y.A.locals&&y.A.locals;var b=o(159),A=o.t(b,2),C=o(338),w=o(888),x=o(242),k=o(961);let E=function(e){e()};const S=()=>E,B=Symbol.for(`react-redux-context-${b.version}`),P=globalThis,O=new Proxy({},new Proxy({},{get(e,t){const n=function(){let e=P[B];return e||(e=(0,b.createContext)(null),P[B]=e),e}();return(e,...r)=>Reflect[t](n,...r)}}));function _(e=O){return function(){return(0,b.useContext)(e)}}const T=_();let L=()=>{throw new Error("uSES not initialized!")};const R=(e,t)=>e===t;function N(e=O){const t=e===O?T:_(e);return function(e,n={}){const{equalityFn:r=R,stabilityCheck:o,noopCheck:a}="function"==typeof n?{equalityFn:n}:n,{store:i,subscription:l,getServerState:u,stabilityCheck:s,noopCheck:c}=t(),f=((0,b.useRef)(!0),(0,b.useCallback)({[e.name]:t=>e(t)}[e.name],[e,s,o])),d=L(l.addNestedSub,i.getState,u||i.getState,f,r);return(0,b.useDebugValue)(d),d}}const I=N();o(146),o(363);const z={notify(){},get:()=>[]};const j="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?b.useLayoutEffect:b.useEffect;let $=null;const M=function({store:e,context:t,children:n,serverState:r,stabilityCheck:o="once",noopCheck:a="once"}){const i=(0,b.useMemo)((()=>{const t=function(e,t){let n,r=z;function o(){i.onStateChange&&i.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=S();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const i={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=z)},getListeners:()=>r};return i}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0,stabilityCheck:o,noopCheck:a}}),[e,r,o,a]),l=(0,b.useMemo)((()=>e.getState()),[e]);j((()=>{const{subscription:t}=i;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),l!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[i,l]);const u=t||O;return b.createElement(u.Provider,{value:i},n)};function F(e=O){const t=e===O?T:_(e);return function(){const{store:e}=t();return e}}const D=F();function U(e=O){const t=e===O?D:F(e);return function(){return t().dispatch}}const W=U();var V,H;V=x.useSyncExternalStoreWithSelector,L=V,(e=>{$=e})(w.useSyncExternalStore),H=k.unstable_batchedUpdates,E=H,o(69);var Y="popstate";function G(e={}){return function(e,t,n,r={}){let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l="POP",u=null,s=c();function c(){return(i.state||{idx:null}).idx}function f(){l="POP";let e=c(),t=null==e?null:e-s;s=e,u&&u({action:l,location:p.location,delta:t})}function d(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:Z(e);return n=n.replace(/ $/,"%20"),Q(t,`No window.location.(origin|href) available to create URL for href: ${n}`),new URL(n,t)}null==s&&(s=0,i.replaceState({...i.state,idx:s},""));let p={get action(){return l},get location(){return e(o,i)},listen(e){if(u)throw new Error("A history only accepts one active listener");return o.addEventListener(Y,f),u=e,()=>{o.removeEventListener(Y,f),u=null}},createHref:e=>t(o,e),createURL:d,encodeLocation(e){let t=d(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l="PUSH";let r=X(p.location,e,t);n&&n(r,e),s=c()+1;let f=K(r,s),d=p.createHref(r);try{i.pushState(f,"",d)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(d)}a&&u&&u({action:l,location:p.location,delta:1})},replace:function(e,t){l="REPLACE";let r=X(p.location,e,t);n&&n(r,e),s=c();let o=K(r,s),f=p.createHref(r);i.replaceState(o,"",f),a&&u&&u({action:l,location:p.location,delta:0})},go:e=>i.go(e)};return p}((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return X("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:Z(t)}),null,e)}function Q(e,t){if(!1===e||null==e)throw new Error(t)}function q(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function K(e,t){return{usr:e.state,key:e.key,idx:t}}function X(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?J(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function Z({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function J(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}function ee(e,t,n="/"){return function(e,t,n,r){let o=he(("string"==typeof t?J(t):t).pathname||"/",n);if(null==o)return null;let a=te(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e){let t=pe(o);i=fe(a[e],t,r)}return i}(e,t,n,!1)}function te(e,t=[],n=[],r=""){let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(Q(i.relativePath.startsWith(r),`Absolute route path "${i.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),i.relativePath=i.relativePath.slice(r.length));let l=ve([r,i.relativePath]),u=n.concat(i);e.children&&e.children.length>0&&(Q(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${l}".`),te(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:ce(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of ne(e.path))o(e,t,n);else o(e,t)})),t}function ne(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=ne(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}var re=/^:[\w-]+$/,oe=3,ae=2,ie=1,le=10,ue=-2,se=e=>"*"===e;function ce(e,t){let n=e.split("/"),r=n.length;return n.some(se)&&(r+=ue),t&&(r+=ae),n.filter((e=>!se(e))).reduce(((e,t)=>e+(re.test(t)?oe:""===t?ie:le)),r)}function fe(e,t,n=!1){let{routesMeta:r}=e,o={},a="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],u=e===r.length-1,s="/"===a?t:t.slice(a.length)||"/",c=de({path:l.relativePath,caseSensitive:l.caseSensitive,end:u},s),f=l.route;if(!c&&u&&n&&!r[r.length-1].route.index&&(c=de({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},s)),!c)return null;Object.assign(o,c.params),i.push({params:o,pathname:ve([a,c.pathname]),pathnameBase:be(ve([a,c.pathnameBase])),route:f}),"/"!==c.pathnameBase&&(a=ve([a,c.pathnameBase]))}return i}function de(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){q("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=l[r]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[t]=n&&!o?void 0:(o||"").replace(/%2F/g,"/"),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function pe(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return q(!1,`The URL path "${e}" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function he(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function me(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function ge(e){let t=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase))}function ye(e,t,n,r=!1){let o;"string"==typeof e?o=J(e):(o={...e},Q(!o.pathname||!o.pathname.includes("?"),me("?","pathname","search",o)),Q(!o.pathname||!o.pathname.includes("#"),me("#","pathname","hash",o)),Q(!o.search||!o.search.includes("#"),me("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let u=function(e,t="/"){let{pathname:n,search:r="",hash:o=""}="string"==typeof e?J(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:Ae(r),hash:Ce(o)}}(o,a),s=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return u.pathname.endsWith("/")||!s&&!c||(u.pathname+="/"),u}var ve=e=>e.join("/").replace(/\/\/+/g,"/"),be=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),Ae=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Ce=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function we(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var xe=["POST","PUT","PATCH","DELETE"],ke=(new Set(xe),["GET",...xe]);new Set(ke),Symbol("ResetLoaderData");var Ee=b.createContext(null);Ee.displayName="DataRouter";var Se=b.createContext(null);Se.displayName="DataRouterState";var Be=b.createContext({isTransitioning:!1});Be.displayName="ViewTransition",b.createContext(new Map).displayName="Fetchers",b.createContext(null).displayName="Await";var Pe=b.createContext(null);Pe.displayName="Navigation";var Oe=b.createContext(null);Oe.displayName="Location";var _e=b.createContext({outlet:null,matches:[],isDataRoute:!1});_e.displayName="Route";var Te=b.createContext(null);function Le(){return null!=b.useContext(Oe)}function Re(){return Q(Le(),"useLocation() may be used only in the context of a <Router> component."),b.useContext(Oe).location}Te.displayName="RouteError";var Ne="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function Ie(e){b.useContext(Pe).static||b.useLayoutEffect(e)}function ze(){let{isDataRoute:e}=b.useContext(_e);return e?function(){let{router:e}=function(e){let t=b.useContext(Ee);return Q(t,We(e)),t}("useNavigate"),t=Ve("useNavigate"),n=b.useRef(!1);Ie((()=>{n.current=!0}));let r=b.useCallback((async(r,o={})=>{q(n.current,Ne),n.current&&("number"==typeof r?e.navigate(r):await e.navigate(r,{fromRouteId:t,...o}))}),[e,t]);return r}():function(){Q(Le(),"useNavigate() may be used only in the context of a <Router> component.");let e=b.useContext(Ee),{basename:t,navigator:n}=b.useContext(Pe),{matches:r}=b.useContext(_e),{pathname:o}=Re(),a=JSON.stringify(ge(r)),i=b.useRef(!1);Ie((()=>{i.current=!0}));let l=b.useCallback(((r,l={})=>{if(q(i.current,Ne),!i.current)return;if("number"==typeof r)return void n.go(r);let u=ye(r,JSON.parse(a),o,"path"===l.relative);null==e&&"/"!==t&&(u.pathname="/"===u.pathname?t:ve([t,u.pathname])),(l.replace?n.replace:n.push)(u,l.state,l)}),[t,n,a,o,e]);return l}()}function je(e,{relative:t}={}){let{matches:n}=b.useContext(_e),{pathname:r}=Re(),o=JSON.stringify(ge(n));return b.useMemo((()=>ye(e,JSON.parse(o),r,"path"===t)),[e,o,r,t])}function $e(e,t,n,r){Q(Le(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:o}=b.useContext(Pe),{matches:a}=b.useContext(_e),i=a[a.length-1],l=i?i.params:{},u=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let s,c=Re();if(t){let e="string"==typeof t?J(t):t;Q("/"===u||e.pathname?.startsWith(u),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${u}" but pathname "${e.pathname}" was given in the \`location\` prop.`),s=e}else s=c;let f=s.pathname||"/",d=f;if("/"!==u){let e=u.replace(/^\//,"").split("/");d="/"+f.replace(/^\//,"").split("/").slice(e.length).join("/")}let p=ee(e,{pathname:d}),h=function(e,t=[],n=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let r=e,o=n?.errors;if(null!=o){let e=r.findIndex((e=>e.route.id&&void 0!==o?.[e.route.id]));Q(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(o).join(",")}`),r=r.slice(0,Math.min(r.length,e+1))}let a=!1,i=-1;if(n)for(let e=0;e<r.length;e++){let t=r[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(i=e),t.route.id){let{loaderData:e,errors:o}=n,l=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!o||void 0===o[t.route.id]);if(t.route.lazy||l){a=!0,r=i>=0?r.slice(0,i+1):[r[0]];break}}}return r.reduceRight(((e,l,u)=>{let s,c=!1,f=null,d=null;var p,h;n&&(s=o&&l.route.id?o[l.route.id]:void 0,f=l.route.errorElement||Fe,a&&(i<0&&0===u?(p="route-fallback",h="No `HydrateFallback` element provided to render during initial hydration",!1||He[p]||(He[p]=!0,q(!1,h)),c=!0,d=null):i===u&&(c=!0,d=l.route.hydrateFallbackElement||null)));let m=t.concat(r.slice(0,u+1)),g=()=>{let t;return t=s?f:c?d:l.route.Component?b.createElement(l.route.Component,null):l.route.element?l.route.element:e,b.createElement(Ue,{match:l,routeContext:{outlet:e,matches:m,isDataRoute:null!=n},children:t})};return n&&(l.route.ErrorBoundary||l.route.errorElement||0===u)?b.createElement(De,{location:n.location,revalidation:n.revalidation,component:f,error:s,children:g(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):g()}),null)}(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:ve([u,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:ve([u,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,n,r);return t&&h?b.createElement(Oe.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...s},navigationType:"POP"}},h):h}function Me(){let e=function(){let e=b.useContext(Te),t=function(e){let t=b.useContext(Se);return Q(t,We(e)),t}("useRouteError"),n=Ve("useRouteError");return void 0!==e?e:t.errors?.[n]}(),t=we(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return b.createElement(b.Fragment,null,b.createElement("h2",null,"Unexpected Application Error!"),b.createElement("h3",{style:{fontStyle:"italic"}},t),n?b.createElement("pre",{style:r},n):null,null)}b.createContext(null);var Fe=b.createElement(Me,null),De=class extends b.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?b.createElement(_e.Provider,{value:this.props.routeContext},b.createElement(Te.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function Ue({routeContext:e,match:t,children:n}){let r=b.useContext(Ee);return r&&r.static&&r.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=t.route.id),b.createElement(_e.Provider,{value:e},n)}function We(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function Ve(e){let t=function(e){let t=b.useContext(_e);return Q(t,We(e)),t}(e),n=t.matches[t.matches.length-1];return Q(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}var He={};function Ye(e){Q(!1,"A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.")}function Ge({basename:e="/",children:t=null,location:n,navigationType:r="POP",navigator:o,static:a=!1}){Q(!Le(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let i=e.replace(/^\/*/,"/"),l=b.useMemo((()=>({basename:i,navigator:o,static:a,future:{}})),[i,o,a]);"string"==typeof n&&(n=J(n));let{pathname:u="/",search:s="",hash:c="",state:f=null,key:d="default"}=n,p=b.useMemo((()=>{let e=he(u,i);return null==e?null:{location:{pathname:e,search:s,hash:c,state:f,key:d},navigationType:r}}),[i,u,s,c,f,d,r]);return q(null!=p,`<Router basename="${i}"> is not able to match the URL "${u}${s}${c}" because it does not start with the basename, so the <Router> won't render anything.`),null==p?null:b.createElement(Pe.Provider,{value:l},b.createElement(Oe.Provider,{children:t,value:p}))}function Qe({children:e,location:t}){return $e(qe(e),t)}function qe(e,t=[]){let n=[];return b.Children.forEach(e,((e,r)=>{if(!b.isValidElement(e))return;let o=[...t,r];if(e.type===b.Fragment)return void n.push.apply(n,qe(e.props.children,o));Q(e.type===Ye,`[${"string"==typeof e.type?e.type:e.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`),Q(!e.props.index||!e.props.children,"An index route cannot have child routes.");let a={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,hydrateFallbackElement:e.props.hydrateFallbackElement,HydrateFallback:e.props.HydrateFallback,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:!0===e.props.hasErrorBoundary||null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(a.children=qe(e.props.children,o)),n.push(a)})),n}b.memo((function({routes:e,future:t,state:n}){return $e(e,void 0,n,t)})),b.Component;var Ke="get",Xe="application/x-www-form-urlencoded";function Ze(e){return null!=e&&"string"==typeof e.tagName}var Je=null,et=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function tt(e){return null==e||et.has(e)?e:(q(!1,`"${e}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${Xe}"`),null)}function nt(e,t){if(!1===e||null==e)throw new Error(t)}function rt(e){return null!=e&&(null==e.href?"preload"===e.rel&&"string"==typeof e.imageSrcSet&&"string"==typeof e.imageSizes:"string"==typeof e.rel&&"string"==typeof e.href)}function ot(e,t,n,r,o,a){let i=(e,t)=>!n[t]||e.route.id!==n[t].route.id,l=(e,t)=>n[t].pathname!==e.pathname||n[t].route.path?.endsWith("*")&&n[t].params["*"]!==e.params["*"];return"assets"===a?t.filter(((e,t)=>i(e,t)||l(e,t))):"data"===a?t.filter(((t,a)=>{let u=r.routes[t.route.id];if(!u||!u.hasLoader)return!1;if(i(t,a)||l(t,a))return!0;if(t.route.shouldRevalidate){let r=t.route.shouldRevalidate({currentUrl:new URL(o.pathname+o.search+o.hash,window.origin),currentParams:n[0]?.params||{},nextUrl:new URL(e,window.origin),nextParams:t.params,defaultShouldRevalidate:!0});if("boolean"==typeof r)return r}return!0})):[]}function at(){let e=b.useContext(Ee);return nt(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}function it(){let e=b.useContext(Se);return nt(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}Symbol("SingleFetchRedirect"),b.Component;var lt=b.createContext(void 0);function ut(){let e=b.useContext(lt);return nt(e,"You must render this element inside a <HydratedRouter> element"),e}function st(e,t){return n=>{e&&e(n),n.defaultPrevented||t(n)}}function ct({page:e,...t}){let{router:n}=at(),r=b.useMemo((()=>ee(n.routes,e,n.basename)),[n.routes,e,n.basename]);return r?b.createElement(dt,{page:e,matches:r,...t}):(console.warn(`Tried to prefetch ${e} but no routes matched.`),null)}function ft(e){let{manifest:t,routeModules:n}=ut(),[r,o]=b.useState([]);return b.useEffect((()=>{let r=!1;return async function(e,t,n){return function(e,t){let n=new Set,r=new Set(t);return e.reduce(((e,o)=>{if(t&&(null==(a=o)||"string"!=typeof a.page)&&"script"===o.as&&o.href&&r.has(o.href))return e;var a;let i=JSON.stringify(function(e){let t={},n=Object.keys(e).sort();for(let r of n)t[r]=e[r];return t}(o));return n.has(i)||(n.add(i),e.push({key:i,link:o})),e}),[])}((await Promise.all(e.map((async e=>{let r=t.routes[e.route.id];if(r){let e=await async function(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise((()=>{}))}}(r,n);return e.links?e.links():[]}return[]})))).flat(1).filter(rt).filter((e=>"stylesheet"===e.rel||"preload"===e.rel)).map((e=>"stylesheet"===e.rel?{...e,rel:"prefetch",as:"style"}:{...e,rel:"prefetch"})))}(e,t,n).then((e=>{r||o(e)})),()=>{r=!0}}),[e,t,n]),r}function dt({page:e,matches:t,...n}){let r=Re(),{manifest:o,routeModules:a}=ut(),{loaderData:i,matches:l}=it(),u=b.useMemo((()=>ot(e,t,l,o,r,"data")),[e,t,l,o,r]),s=b.useMemo((()=>ot(e,t,l,o,r,"assets")),[e,t,l,o,r]),c=b.useMemo((()=>{if(e===r.pathname+r.search+r.hash)return[];let n=new Set,l=!1;if(t.forEach((e=>{let t=o.routes[e.route.id];t&&t.hasLoader&&(!u.some((t=>t.route.id===e.route.id))&&e.route.id in i&&a[e.route.id]?.shouldRevalidate||t.hasClientLoader?l=!0:n.add(e.route.id))})),0===n.size)return[];let s=function(e){let t="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===t.pathname?t.pathname="_root.data":t.pathname=`${t.pathname.replace(/\/$/,"")}.data`,t}(e);return l&&n.size>0&&s.searchParams.set("_routes",t.filter((e=>n.has(e.route.id))).map((e=>e.route.id)).join(",")),[s.pathname+s.search]}),[i,r,o,u,t,e,a]),f=b.useMemo((()=>function(e,t){return n=e.map((e=>{let n=t.routes[e.route.id];if(!n)return[];let r=[n.module];return n.imports&&(r=r.concat(n.imports)),r})).flat(1),[...new Set(n)];var n}(s,o)),[s,o]),d=ft(s);return b.createElement(b.Fragment,null,c.map((e=>b.createElement("link",{key:e,rel:"prefetch",as:"fetch",href:e,...n}))),f.map((e=>b.createElement("link",{key:e,rel:"modulepreload",href:e,...n}))),d.map((({key:e,link:t})=>b.createElement("link",{key:e,...t}))))}lt.displayName="FrameworkContext";function pt(...e){return t=>{e.forEach((e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)}))}}var ht="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;try{ht&&(window.__reactRouterVersion="7.0.1")}catch(e){}function mt({basename:e,children:t,window:n}){let r=b.useRef();null==r.current&&(r.current=G({window:n,v5Compat:!0}));let o=r.current,[a,i]=b.useState({action:o.action,location:o.location}),l=b.useCallback((e=>{b.startTransition((()=>i(e)))}),[i]);return b.useLayoutEffect((()=>o.listen(l)),[o,l]),b.createElement(Ge,{basename:e,children:t,location:a.location,navigationType:a.action,navigator:o})}var gt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,yt=b.forwardRef((function({onClick:e,discover:t="render",prefetch:n="none",relative:r,reloadDocument:o,replace:a,state:i,target:l,to:u,preventScrollReset:s,viewTransition:c,...f},d){let p,{basename:h}=b.useContext(Pe),m="string"==typeof u&&gt.test(u),g=!1;if("string"==typeof u&&m&&(p=u,ht))try{let e=new URL(window.location.href),t=u.startsWith("//")?new URL(e.protocol+u):new URL(u),n=he(t.pathname,h);t.origin===e.origin&&null!=n?u=n+t.search+t.hash:g=!0}catch(e){q(!1,`<Link to="${u}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let y=function(e,{relative:t}={}){Q(Le(),"useHref() may be used only in the context of a <Router> component.");let{basename:n,navigator:r}=b.useContext(Pe),{hash:o,pathname:a,search:i}=je(e,{relative:t}),l=a;return"/"!==n&&(l="/"===a?n:ve([n,a])),r.createHref({pathname:l,search:i,hash:o})}(u,{relative:r}),[v,A,C]=function(e,t){let n=b.useContext(lt),[r,o]=b.useState(!1),[a,i]=b.useState(!1),{onFocus:l,onBlur:u,onMouseEnter:s,onMouseLeave:c,onTouchStart:f}=t,d=b.useRef(null);b.useEffect((()=>{if("render"===e&&i(!0),"viewport"===e){let e=new IntersectionObserver((e=>{e.forEach((e=>{i(e.isIntersecting)}))}),{threshold:.5});return d.current&&e.observe(d.current),()=>{e.disconnect()}}}),[e]),b.useEffect((()=>{if(r){let e=setTimeout((()=>{i(!0)}),100);return()=>{clearTimeout(e)}}}),[r]);let p=()=>{o(!0)},h=()=>{o(!1),i(!1)};return n?"intent"!==e?[a,d,{}]:[a,d,{onFocus:st(l,p),onBlur:st(u,h),onMouseEnter:st(s,p),onMouseLeave:st(c,h),onTouchStart:st(f,p)}]:[!1,d,{}]}(n,f),w=function(e,{target:t,replace:n,state:r,preventScrollReset:o,relative:a,viewTransition:i}={}){let l=ze(),u=Re(),s=je(e,{relative:a});return b.useCallback((c=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(c,t)){c.preventDefault();let t=void 0!==n?n:Z(u)===Z(s);l(e,{replace:t,state:r,preventScrollReset:o,relative:a,viewTransition:i})}}),[u,l,s,n,r,t,e,o,a,i])}(u,{replace:a,state:i,target:l,preventScrollReset:s,relative:r,viewTransition:c}),x=b.createElement("a",{...f,...C,href:p||y,onClick:g||o?e:function(t){e&&e(t),t.defaultPrevented||w(t)},ref:pt(d,A),target:l,"data-discover":m||"render"!==t?void 0:"true"});return v&&!m?b.createElement(b.Fragment,null,x,b.createElement(ct,{page:y})):x}));yt.displayName="Link",b.forwardRef((function({"aria-current":e="page",caseSensitive:t=!1,className:n="",end:r=!1,style:o,to:a,viewTransition:i,children:l,...u},s){let c=je(a,{relative:u.relative}),f=Re(),d=b.useContext(Se),{navigator:p,basename:h}=b.useContext(Pe),m=null!=d&&function(e,t={}){let n=b.useContext(Be);Q(null!=n,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:r}=bt("useViewTransitionState"),o=je(e,{relative:t.relative});if(!n.isTransitioning)return!1;let a=he(n.currentLocation.pathname,r)||n.currentLocation.pathname,i=he(n.nextLocation.pathname,r)||n.nextLocation.pathname;return null!=de(o.pathname,i)||null!=de(o.pathname,a)}(c)&&!0===i,g=p.encodeLocation?p.encodeLocation(c).pathname:c.pathname,y=f.pathname,v=d&&d.navigation&&d.navigation.location?d.navigation.location.pathname:null;t||(y=y.toLowerCase(),v=v?v.toLowerCase():null,g=g.toLowerCase()),v&&h&&(v=he(v,h)||v);const A="/"!==g&&g.endsWith("/")?g.length-1:g.length;let C,w=y===g||!r&&y.startsWith(g)&&"/"===y.charAt(A),x=null!=v&&(v===g||!r&&v.startsWith(g)&&"/"===v.charAt(g.length)),k={isActive:w,isPending:x,isTransitioning:m},E=w?e:void 0;C="function"==typeof n?n(k):[n,w?"active":null,x?"pending":null,m?"transitioning":null].filter(Boolean).join(" ");let S="function"==typeof o?o(k):o;return b.createElement(yt,{...u,"aria-current":E,className:C,ref:s,style:S,to:a,viewTransition:i},"function"==typeof l?l(k):l)})).displayName="NavLink";var vt=b.forwardRef((({discover:e="render",fetcherKey:t,navigate:n,reloadDocument:r,replace:o,state:a,method:i=Ke,action:l,onSubmit:u,relative:s,preventScrollReset:c,viewTransition:f,...d},p)=>{let h=function(){let{router:e}=bt("useSubmit"),{basename:t}=b.useContext(Pe),n=Ve("useRouteId");return b.useCallback((async(r,o={})=>{let{action:a,method:i,encType:l,formData:u,body:s}=function(e,t){let n,r,o,a,i;if(Ze(l=e)&&"form"===l.tagName.toLowerCase()){let i=e.getAttribute("action");r=i?he(i,t):null,n=e.getAttribute("method")||Ke,o=tt(e.getAttribute("enctype"))||Xe,a=new FormData(e)}else if(function(e){return Ze(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Ze(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let l=e.getAttribute("formaction")||i.getAttribute("action");if(r=l?he(l,t):null,n=e.getAttribute("formmethod")||i.getAttribute("method")||Ke,o=tt(e.getAttribute("formenctype"))||tt(i.getAttribute("enctype"))||Xe,a=new FormData(i,e),!function(){if(null===Je)try{new FormData(document.createElement("form"),0),Je=!1}catch(e){Je=!0}return Je}()){let{name:t,type:n,value:r}=e;if("image"===n){let e=t?`${t}.`:"";a.append(`${e}x`,"0"),a.append(`${e}y`,"0")}else t&&a.append(t,r)}}else{if(Ze(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');n=Ke,r=null,o=Xe,i=e}var l;return a&&"text/plain"===o&&(i=a,a=void 0),{action:r,method:n.toLowerCase(),encType:o,formData:a,body:i}}(r,t);if(!1===o.navigate){let t=o.fetcherKey||Ct();await e.fetch(t,n,o.action||a,{preventScrollReset:o.preventScrollReset,formData:u,body:s,formMethod:o.method||i,formEncType:o.encType||l,flushSync:o.flushSync})}else await e.navigate(o.action||a,{preventScrollReset:o.preventScrollReset,formData:u,body:s,formMethod:o.method||i,formEncType:o.encType||l,replace:o.replace,state:o.state,fromRouteId:n,flushSync:o.flushSync,viewTransition:o.viewTransition})}),[e,t,n])}(),m=function(e,{relative:t}={}){let{basename:n}=b.useContext(Pe),r=b.useContext(_e);Q(r,"useFormAction must be used inside a RouteContext");let[o]=r.matches.slice(-1),a={...je(e||".",{relative:t})},i=Re();if(null==e){a.search=i.search;let e=new URLSearchParams(a.search),t=e.getAll("index");if(t.some((e=>""===e))){e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();a.search=n?`?${n}`:""}}return e&&"."!==e||!o.route.index||(a.search=a.search?a.search.replace(/^\?/,"?index&"):"?index"),"/"!==n&&(a.pathname="/"===a.pathname?n:ve([n,a.pathname])),Z(a)}(l,{relative:s}),g="get"===i.toLowerCase()?"get":"post",y="string"==typeof l&&gt.test(l);return b.createElement("form",{ref:p,method:g,action:m,onSubmit:r?u:e=>{if(u&&u(e),e.defaultPrevented)return;e.preventDefault();let r=e.nativeEvent.submitter,l=r?.getAttribute("formmethod")||i;h(r||e.currentTarget,{fetcherKey:t,method:l,navigate:n,replace:o,state:a,relative:s,preventScrollReset:c,viewTransition:f})},...d,"data-discover":y||"render"!==e?void 0:"true"})}));function bt(e){let t=b.useContext(Ee);return Q(t,function(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}(e)),t}vt.displayName="Form";var At=0,Ct=()=>`__${String(++At)}__`;function wt(e){return wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wt(e)}function xt(e){return function(e){if(Array.isArray(e))return kt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return kt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kt(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Et(){Et=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var A={};s(A,i,(function(){return this}));var C=Object.getPrototypeOf,w=C&&C(C(T([])));w&&w!==n&&r.call(w,i)&&(A=w);var x=b.prototype=y.prototype=Object.create(A);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==wt(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=d;return function(a,i){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=B(l,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=f(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(wt(t)+" is not iterable")}return v.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function St(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Bt(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){St(a,r,o,i,l,"next",e)}function l(e){St(a,r,o,i,l,"throw",e)}i(void 0)}))}}new TextEncoder;var Pt=function(e){return function(){var t=Bt(Et().mark((function t(n){var r,o;return Et().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("http://localhost:5000/users/".concat(e));case 3:return r=t.sent,t.next=6,r.json();case 6:o=t.sent,n({type:"FETCH_USER_CART",payload:o.cart||[]}),t.next=13;break;case 10:t.prev=10,t.t0=t.catch(0),console.error("Error fetching user cart:",t.t0.message);case 13:case"end":return t.stop()}}),t,null,[[0,10]])})));return function(e){return t.apply(this,arguments)}}()};function Ot(e){return Ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ot(e)}function _t(){_t=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var A={};s(A,i,(function(){return this}));var C=Object.getPrototypeOf,w=C&&C(C(T([])));w&&w!==n&&r.call(w,i)&&(A=w);var x=b.prototype=y.prototype=Object.create(A);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==Ot(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=d;return function(a,i){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=B(l,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=f(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ot(t)+" is not iterable")}return v.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Tt(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Lt(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Tt(a,r,o,i,l,"next",e)}function l(e){Tt(a,r,o,i,l,"throw",e)}i(void 0)}))}}var Rt=function(e,t){return function(){var n=Lt(_t().mark((function n(r){var o,a,i;return _t().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,fetch("http://localhost:5000/users");case 3:return o=n.sent,n.next=6,o.json();case 6:if(a=n.sent,!(i=a.find((function(n){return n.username===e&&n.password===t})))){n.next=15;break}return n.next=11,fetch("http://localhost:5000/loggedInUser",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});case 11:r({type:"LOGIN_SUCCESS",payload:i}),r(Pt(i.id)),n.next=16;break;case 15:throw new Error("Invalid credentials");case 16:n.next=21;break;case 18:n.prev=18,n.t0=n.catch(0),console.error("Login failed:",n.t0.message);case 21:case"end":return n.stop()}}),n,null,[[0,18]])})));return function(e){return n.apply(this,arguments)}}()};const Nt=function(){var e=W(),t=I((function(e){return e.auth.user}));return b.createElement("header",{className:"header"},b.createElement("div",{className:"header-logo"},b.createElement(yt,{to:"/"},"Used Cars Store")),b.createElement("div",{className:"header-actions"},b.createElement(yt,{to:"/cart"},"Cart"),t?b.createElement(b.Fragment,null,b.createElement("span",null,t.username),b.createElement("button",{onClick:function(){e(function(){var e=Lt(_t().mark((function e(t,n){var r,o;return _t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,o=null===(r=n().auth.user)||void 0===r?void 0:r.id){e.next=4;break}throw new Error("No user is logged in");case 4:return e.next=6,fetch("http://localhost:5000/loggedInUser/".concat(o),{method:"DELETE"});case 6:if(e.sent.ok){e.next=9;break}throw new Error("Failed to logout on server");case 9:t({type:"LOGOUT"}),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(0),console.error("Logout failed:",e.t0.message);case 15:case"end":return e.stop()}}),e,null,[[0,12]])})));return function(t,n){return e.apply(this,arguments)}}())}},"Logout")):b.createElement(yt,{to:"/login"},"Login")))};function It(e){return It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},It(e)}function zt(){zt=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var A={};s(A,i,(function(){return this}));var C=Object.getPrototypeOf,w=C&&C(C(T([])));w&&w!==n&&r.call(w,i)&&(A=w);var x=b.prototype=y.prototype=Object.create(A);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==It(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=d;return function(a,i){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=B(l,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=f(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(It(t)+" is not iterable")}return v.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function jt(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function $t(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=$t(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const Mt=function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=$t(e))&&(r&&(r+=" "),r+=t);return r};function Ft(e,t){const n={...t};for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)){const o=r;if("components"===o||"slots"===o)n[o]={...e[o],...n[o]};else if("componentsProps"===o||"slotProps"===o){const r=e[o],a=t[o];if(a)if(r){n[o]={...a};for(const e in r)if(Object.prototype.hasOwnProperty.call(r,e)){const t=e;n[o][t]=Ft(r[t],a[t])}}else n[o]=a;else n[o]=r||{}}else void 0===n[o]&&(n[o]=e[o])}return n}function Dt(e,t,n=void 0){const r={};for(const o in e){const a=e[o];let i="",l=!0;for(let e=0;e<a.length;e+=1){const r=a[e];r&&(i+=(!0===l?"":" ")+t(r),l=!1,n&&n[r]&&(i+=" "+n[r]))}r[o]=i}return r}function Ut(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}function Wt(e,t=0,n=1){return function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}(e,t,n)}function Vt(e){if(e.type)return e;if("#"===e.charAt(0))return Vt(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error(Ut(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(r))throw new Error(Ut(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}const Ht=(e,t)=>{try{return(e=>{const t=Vt(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function Yt(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function Gt(e){e=Vt(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Yt({type:l,values:u})}function Qt(e){let t="hsl"===(e=Vt(e)).type||"hsla"===e.type?Vt(Gt(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function qt(e,t){return e=Vt(e),t=Wt(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Yt(e)}function Kt(e,t,n){try{return qt(e,t)}catch(t){return e}}function Xt(e,t){if(e=Vt(e),t=Wt(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Yt(e)}function Zt(e,t,n){try{return Xt(e,t)}catch(t){return e}}function Jt(e,t){if(e=Vt(e),t=Wt(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Yt(e)}function en(e,t,n){try{return Jt(e,t)}catch(t){return e}}function tn(e,t=.15){return Qt(e)>.5?Xt(e,t):Jt(e,t)}function nn(e,t,n){try{return tn(e,t)}catch(t){return e}}const rn=e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e;function on(){return on=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},on.apply(null,arguments)}function an(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var ln=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,un=an((function(e){return ln.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),sn=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),cn=Math.abs,fn=String.fromCharCode,dn=Object.assign;function pn(e){return e.trim()}function hn(e,t,n){return e.replace(t,n)}function mn(e,t){return e.indexOf(t)}function gn(e,t){return 0|e.charCodeAt(t)}function yn(e,t,n){return e.slice(t,n)}function vn(e){return e.length}function bn(e){return e.length}function An(e,t){return t.push(e),e}var Cn=1,wn=1,xn=0,kn=0,En=0,Sn="";function Bn(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Cn,column:wn,length:i,return:""}}function Pn(e,t){return dn(Bn("",null,null,"",null,null,0),e,{length:-e.length},t)}function On(){return En=kn>0?gn(Sn,--kn):0,wn--,10===En&&(wn=1,Cn--),En}function _n(){return En=kn<xn?gn(Sn,kn++):0,wn++,10===En&&(wn=1,Cn++),En}function Tn(){return gn(Sn,kn)}function Ln(){return kn}function Rn(e,t){return yn(Sn,e,t)}function Nn(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function In(e){return Cn=wn=1,xn=vn(Sn=e),kn=0,[]}function zn(e){return Sn="",e}function jn(e){return pn(Rn(kn-1,Fn(91===e?e+2:40===e?e+1:e)))}function $n(e){for(;(En=Tn())&&En<33;)_n();return Nn(e)>2||Nn(En)>3?"":" "}function Mn(e,t){for(;--t&&_n()&&!(En<48||En>102||En>57&&En<65||En>70&&En<97););return Rn(e,Ln()+(t<6&&32==Tn()&&32==_n()))}function Fn(e){for(;_n();)switch(En){case e:return kn;case 34:case 39:34!==e&&39!==e&&Fn(En);break;case 40:41===e&&Fn(e);break;case 92:_n()}return kn}function Dn(e,t){for(;_n()&&e+En!==57&&(e+En!==84||47!==Tn()););return"/*"+Rn(t,kn-1)+"*"+fn(47===e?e:_n())}function Un(e){for(;!Nn(Tn());)_n();return Rn(e,kn)}var Wn="-ms-",Vn="-moz-",Hn="-webkit-",Yn="comm",Gn="rule",Qn="decl",qn="@keyframes";function Kn(e,t){for(var n="",r=bn(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function Xn(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case Qn:return e.return=e.return||e.value;case Yn:return"";case qn:return e.return=e.value+"{"+Kn(e.children,r)+"}";case Gn:e.value=e.props.join(",")}return vn(n=Kn(e.children,r))?e.return=e.value+"{"+n+"}":""}function Zn(e){return zn(Jn("",null,null,null,[""],e=In(e),0,[0],e))}function Jn(e,t,n,r,o,a,i,l,u){for(var s=0,c=0,f=i,d=0,p=0,h=0,m=1,g=1,y=1,v=0,b="",A=o,C=a,w=r,x=b;g;)switch(h=v,v=_n()){case 40:if(108!=h&&58==gn(x,f-1)){-1!=mn(x+=hn(jn(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:x+=jn(v);break;case 9:case 10:case 13:case 32:x+=$n(h);break;case 92:x+=Mn(Ln()-1,7);continue;case 47:switch(Tn()){case 42:case 47:An(tr(Dn(_n(),Ln()),t,n),u);break;default:x+="/"}break;case 123*m:l[s++]=vn(x)*y;case 125*m:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:-1==y&&(x=hn(x,/\f/g,"")),p>0&&vn(x)-f&&An(p>32?nr(x+";",r,n,f-1):nr(hn(x," ","")+";",r,n,f-2),u);break;case 59:x+=";";default:if(An(w=er(x,t,n,s,c,o,l,b,A=[],C=[],f),a),123===v)if(0===c)Jn(x,t,w,w,A,a,f,l,C);else switch(99===d&&110===gn(x,3)?100:d){case 100:case 108:case 109:case 115:Jn(e,w,w,r&&An(er(e,w,w,0,0,o,l,b,o,A=[],f),C),o,C,f,l,r?A:C);break;default:Jn(x,w,w,w,[""],C,0,l,C)}}s=c=p=0,m=y=1,b=x="",f=i;break;case 58:f=1+vn(x),p=h;default:if(m<1)if(123==v)--m;else if(125==v&&0==m++&&125==On())continue;switch(x+=fn(v),v*m){case 38:y=c>0?1:(x+="\f",-1);break;case 44:l[s++]=(vn(x)-1)*y,y=1;break;case 64:45===Tn()&&(x+=jn(_n())),d=Tn(),c=f=vn(b=x+=Un(Ln())),v++;break;case 45:45===h&&2==vn(x)&&(m=0)}}return a}function er(e,t,n,r,o,a,i,l,u,s,c){for(var f=o-1,d=0===o?a:[""],p=bn(d),h=0,m=0,g=0;h<r;++h)for(var y=0,v=yn(e,f+1,f=cn(m=i[h])),b=e;y<p;++y)(b=pn(m>0?d[y]+" "+v:hn(v,/&\f/g,d[y])))&&(u[g++]=b);return Bn(e,t,n,0===o?Gn:l,u,s,c)}function tr(e,t,n){return Bn(e,t,n,Yn,fn(En),yn(e,2,-2),0)}function nr(e,t,n,r){return Bn(e,t,n,Qn,yn(e,0,r),yn(e,r+1,-1),r)}var rr=function(e,t,n){for(var r=0,o=0;r=o,o=Tn(),38===r&&12===o&&(t[n]=1),!Nn(o);)_n();return Rn(e,kn)},or=new WeakMap,ar=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||or.get(n))&&!r){or.set(e,!0);for(var o=[],a=function(e,t){return zn(function(e,t){var n=-1,r=44;do{switch(Nn(r)){case 0:38===r&&12===Tn()&&(t[n]=1),e[n]+=rr(kn-1,t,n);break;case 2:e[n]+=jn(r);break;case 4:if(44===r){e[++n]=58===Tn()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=fn(r)}}while(r=_n());return e}(In(e),t))}(t,o),i=n.props,l=0,u=0;l<a.length;l++)for(var s=0;s<i.length;s++,u++)e.props[u]=o[l]?a[l].replace(/&\f/g,i[s]):i[s]+" "+a[l]}}},ir=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function lr(e,t){switch(function(e,t){return 45^gn(e,0)?(((t<<2^gn(e,0))<<2^gn(e,1))<<2^gn(e,2))<<2^gn(e,3):0}(e,t)){case 5103:return Hn+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Hn+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Hn+e+Vn+e+Wn+e+e;case 6828:case 4268:return Hn+e+Wn+e+e;case 6165:return Hn+e+Wn+"flex-"+e+e;case 5187:return Hn+e+hn(e,/(\w+).+(:[^]+)/,Hn+"box-$1$2"+Wn+"flex-$1$2")+e;case 5443:return Hn+e+Wn+"flex-item-"+hn(e,/flex-|-self/,"")+e;case 4675:return Hn+e+Wn+"flex-line-pack"+hn(e,/align-content|flex-|-self/,"")+e;case 5548:return Hn+e+Wn+hn(e,"shrink","negative")+e;case 5292:return Hn+e+Wn+hn(e,"basis","preferred-size")+e;case 6060:return Hn+"box-"+hn(e,"-grow","")+Hn+e+Wn+hn(e,"grow","positive")+e;case 4554:return Hn+hn(e,/([^-])(transform)/g,"$1"+Hn+"$2")+e;case 6187:return hn(hn(hn(e,/(zoom-|grab)/,Hn+"$1"),/(image-set)/,Hn+"$1"),e,"")+e;case 5495:case 3959:return hn(e,/(image-set\([^]*)/,Hn+"$1$`$1");case 4968:return hn(hn(e,/(.+:)(flex-)?(.*)/,Hn+"box-pack:$3"+Wn+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Hn+e+e;case 4095:case 3583:case 4068:case 2532:return hn(e,/(.+)-inline(.+)/,Hn+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(vn(e)-1-t>6)switch(gn(e,t+1)){case 109:if(45!==gn(e,t+4))break;case 102:return hn(e,/(.+:)(.+)-([^]+)/,"$1"+Hn+"$2-$3$1"+Vn+(108==gn(e,t+3)?"$3":"$2-$3"))+e;case 115:return~mn(e,"stretch")?lr(hn(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==gn(e,t+1))break;case 6444:switch(gn(e,vn(e)-3-(~mn(e,"!important")&&10))){case 107:return hn(e,":",":"+Hn)+e;case 101:return hn(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Hn+(45===gn(e,14)?"inline-":"")+"box$3$1"+Hn+"$2$3$1"+Wn+"$2box$3")+e}break;case 5936:switch(gn(e,t+11)){case 114:return Hn+e+Wn+hn(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Hn+e+Wn+hn(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Hn+e+Wn+hn(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Hn+e+Wn+e+e}return e}var ur=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Qn:e.return=lr(e.value,e.length);break;case qn:return Kn([Pn(e,{value:hn(e.value,"@","@"+Hn)})],r);case Gn:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return Kn([Pn(e,{props:[hn(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return Kn([Pn(e,{props:[hn(t,/:(plac\w+)/,":"+Hn+"input-$1")]}),Pn(e,{props:[hn(t,/:(plac\w+)/,":-moz-$1")]}),Pn(e,{props:[hn(t,/:(plac\w+)/,Wn+"input-$1")]})],r)}return""}))}}],sr=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||ur,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var u,s,c,f,d=[Xn,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],p=(s=[ar,ir].concat(a,d),c=bn(s),function(e,t,n,r){for(var o="",a=0;a<c;a++)o+=s[a](e,t,n,r)||"";return o});o=function(e,t,n,r){u=n,function(e){Kn(Zn(e),p)}(e?e+"{"+t.styles+"}":t.styles),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new sn({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return h.sheet.hydrate(l),h},cr={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},fr=/[A-Z]|^ms/g,dr=/_EMO_([^_]+?)_([^]*?)_EMO_/g,pr=function(e){return 45===e.charCodeAt(1)},hr=function(e){return null!=e&&"boolean"!=typeof e},mr=an((function(e){return pr(e)?e:e.replace(fr,"-$&").toLowerCase()})),gr=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(dr,(function(e,t,n){return vr={name:t,styles:n,next:vr},t}))}return 1===cr[e]||pr(e)||"number"!=typeof t||0===t?t:t+"px"};function yr(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var o=n;if(1===o.anim)return vr={name:o.name,styles:o.styles,next:vr},o.name;var a=n;if(void 0!==a.styles){var i=a.next;if(void 0!==i)for(;void 0!==i;)vr={name:i.name,styles:i.styles,next:vr},i=i.next;return a.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=yr(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i){var l=i;null!=t&&void 0!==t[l]?r+=a+"{"+t[l]+"}":hr(l)&&(r+=mr(a)+":"+gr(a,l)+";")}else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var u=yr(e,t,i);switch(a){case"animation":case"animationName":r+=mr(a)+":"+u+";";break;default:r+=a+"{"+u+"}"}}else for(var s=0;s<i.length;s++)hr(i[s])&&(r+=mr(a)+":"+gr(a,i[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var l=vr,u=n(e);return vr=l,yr(e,t,u)}}var s=n;if(null==t)return s;var c=t[s];return void 0!==c?c:s}var vr,br=/label:\s*([^\s;{]+)\s*(;|$)/g;function Ar(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";vr=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=yr(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=yr(n,t,e[i]),r&&(o+=a[i]);br.lastIndex=0;for(var l,u="";null!==(l=br.exec(o));)u+="-"+l[1];var s=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+u;return{name:s,styles:o,next:vr}}var Cr=!!A.useInsertionEffect&&A.useInsertionEffect,wr=Cr||function(e){return e()},xr=(Cr||b.useLayoutEffect,b.createContext("undefined"!=typeof HTMLElement?sr({key:"css"}):null)),kr=(xr.Provider,function(e){return(0,b.forwardRef)((function(t,n){var r=(0,b.useContext)(xr);return e(t,r,n)}))}),Er=b.createContext({}),Sr=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Br=un,Pr=function(e){return"theme"!==e},Or=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Br:Pr},_r=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Tr=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Sr(t,n,r),wr((function(){return function(e,t,n){Sr(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}(t,n,r)})),null},Lr=function e(t,n){var r,o,a=t.__emotion_real===t,i=a&&t.__emotion_base||t;void 0!==n&&(r=n.label,o=n.target);var l=_r(t,n,a),u=l||Or(i),s=!u("as");return function(){var c=arguments,f=a&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&f.push("label:"+r+";"),null==c[0]||void 0===c[0].raw)f.push.apply(f,c);else{f.push(c[0][0]);for(var d=c.length,p=1;p<d;p++)f.push(c[p],c[0][p])}var h=kr((function(e,t,n){var r,a,c,d,p=s&&e.as||i,h="",m=[],g=e;if(null==e.theme){for(var y in g={},e)g[y]=e[y];g.theme=b.useContext(Er)}"string"==typeof e.className?(r=t.registered,a=m,c=e.className,d="",c.split(" ").forEach((function(e){void 0!==r[e]?a.push(r[e]+";"):e&&(d+=e+" ")})),h=d):null!=e.className&&(h=e.className+" ");var v=Ar(f.concat(m),t.registered,g);h+=t.key+"-"+v.name,void 0!==o&&(h+=" "+o);var A=s&&void 0===l?Or(p):u,C={};for(var w in e)s&&"as"===w||A(w)&&(C[w]=e[w]);return C.className=h,n&&(C.ref=n),b.createElement(b.Fragment,null,b.createElement(Tr,{cache:t,serialized:v,isStringTag:"string"==typeof p}),b.createElement(p,C))}));return h.displayName=void 0!==r?r:"Styled("+("string"==typeof i?i:i.displayName||i.name||"Component")+")",h.defaultProps=t.defaultProps,h.__emotion_real=h,h.__emotion_base=i,h.__emotion_styles=f,h.__emotion_forwardProp=l,Object.defineProperty(h,"toString",{value:function(){return"."+o}}),h.withComponent=function(t,r){return e(t,on({},n,r,{shouldForwardProp:_r(h,r,!0)})).apply(void 0,f)},h}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Lr[e]=Lr(e)}));const Rr=[];function Nr(e){return Rr[0]=e,Ar(Rr)}function Ir(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function zr(e){if(b.isValidElement(e)||!Ir(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=zr(e[n])})),t}function jr(e,t,n={clone:!0}){const r=n.clone?{...e}:e;return Ir(e)&&Ir(t)&&Object.keys(t).forEach((o=>{b.isValidElement(t[o])?r[o]=t[o]:Ir(t[o])&&Object.prototype.hasOwnProperty.call(e,o)&&Ir(e[o])?r[o]=jr(e[o],t[o],n):n.clone?r[o]=Ir(t[o])?zr(t[o]):t[o]:r[o]=t[o]})),r}function $r(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...o}=e,a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),i=Object.keys(a);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function s(e,o){const a=i.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[i[a]]?t[i[a]]:o)-r/100}${n})`}return{keys:i,values:a,up:l,down:u,between:s,only:function(e){return i.indexOf(e)+1<i.length?s(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?u(i[t]):s(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...o}}const Mr={borderRadius:4},Fr={xs:0,sm:600,md:900,lg:1200,xl:1536},Dr={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Fr[e]}px)`},Ur={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:Fr[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function Wr(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||Dr;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||Dr;return Object.keys(t).reduce(((o,a)=>{if(i=e.keys,"@"===(l=a)||l.startsWith("@")&&(i.some((e=>l.startsWith(`@${e}`)))||l.match(/^@\d/))){const e=function(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,o]=n,a=Number.isNaN(+r)?r||0:+r;return e.containerQueries(o).up(a)}(r.containerQueries?r:Ur,a);e&&(o[e]=n(t[a],a))}else if(Object.keys(e.values||Fr).includes(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}var i,l;return o}),{})}return n(t)}function Vr(e){if("string"!=typeof e)throw new Error(Ut(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Hr(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function Yr(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Hr(e,n)||r,t&&(o=t(o,r,e)),o}const Gr=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=Hr(e.theme,r)||{};return Wr(e,a,(e=>{let r=Yr(i,o,e);return e===r&&"string"==typeof e&&(r=Yr(i,o,`${t}${"default"===e?"":Vr(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},Qr=function(e,t){return t?jr(e,t,{clone:!1}):e},qr={m:"margin",p:"padding"},Kr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Xr={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Zr=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!Xr[e])return[e];e=Xr[e]}const[t,n]=e.split(""),r=qr[t],o=Kr[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(t)),e[t])}(),Jr=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],eo=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],to=[...Jr,...eo];function no(e,t,n,r){const o=Hr(e,t,!0)??n;return"number"==typeof o||"string"==typeof o?e=>"string"==typeof e?e:"string"==typeof o?`calc(${e} * ${o})`:o*e:Array.isArray(o)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=o[t];return e>=0?n:"number"==typeof n?-n:`-${n}`}:"function"==typeof o?o:()=>{}}function ro(e){return no(e,"spacing",8)}function oo(e,t){return"string"==typeof t||null==t?t:e(t)}function ao(e,t){const n=ro(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(!t.includes(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=oo(t,n),e)),{})}(Zr(n),r);return Wr(e,e[n],o)}(e,t,r,n))).reduce(Qr,{})}function io(e){return ao(e,Jr)}function lo(e){return ao(e,eo)}function uo(e){return ao(e,to)}function so(e=8,t=ro({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}io.propTypes={},io.filterProps=Jr,lo.propTypes={},lo.filterProps=eo,uo.propTypes={},uo.filterProps=to;const co=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?Qr(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function fo(e){return"number"!=typeof e?e:`${e}px solid`}function po(e,t){return Gr({prop:e,themeKey:"borders",transform:t})}const ho=po("border",fo),mo=po("borderTop",fo),go=po("borderRight",fo),yo=po("borderBottom",fo),vo=po("borderLeft",fo),bo=po("borderColor"),Ao=po("borderTopColor"),Co=po("borderRightColor"),wo=po("borderBottomColor"),xo=po("borderLeftColor"),ko=po("outline",fo),Eo=po("outlineColor"),So=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=no(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:oo(t,e)});return Wr(e,e.borderRadius,n)}return null};So.propTypes={},So.filterProps=["borderRadius"],co(ho,mo,go,yo,vo,bo,Ao,Co,wo,xo,So,ko,Eo);const Bo=e=>{if(void 0!==e.gap&&null!==e.gap){const t=no(e.theme,"spacing",8),n=e=>({gap:oo(t,e)});return Wr(e,e.gap,n)}return null};Bo.propTypes={},Bo.filterProps=["gap"];const Po=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=no(e.theme,"spacing",8),n=e=>({columnGap:oo(t,e)});return Wr(e,e.columnGap,n)}return null};Po.propTypes={},Po.filterProps=["columnGap"];const Oo=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=no(e.theme,"spacing",8),n=e=>({rowGap:oo(t,e)});return Wr(e,e.rowGap,n)}return null};function _o(e,t){return"grey"===t?t:e}function To(e){return e<=1&&0!==e?100*e+"%":e}Oo.propTypes={},Oo.filterProps=["rowGap"],co(Bo,Po,Oo,Gr({prop:"gridColumn"}),Gr({prop:"gridRow"}),Gr({prop:"gridAutoFlow"}),Gr({prop:"gridAutoColumns"}),Gr({prop:"gridAutoRows"}),Gr({prop:"gridTemplateColumns"}),Gr({prop:"gridTemplateRows"}),Gr({prop:"gridTemplateAreas"}),Gr({prop:"gridArea"})),co(Gr({prop:"color",themeKey:"palette",transform:_o}),Gr({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:_o}),Gr({prop:"backgroundColor",themeKey:"palette",transform:_o}));const Lo=Gr({prop:"width",transform:To}),Ro=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||Fr[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:To(t)}};return Wr(e,e.maxWidth,t)}return null};Ro.filterProps=["maxWidth"];const No=Gr({prop:"minWidth",transform:To}),Io=Gr({prop:"height",transform:To}),zo=Gr({prop:"maxHeight",transform:To}),jo=Gr({prop:"minHeight",transform:To}),$o=(Gr({prop:"size",cssProperty:"width",transform:To}),Gr({prop:"size",cssProperty:"height",transform:To}),co(Lo,Ro,No,Io,zo,jo,Gr({prop:"boxSizing"})),{border:{themeKey:"borders",transform:fo},borderTop:{themeKey:"borders",transform:fo},borderRight:{themeKey:"borders",transform:fo},borderBottom:{themeKey:"borders",transform:fo},borderLeft:{themeKey:"borders",transform:fo},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:fo},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:So},color:{themeKey:"palette",transform:_o},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:_o},backgroundColor:{themeKey:"palette",transform:_o},p:{style:lo},pt:{style:lo},pr:{style:lo},pb:{style:lo},pl:{style:lo},px:{style:lo},py:{style:lo},padding:{style:lo},paddingTop:{style:lo},paddingRight:{style:lo},paddingBottom:{style:lo},paddingLeft:{style:lo},paddingX:{style:lo},paddingY:{style:lo},paddingInline:{style:lo},paddingInlineStart:{style:lo},paddingInlineEnd:{style:lo},paddingBlock:{style:lo},paddingBlockStart:{style:lo},paddingBlockEnd:{style:lo},m:{style:io},mt:{style:io},mr:{style:io},mb:{style:io},ml:{style:io},mx:{style:io},my:{style:io},margin:{style:io},marginTop:{style:io},marginRight:{style:io},marginBottom:{style:io},marginLeft:{style:io},marginX:{style:io},marginY:{style:io},marginInline:{style:io},marginInlineStart:{style:io},marginInlineEnd:{style:io},marginBlock:{style:io},marginBlockStart:{style:io},marginBlockEnd:{style:io},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Bo},rowGap:{style:Oo},columnGap:{style:Po},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:To},maxWidth:{style:Ro},minWidth:{transform:To},height:{transform:To},maxHeight:{transform:To},minHeight:{transform:To},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Mo=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:u,style:s}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=Hr(n,l)||{};return s?s(o):Wr(o,t,(t=>{let n=Yr(c,u,t);return t===n&&"string"==typeof t&&(n=Yr(c,u,`${e}${"default"===t?"":Vr(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){const{sx:r,theme:o={}}=n||{};if(!r)return null;const a=o.unstable_sxConfig??$o;function i(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const i=function(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}(o.breakpoints),l=Object.keys(i);let u=i;return Object.keys(r).forEach((n=>{const i=function(e,t){return"function"==typeof e?e(t):e}(r[n],o);if(null!=i)if("object"==typeof i)if(a[n])u=Qr(u,e(n,i,o,a));else{const e=Wr({theme:o},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?u=Qr(u,e):u[n]=t({sx:i,theme:o})}else u=Qr(u,e(n,i,o,a))})),function(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}(o,(s=u,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),s)));var s}return Array.isArray(r)?r.map(i):i(r)}}();Mo.filterProps=["sx"];const Fo=Mo;function Do(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const Uo=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={},...i}=e;let l=jr({breakpoints:$r(n),direction:"ltr",components:{},palette:{mode:"light",...r},spacing:so(o),shape:{...Mr,...a}},i);return l=function(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const o=t(e.breakpoints.not(...n),r);return o.includes("not all and")?o.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):o}}const r={},o=e=>(n(r,e),r);return n(o),{...e,containerQueries:o}}(l),l.applyStyles=Do,l=t.reduce(((e,t)=>jr(e,t)),l),l.unstable_sxConfig={...$o,...i?.unstable_sxConfig},l.unstable_sx=function(e){return Fo({sx:e,theme:this})},l};function Wo(e){const{variants:t,...n}=e,r={variants:t,style:Nr(n),isProcessed:!0};return r.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=Nr(e.style))})),r}const Vo=Uo();function Ho(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function Yo(e){return e?(t,n)=>n[e]:null}function Go(e,t){const n="function"==typeof t?t(e):t;if(Array.isArray(n))return n.flatMap((t=>Go(e,t)));if(Array.isArray(n?.variants)){let t;if(n.isProcessed)t=n.style;else{const{variants:e,...r}=n;t=r}return Qo(e,n.variants,[t])}return n?.isProcessed?n.style:n}function Qo(e,t,n=[]){let r;e:for(let o=0;o<t.length;o+=1){const a=t[o];if("function"==typeof a.props){if(r??={...e,...e.ownerState,ownerState:e.ownerState},!a.props(r))continue}else for(const t in a.props)if(e[t]!==a.props[t]&&e.ownerState?.[t]!==a.props[t])continue e;"function"==typeof a.style?(r??={...e,...e.ownerState,ownerState:e.ownerState},n.push(a.style(r))):n.push(a.style)}return n}function qo(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}const Ko={black:"#000",white:"#fff"},Xo={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Zo="#f3e5f5",Jo="#ce93d8",ea="#ba68c8",ta="#ab47bc",na="#9c27b0",ra="#7b1fa2",oa="#e57373",aa="#ef5350",ia="#f44336",la="#d32f2f",ua="#c62828",sa="#ffb74d",ca="#ffa726",fa="#ff9800",da="#f57c00",pa="#e65100",ha="#e3f2fd",ma="#90caf9",ga="#42a5f5",ya="#1976d2",va="#1565c0",ba="#4fc3f7",Aa="#29b6f6",Ca="#03a9f4",wa="#0288d1",xa="#01579b",ka="#81c784",Ea="#66bb6a",Sa="#4caf50",Ba="#388e3c",Pa="#2e7d32",Oa="#1b5e20";function _a(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Ko.white,default:Ko.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const Ta=_a();function La(){return{text:{primary:Ko.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Ko.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const Ra=La();function Na(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Jt(e.main,o):"dark"===t&&(e.dark=Xt(e.main,a)))}function Ia(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2,...o}=e,a=e.primary||function(e="light"){return"dark"===e?{main:ma,light:ha,dark:ga}:{main:ya,light:ga,dark:va}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:Jo,light:Zo,dark:ta}:{main:na,light:ea,dark:ra}}(t),l=e.error||function(e="light"){return"dark"===e?{main:ia,light:oa,dark:la}:{main:la,light:aa,dark:ua}}(t),u=e.info||function(e="light"){return"dark"===e?{main:Aa,light:ba,dark:wa}:{main:wa,light:Ca,dark:xa}}(t),s=e.success||function(e="light"){return"dark"===e?{main:Ea,light:ka,dark:Ba}:{main:Pa,light:Sa,dark:Oa}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:ca,light:sa,dark:da}:{main:"#ed6c02",light:fa,dark:pa}}(t);function f(e){const t=function(e,t){const n=Qt(e),r=Qt(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Ra.text.primary)>=n?Ra.text.primary:Ta.text.primary;return t}const d=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Ut(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Ut(12,t?` (${t})`:"",JSON.stringify(e.main)));return Na(e,"light",o,r),Na(e,"dark",a,r),e.contrastText||(e.contrastText=f(e.main)),e};let p;return"light"===t?p=_a():"dark"===t&&(p=La()),jr({common:{...Ko},mode:t,primary:d({color:a,name:"primary"}),secondary:d({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:d({color:l,name:"error"}),warning:d({color:c,name:"warning"}),info:d({color:u,name:"info"}),success:d({color:s,name:"success"}),grey:Xo,contrastThreshold:n,getContrastText:f,augmentColor:d,tonalOffset:r,...p},o)}function za(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function ja(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}const $a=(e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))};function Ma(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={},i={};var l,u;return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,u=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(o,{[r]:u}),$a(a,e,`var(${r})`,l),$a(i,e,`var(${r}, ${u})`,l)}},u=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!u||u&&!u([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):l([...n,t],o,r))}))}(e),{css:o,vars:a,varsWithDefaults:i}}const Fa={textTransform:"uppercase"},Da='"Roboto", "Helvetica", "Arial", sans-serif';function Ua(e,t){const{fontFamily:n=Da,fontSize:r=14,fontWeightLight:o=300,fontWeightRegular:a=400,fontWeightMedium:i=500,fontWeightBold:l=700,htmlFontSize:u=16,allVariants:s,pxToRem:c,...f}="function"==typeof t?t(e):t,d=r/14,p=c||(e=>e/u*d+"rem"),h=(e,t,r,o,a)=>{return{fontFamily:n,fontWeight:e,fontSize:p(t),lineHeight:r,...n===Da?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},...a,...s};var i},m={h1:h(o,96,1.167,-1.5),h2:h(o,60,1.2,-.5),h3:h(a,48,1.167,0),h4:h(a,34,1.235,.25),h5:h(a,24,1.334,0),h6:h(i,20,1.6,.15),subtitle1:h(a,16,1.75,.15),subtitle2:h(i,14,1.57,.1),body1:h(a,16,1.5,.15),body2:h(a,14,1.43,.15),button:h(i,14,1.75,.4,Fa),caption:h(a,12,1.66,.4),overline:h(a,12,2.66,1,Fa),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return jr({htmlFontSize:u,pxToRem:p,fontFamily:n,fontSize:r,fontWeightLight:o,fontWeightRegular:a,fontWeightMedium:i,fontWeightBold:l,...m},f,{clone:!1})}function Wa(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Va=["none",Wa(0,2,1,-1,0,1,1,0,0,1,3,0),Wa(0,3,1,-2,0,2,2,0,0,1,5,0),Wa(0,3,3,-2,0,3,4,0,0,1,8,0),Wa(0,2,4,-1,0,4,5,0,0,1,10,0),Wa(0,3,5,-1,0,5,8,0,0,1,14,0),Wa(0,3,5,-1,0,6,10,0,0,1,18,0),Wa(0,4,5,-2,0,7,10,1,0,2,16,1),Wa(0,5,5,-3,0,8,10,1,0,3,14,2),Wa(0,5,6,-3,0,9,12,1,0,3,16,2),Wa(0,6,6,-3,0,10,14,1,0,4,18,3),Wa(0,6,7,-4,0,11,15,1,0,4,20,3),Wa(0,7,8,-4,0,12,17,2,0,5,22,4),Wa(0,7,8,-4,0,13,19,2,0,5,24,4),Wa(0,7,9,-4,0,14,21,2,0,5,26,4),Wa(0,8,9,-5,0,15,22,2,0,6,28,5),Wa(0,8,10,-5,0,16,24,2,0,6,30,5),Wa(0,8,11,-5,0,17,26,2,0,6,32,5),Wa(0,9,11,-5,0,18,28,2,0,7,34,6),Wa(0,9,12,-6,0,19,29,2,0,7,36,6),Wa(0,10,13,-6,0,20,31,3,0,8,38,7),Wa(0,10,13,-6,0,21,33,3,0,8,40,7),Wa(0,10,14,-6,0,22,35,3,0,8,42,7),Wa(0,11,14,-7,0,23,36,3,0,9,44,8),Wa(0,11,15,-7,0,24,38,3,0,9,46,8)],Ha={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Ya={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Ga(e){return`${Math.round(e)}ms`}function Qa(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function qa(e){const t={...Ha,...e.easing},n={...Ya,...e.duration};return{getAutoHeightDuration:Qa,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0,...l}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Ga(o)} ${a} ${"string"==typeof i?i:Ga(i)}`)).join(",")},...e,easing:t,duration:n}}const Ka={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function Xa(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let o=0;o<n.length;o++){const[a,i]=n[o];!Ir(r=i)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||a.startsWith("unstable_")?delete t[a]:Ir(i)&&(t[a]={...i},e(t[a]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const Za=function(e={},...t){const{breakpoints:n,mixins:r={},spacing:o,palette:a={},transitions:i={},typography:l={},shape:u,...s}=e;if(e.vars)throw new Error(Ut(20));const c=Ia(a),f=Uo(e);let d=jr(f,{mixins:(p=f.breakpoints,h=r,{toolbar:{minHeight:56,[p.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[p.up("sm")]:{minHeight:64}},...h}),palette:c,shadows:Va.slice(),typography:Ua(c,l),transitions:qa(i),zIndex:{...Ka}});var p,h;return d=jr(d,s),d=t.reduce(((e,t)=>jr(e,t)),d),d.unstable_sxConfig={...$o,...s?.unstable_sxConfig},d.unstable_sx=function(e){return Fo({sx:e,theme:this})},d.toRuntimeSource=Xa,d};function Ja(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}const ei=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=Ja(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function ti(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function ni(e){return"dark"===e?ei:[]}function ri(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const oi=e=>(t,n)=>{const r=e.rootSelector||":root",o=e.colorSchemeSelector;let a=o;if("class"===o&&(a=".%s"),"data"===o&&(a="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(a=`[${o}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const o={};return(i=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${i?`${i}-`:""}overlays-${t}`)),`--${i?`${i}-`:""}palette-AppBar-darkBg`,`--${i?`${i}-`:""}palette-AppBar-darkColor`]).forEach((e=>{o[e]=n[e],delete n[e]})),"media"===a?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:o}}:a?{[a.replace("%s",t)]:o,[`${r}, ${a.replace("%s",t)}`]:n}:{[r]:{...n,...o}}}if(a&&"media"!==a)return`${r}, ${a.replace("%s",String(t))}`}else if(t){if("media"===a)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(a)return a.replace("%s",String(t))}var i;return r};function ai(e,t,n){!e[t]&&n&&(e[t]=n)}function ii(e){return e&&e.startsWith("hsl")?Gt(e):e}function li(e,t){`${t}Channel`in e||(e[`${t}Channel`]=Ht(ii(e[t])))}const ui=e=>{try{return e()}catch(e){}};function si(e,t,n,r){if(!t)return;t=!0===t?{}:t;const o="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...o}=e,a=Ia(t);return{palette:a,opacity:{...ti(a.mode),...n},overlays:r||ni(a.mode),...o}}({...t,palette:{mode:o,...t?.palette}}));const{palette:a,...i}=Za({...n,palette:{mode:o,...t?.palette}});return e[r]={...t,palette:a,opacity:{...ti(o),...t?.opacity},overlays:t?.overlays||ni(o)},i}function ci(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:r,disableCssColorScheme:o=!1,cssVarPrefix:a="mui",shouldSkipGeneratingVar:i=ri,colorSchemeSelector:l=(n.light&&n.dark?"media":void 0),rootSelector:u=":root",...s}=e,c=Object.keys(n)[0],f=r||(n.light&&"light"!==c?"light":c),d=((e="mui")=>za(e))(a),{[f]:p,light:h,dark:m,...g}=n,y={...g};let v=p;if(("dark"===f&&!("dark"in n)||"light"===f&&!("light"in n))&&(v=!0),!v)throw new Error(Ut(21,f));const b=si(y,v,s,f);h&&!y.light&&si(y,h,void 0,"light"),m&&!y.dark&&si(y,m,void 0,"dark");let A={defaultColorScheme:f,...b,cssVarPrefix:a,colorSchemeSelector:l,rootSelector:u,getCssVar:d,colorSchemes:y,font:{...ja(b.typography),...b.font},spacing:(C=s.spacing,"number"==typeof C?`${C}px`:"string"==typeof C||"function"==typeof C||Array.isArray(C)?C:"8px")};var C;Object.keys(A.colorSchemes).forEach((e=>{const t=A.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],o=n[2];return d(e,t[r][o])};var r;if("light"===t.mode&&(ai(t.common,"background","#fff"),ai(t.common,"onBackground","#000")),"dark"===t.mode&&(ai(t.common,"background","#000"),ai(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){ai(t.Alert,"errorColor",Zt(t.error.light,.6)),ai(t.Alert,"infoColor",Zt(t.info.light,.6)),ai(t.Alert,"successColor",Zt(t.success.light,.6)),ai(t.Alert,"warningColor",Zt(t.warning.light,.6)),ai(t.Alert,"errorFilledBg",n("palette-error-main")),ai(t.Alert,"infoFilledBg",n("palette-info-main")),ai(t.Alert,"successFilledBg",n("palette-success-main")),ai(t.Alert,"warningFilledBg",n("palette-warning-main")),ai(t.Alert,"errorFilledColor",ui((()=>t.getContrastText(t.error.main)))),ai(t.Alert,"infoFilledColor",ui((()=>t.getContrastText(t.info.main)))),ai(t.Alert,"successFilledColor",ui((()=>t.getContrastText(t.success.main)))),ai(t.Alert,"warningFilledColor",ui((()=>t.getContrastText(t.warning.main)))),ai(t.Alert,"errorStandardBg",en(t.error.light,.9)),ai(t.Alert,"infoStandardBg",en(t.info.light,.9)),ai(t.Alert,"successStandardBg",en(t.success.light,.9)),ai(t.Alert,"warningStandardBg",en(t.warning.light,.9)),ai(t.Alert,"errorIconColor",n("palette-error-main")),ai(t.Alert,"infoIconColor",n("palette-info-main")),ai(t.Alert,"successIconColor",n("palette-success-main")),ai(t.Alert,"warningIconColor",n("palette-warning-main")),ai(t.AppBar,"defaultBg",n("palette-grey-100")),ai(t.Avatar,"defaultBg",n("palette-grey-400")),ai(t.Button,"inheritContainedBg",n("palette-grey-300")),ai(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),ai(t.Chip,"defaultBorder",n("palette-grey-400")),ai(t.Chip,"defaultAvatarColor",n("palette-grey-700")),ai(t.Chip,"defaultIconColor",n("palette-grey-700")),ai(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),ai(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),ai(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),ai(t.LinearProgress,"primaryBg",en(t.primary.main,.62)),ai(t.LinearProgress,"secondaryBg",en(t.secondary.main,.62)),ai(t.LinearProgress,"errorBg",en(t.error.main,.62)),ai(t.LinearProgress,"infoBg",en(t.info.main,.62)),ai(t.LinearProgress,"successBg",en(t.success.main,.62)),ai(t.LinearProgress,"warningBg",en(t.warning.main,.62)),ai(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),ai(t.Slider,"primaryTrack",en(t.primary.main,.62)),ai(t.Slider,"secondaryTrack",en(t.secondary.main,.62)),ai(t.Slider,"errorTrack",en(t.error.main,.62)),ai(t.Slider,"infoTrack",en(t.info.main,.62)),ai(t.Slider,"successTrack",en(t.success.main,.62)),ai(t.Slider,"warningTrack",en(t.warning.main,.62));const e=nn(t.background.default,.8);ai(t.SnackbarContent,"bg",e),ai(t.SnackbarContent,"color",ui((()=>t.getContrastText(e)))),ai(t.SpeedDialAction,"fabHoverBg",nn(t.background.paper,.15)),ai(t.StepConnector,"border",n("palette-grey-400")),ai(t.StepContent,"border",n("palette-grey-400")),ai(t.Switch,"defaultColor",n("palette-common-white")),ai(t.Switch,"defaultDisabledColor",n("palette-grey-100")),ai(t.Switch,"primaryDisabledColor",en(t.primary.main,.62)),ai(t.Switch,"secondaryDisabledColor",en(t.secondary.main,.62)),ai(t.Switch,"errorDisabledColor",en(t.error.main,.62)),ai(t.Switch,"infoDisabledColor",en(t.info.main,.62)),ai(t.Switch,"successDisabledColor",en(t.success.main,.62)),ai(t.Switch,"warningDisabledColor",en(t.warning.main,.62)),ai(t.TableCell,"border",en(Kt(t.divider,1),.88)),ai(t.Tooltip,"bg",Kt(t.grey[700],.92))}if("dark"===t.mode){ai(t.Alert,"errorColor",en(t.error.light,.6)),ai(t.Alert,"infoColor",en(t.info.light,.6)),ai(t.Alert,"successColor",en(t.success.light,.6)),ai(t.Alert,"warningColor",en(t.warning.light,.6)),ai(t.Alert,"errorFilledBg",n("palette-error-dark")),ai(t.Alert,"infoFilledBg",n("palette-info-dark")),ai(t.Alert,"successFilledBg",n("palette-success-dark")),ai(t.Alert,"warningFilledBg",n("palette-warning-dark")),ai(t.Alert,"errorFilledColor",ui((()=>t.getContrastText(t.error.dark)))),ai(t.Alert,"infoFilledColor",ui((()=>t.getContrastText(t.info.dark)))),ai(t.Alert,"successFilledColor",ui((()=>t.getContrastText(t.success.dark)))),ai(t.Alert,"warningFilledColor",ui((()=>t.getContrastText(t.warning.dark)))),ai(t.Alert,"errorStandardBg",Zt(t.error.light,.9)),ai(t.Alert,"infoStandardBg",Zt(t.info.light,.9)),ai(t.Alert,"successStandardBg",Zt(t.success.light,.9)),ai(t.Alert,"warningStandardBg",Zt(t.warning.light,.9)),ai(t.Alert,"errorIconColor",n("palette-error-main")),ai(t.Alert,"infoIconColor",n("palette-info-main")),ai(t.Alert,"successIconColor",n("palette-success-main")),ai(t.Alert,"warningIconColor",n("palette-warning-main")),ai(t.AppBar,"defaultBg",n("palette-grey-900")),ai(t.AppBar,"darkBg",n("palette-background-paper")),ai(t.AppBar,"darkColor",n("palette-text-primary")),ai(t.Avatar,"defaultBg",n("palette-grey-600")),ai(t.Button,"inheritContainedBg",n("palette-grey-800")),ai(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),ai(t.Chip,"defaultBorder",n("palette-grey-700")),ai(t.Chip,"defaultAvatarColor",n("palette-grey-300")),ai(t.Chip,"defaultIconColor",n("palette-grey-300")),ai(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),ai(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),ai(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),ai(t.LinearProgress,"primaryBg",Zt(t.primary.main,.5)),ai(t.LinearProgress,"secondaryBg",Zt(t.secondary.main,.5)),ai(t.LinearProgress,"errorBg",Zt(t.error.main,.5)),ai(t.LinearProgress,"infoBg",Zt(t.info.main,.5)),ai(t.LinearProgress,"successBg",Zt(t.success.main,.5)),ai(t.LinearProgress,"warningBg",Zt(t.warning.main,.5)),ai(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),ai(t.Slider,"primaryTrack",Zt(t.primary.main,.5)),ai(t.Slider,"secondaryTrack",Zt(t.secondary.main,.5)),ai(t.Slider,"errorTrack",Zt(t.error.main,.5)),ai(t.Slider,"infoTrack",Zt(t.info.main,.5)),ai(t.Slider,"successTrack",Zt(t.success.main,.5)),ai(t.Slider,"warningTrack",Zt(t.warning.main,.5));const e=nn(t.background.default,.98);ai(t.SnackbarContent,"bg",e),ai(t.SnackbarContent,"color",ui((()=>t.getContrastText(e)))),ai(t.SpeedDialAction,"fabHoverBg",nn(t.background.paper,.15)),ai(t.StepConnector,"border",n("palette-grey-600")),ai(t.StepContent,"border",n("palette-grey-600")),ai(t.Switch,"defaultColor",n("palette-grey-300")),ai(t.Switch,"defaultDisabledColor",n("palette-grey-600")),ai(t.Switch,"primaryDisabledColor",Zt(t.primary.main,.55)),ai(t.Switch,"secondaryDisabledColor",Zt(t.secondary.main,.55)),ai(t.Switch,"errorDisabledColor",Zt(t.error.main,.55)),ai(t.Switch,"infoDisabledColor",Zt(t.info.main,.55)),ai(t.Switch,"successDisabledColor",Zt(t.success.main,.55)),ai(t.Switch,"warningDisabledColor",Zt(t.warning.main,.55)),ai(t.TableCell,"border",Zt(Kt(t.divider,1),.68)),ai(t.Tooltip,"bg",Kt(t.grey[700],.92))}li(t.background,"default"),li(t.background,"paper"),li(t.common,"background"),li(t.common,"onBackground"),li(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];n&&"object"==typeof n&&(n.main&&ai(t[e],"mainChannel",Ht(ii(n.main))),n.light&&ai(t[e],"lightChannel",Ht(ii(n.light))),n.dark&&ai(t[e],"darkChannel",Ht(ii(n.dark))),n.contrastText&&ai(t[e],"contrastTextChannel",Ht(ii(n.contrastText))),"text"===e&&(li(t[e],"primary"),li(t[e],"secondary")),"action"===e&&(n.active&&li(t[e],"active"),n.selected&&li(t[e],"selected")))}))})),A=t.reduce(((e,t)=>jr(e,t)),A);const w={prefix:a,disableCssColorScheme:o,shouldSkipGeneratingVar:i,getSelector:oi(A)},{vars:x,generateThemeVars:k,generateStyleSheets:E}=function(e,t={}){const{getSelector:n=g,disableCssColorScheme:r,colorSchemeSelector:o}=t,{colorSchemes:a={},components:i,defaultColorScheme:l="light",...u}=e,{vars:s,css:c,varsWithDefaults:f}=Ma(u,t);let d=f;const p={},{[l]:h,...m}=a;if(Object.entries(m||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:a}=Ma(n,t);d=jr(d,a),p[e]={css:o,vars:r}})),h){const{css:e,vars:n,varsWithDefaults:r}=Ma(h,t);d=jr(d,r),p[l]={css:e,vars:n}}function g(t,n){let r=o;if("class"===o&&(r=".%s"),"data"===o&&(r="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(r=`[${o}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=a[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:d,generateThemeVars:()=>{let e={...s};return Object.entries(p).forEach((([,{vars:t}])=>{e=jr(e,t)})),e},generateStyleSheets:()=>{const t=[],o=e.defaultColorScheme||"light";function i(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}i(n(void 0,{...c}),c);const{[o]:l,...u}=p;if(l){const{css:e}=l,t=a[o]?.palette?.mode,u=!r&&t?{colorScheme:t,...e}:{...e};i(n(o,{...u}),u)}return Object.entries(u).forEach((([e,{css:t}])=>{const o=a[e]?.palette?.mode,l=!r&&o?{colorScheme:o,...t}:{...t};i(n(e,{...l}),l)})),t}}}(A,w);return A.vars=x,Object.entries(A.colorSchemes[A.defaultColorScheme]).forEach((([e,t])=>{A[e]=t})),A.generateThemeVars=k,A.generateStyleSheets=E,A.generateSpacing=function(){return so(s.spacing,ro(this))},A.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(l),A.spacing=A.generateSpacing(),A.shouldSkipGeneratingVar=i,A.unstable_sxConfig={...$o,...s?.unstable_sxConfig},A.unstable_sx=function(e){return Fo({sx:e,theme:this})},A.toRuntimeSource=Xa,A}function fi(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:Ia({...!0===n?{}:n.palette,mode:t})})}const di=function(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:o=(n?void 0:{light:!0}),defaultColorScheme:a=n?.mode,...i}=e,l=a||"light",u=o?.[l],s={...o,...n?{[l]:{..."boolean"!=typeof u&&u,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return Za(e,...t);let r=n;"palette"in e||s[l]&&(!0!==s[l]?r=s[l].palette:"dark"===l&&(r={mode:"dark"}));const o=Za({...e,palette:r},...t);return o.defaultColorScheme=l,o.colorSchemes=s,"light"===o.palette.mode&&(o.colorSchemes.light={...!0!==s.light&&s.light,palette:o.palette},fi(o,"dark",s.dark)),"dark"===o.palette.mode&&(o.colorSchemes.dark={...!0!==s.dark&&s.dark,palette:o.palette},fi(o,"light",s.light)),o}return n||"light"in s||"light"!==l||(s.light=!0),ci({...i,colorSchemes:s,defaultColorScheme:l,..."boolean"!=typeof r&&r},...t)}(),pi=di,hi="$$material",mi=function(e={}){const{themeId:t,defaultTheme:n=Vo,rootShouldForwardProp:r=Ho,slotShouldForwardProp:o=Ho}=e;function a(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{!function(e){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>e!==Fo)))(e.__emotion_styles))}(e);const{name:n,slot:i,skipVariantsResolver:l,skipSx:u,overridesResolver:s=Yo(qo(i)),...c}=t,f=void 0!==l?l:i&&"Root"!==i&&"root"!==i||!1,d=u||!1;let p=Ho;"Root"===i||"root"===i?p=r:i?p=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(p=void 0);const h=function(e,t){return Lr(e,t)}(e,{shouldForwardProp:p,label:void 0,...c}),m=e=>{if("function"==typeof e&&e.__emotion_real!==e)return function(t){return Go(t,e)};if(Ir(e)){const t=Wo(e);return t.variants?function(e){return Go(e,t)}:t.style}return e},g=(...t)=>{const r=[],o=t.map(m),i=[];if(r.push(a),n&&s&&i.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const o={};for(const t in r)o[t]=Go(e,r[t]);return s(e,o)})),n&&!f&&i.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?Qo(e,r):null})),d||i.push(Fo),Array.isArray(o[0])){const e=o.shift(),t=new Array(r.length).fill(""),n=new Array(i.length).fill("");let a;a=[...t,...e,...n],a.raw=[...t,...e.raw,...n],r.unshift(a)}const l=[...r,...o,...i],u=h(...l);return e.muiName&&(u.muiName=e.muiName),u};return h.withConfig&&(g.withConfig=h.withConfig),g}}({themeId:hi,defaultTheme:pi,rootShouldForwardProp:rn}),gi=mi,yi={theme:void 0},vi=function(e){let t,n;return function(r){let o=t;return void 0!==o&&r.theme===n||(yi.theme=r.theme,o=Wo(e(yi)),t=o,n=r.theme),o}};var bi=o(848);const Ai=b.createContext(void 0);function Ci(e){return function({props:e,name:t}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?Ft(o.defaultProps,r):o.styleOverrides||o.variants?r:Ft(o,r)}({props:e,name:t,theme:{components:b.useContext(Ai)}})}(e)}function wi(e){try{return e.matches(":focus-visible")}catch(e){}return!1}function xi(...e){return b.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)}const ki=xi,Ei="undefined"!=typeof window?b.useLayoutEffect:b.useEffect,Si=function(e){const t=b.useRef(e);return Ei((()=>{t.current=e})),b.useRef(((...e)=>(0,t.current)(...e))).current},Bi=Si,Pi={};function Oi(e,t){const n=b.useRef(Pi);return n.current===Pi&&(n.current=e(t)),n}class _i{static create(){return new _i}static use(){const e=Oi(_i.create).current,[t,n]=b.useState(!1);return e.shouldMount=t,e.setShouldMount=n,b.useEffect(e.mountEffect,[t]),e}constructor(){this.ref={current:null},this.mounted=null,this.didMount=!1,this.shouldMount=!1,this.setShouldMount=null}mount(){return this.mounted||(this.mounted=function(){let e,t;const n=new Promise(((n,r)=>{e=n,t=r}));return n.resolve=e,n.reject=t,n}(),this.shouldMount=!0,this.setShouldMount(this.shouldMount)),this.mounted}mountEffect=()=>{this.shouldMount&&!this.didMount&&null!==this.ref.current&&(this.didMount=!0,this.mounted.resolve())};start(...e){this.mount().then((()=>this.ref.current?.start(...e)))}stop(...e){this.mount().then((()=>this.ref.current?.stop(...e)))}pulsate(...e){this.mount().then((()=>this.ref.current?.pulsate(...e)))}}function Ti(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}function Li(e,t){return Li=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Li(e,t)}function Ri(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Li(e,t)}const Ni=b.createContext(null);function Ii(e,t){var n=Object.create(null);return e&&b.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,b.isValidElement)(e)?t(e):e}(e)})),n}function zi(e,t,n){return null!=n[t]?n[t]:e.props[t]}function ji(e,t,n){var r=Ii(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,r);return Object.keys(o).forEach((function(a){var i=o[a];if((0,b.isValidElement)(i)){var l=a in t,u=a in r,s=t[a],c=(0,b.isValidElement)(s)&&!s.props.in;!u||l&&!c?u||!l||c?u&&l&&(0,b.isValidElement)(s)&&(o[a]=(0,b.cloneElement)(i,{onExited:n.bind(null,i),in:s.props.in,exit:zi(i,"exit",e),enter:zi(i,"enter",e)})):o[a]=(0,b.cloneElement)(i,{in:!1}):o[a]=(0,b.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:zi(i,"exit",e),enter:zi(i,"enter",e)})}})),o}var $i=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Mi=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Ri(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,r=a,Ii(n.children,(function(e){return(0,b.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:zi(e,"appear",n),enter:zi(e,"enter",n),exit:zi(e,"exit",n)})}))):ji(e,o,a),firstRender:!1}},n.handleExited=function(e,t){var n=Ii(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=on({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Ti(e,["component","childFactory"]),o=this.state.contextValue,a=$i(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?b.createElement(Ni.Provider,{value:o},a):b.createElement(Ni.Provider,{value:o},b.createElement(t,r,a))},t}(b.Component);Mi.propTypes={},Mi.defaultProps={component:"div",childFactory:function(e){return e}};const Fi=Mi,Di=[];class Ui{static create(){return new Ui}currentId=null;start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)};disposeEffect=()=>this.clear}function Wi(){const e=Oi(Ui.create).current;return function(e){b.useEffect(e,Di)}(e.disposeEffect),e}function Vi(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Ar(t)}var Hi=function(){var e=Vi.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};const Yi=e=>e,Gi=(()=>{let e=Yi;return{configure(t){e=t},generate:t=>e(t),reset(){e=Yi}}})(),Qi={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function qi(e,t,n="Mui"){const r=Qi[t];return r?`${n}-${r}`:`${Gi.generate(e)}-${t}`}function Ki(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=qi(e,t,n)})),r}const Xi=Ki("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Zi=Hi`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`,Ji=Hi`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`,el=Hi`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`,tl=gi("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),nl=gi((function(e){const{className:t,classes:n,pulsate:r=!1,rippleX:o,rippleY:a,rippleSize:i,in:l,onExited:u,timeout:s}=e,[c,f]=b.useState(!1),d=Mt(t,n.ripple,n.rippleVisible,r&&n.ripplePulsate),p={width:i,height:i,top:-i/2+a,left:-i/2+o},h=Mt(n.child,c&&n.childLeaving,r&&n.childPulsate);return l||c||f(!0),b.useEffect((()=>{if(!l&&null!=u){const e=setTimeout(u,s);return()=>{clearTimeout(e)}}}),[u,l,s]),(0,bi.jsx)("span",{className:d,style:p,children:(0,bi.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})`
  opacity: 0;
  position: absolute;

  &.${Xi.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${Zi};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  &.${Xi.ripplePulsate} {
    animation-duration: ${({theme:e})=>e.transitions.duration.shorter}ms;
  }

  & .${Xi.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${Xi.childLeaving} {
    opacity: 0;
    animation-name: ${Ji};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  & .${Xi.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${el};
    animation-duration: 2500ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`,rl=b.forwardRef((function(e,t){const n=Ci({props:e,name:"MuiTouchRipple"}),{center:r=!1,classes:o={},className:a,...i}=n,[l,u]=b.useState([]),s=b.useRef(0),c=b.useRef(null);b.useEffect((()=>{c.current&&(c.current(),c.current=null)}),[l]);const f=b.useRef(!1),d=Wi(),p=b.useRef(null),h=b.useRef(null),m=b.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:a,cb:i}=e;u((e=>[...e,(0,bi.jsx)(nl,{classes:{ripple:Mt(o.ripple,Xi.ripple),rippleVisible:Mt(o.rippleVisible,Xi.rippleVisible),ripplePulsate:Mt(o.ripplePulsate,Xi.ripplePulsate),child:Mt(o.child,Xi.child),childLeaving:Mt(o.childLeaving,Xi.childLeaving),childPulsate:Mt(o.childPulsate,Xi.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:a},s.current)])),s.current+=1,c.current=i}),[o]),g=b.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:o=!1,center:a=r||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===e?.type&&f.current)return void(f.current=!1);"touchstart"===e?.type&&(f.current=!0);const l=i?null:h.current,u=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let s,c,g;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(u.width/2),c=Math.round(u.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;s=Math.round(t-u.left),c=Math.round(n-u.top)}if(a)g=Math.sqrt((2*u.width**2+u.height**2)/3),g%2==0&&(g+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-s),s)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;g=Math.sqrt(e**2+t**2)}e?.touches?null===p.current&&(p.current=()=>{m({pulsate:o,rippleX:s,rippleY:c,rippleSize:g,cb:n})},d.start(80,(()=>{p.current&&(p.current(),p.current=null)}))):m({pulsate:o,rippleX:s,rippleY:c,rippleSize:g,cb:n})}),[r,m,d]),y=b.useCallback((()=>{g({},{pulsate:!0})}),[g]),v=b.useCallback(((e,t)=>{if(d.clear(),"touchend"===e?.type&&p.current)return p.current(),p.current=null,void d.start(0,(()=>{v(e,t)}));p.current=null,u((e=>e.length>0?e.slice(1):e)),c.current=t}),[d]);return b.useImperativeHandle(t,(()=>({pulsate:y,start:g,stop:v})),[y,g,v]),(0,bi.jsx)(tl,{className:Mt(Xi.root,o.root,a),ref:h,...i,children:(0,bi.jsx)(Fi,{component:null,exit:!0,children:l})})})),ol=rl;function al(e){return qi("MuiButtonBase",e)}const il=Ki("MuiButtonBase",["root","disabled","focusVisible"]),ll=gi("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${il.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),ul=b.forwardRef((function(e,t){const n=Ci({props:e,name:"MuiButtonBase"}),{action:r,centerRipple:o=!1,children:a,className:i,component:l="button",disabled:u=!1,disableRipple:s=!1,disableTouchRipple:c=!1,focusRipple:f=!1,focusVisibleClassName:d,LinkComponent:p="a",onBlur:h,onClick:m,onContextMenu:g,onDragLeave:y,onFocus:v,onFocusVisible:A,onKeyDown:C,onKeyUp:w,onMouseDown:x,onMouseLeave:k,onMouseUp:E,onTouchEnd:S,onTouchMove:B,onTouchStart:P,tabIndex:O=0,TouchRippleProps:_,touchRippleRef:T,type:L,...R}=n,N=b.useRef(null),I=_i.use(),z=ki(I.ref,T),[j,$]=b.useState(!1);u&&j&&$(!1),b.useImperativeHandle(r,(()=>({focusVisible:()=>{$(!0),N.current.focus()}})),[]);const M=I.shouldMount&&!s&&!u;function F(e,t,n=c){return Bi((r=>(t&&t(r),n||I[e](r),!0)))}b.useEffect((()=>{j&&f&&!s&&I.pulsate()}),[s,f,j,I]);const D=F("start",x),U=F("stop",g),W=F("stop",y),V=F("stop",E),H=F("stop",(e=>{j&&e.preventDefault(),k&&k(e)})),Y=F("start",P),G=F("stop",S),Q=F("stop",B),q=F("stop",(e=>{wi(e.target)||$(!1),h&&h(e)}),!1),K=Bi((e=>{N.current||(N.current=e.currentTarget),wi(e.target)&&($(!0),A&&A(e)),v&&v(e)})),X=()=>{const e=N.current;return l&&"button"!==l&&!("A"===e.tagName&&e.href)},Z=Bi((e=>{f&&!e.repeat&&j&&" "===e.key&&I.stop(e,(()=>{I.start(e)})),e.target===e.currentTarget&&X()&&" "===e.key&&e.preventDefault(),C&&C(e),e.target===e.currentTarget&&X()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),J=Bi((e=>{f&&" "===e.key&&j&&!e.defaultPrevented&&I.stop(e,(()=>{I.pulsate(e)})),w&&w(e),m&&e.target===e.currentTarget&&X()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let ee=l;"button"===ee&&(R.href||R.to)&&(ee=p);const te={};"button"===ee?(te.type=void 0===L?"button":L,te.disabled=u):(R.href||R.to||(te.role="button"),u&&(te["aria-disabled"]=u));const ne=ki(t,N),re={...n,centerRipple:o,component:l,disabled:u,disableRipple:s,disableTouchRipple:c,focusRipple:f,tabIndex:O,focusVisible:j},oe=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=Dt({root:["root",t&&"disabled",n&&"focusVisible"]},al,o);return n&&r&&(a.root+=` ${r}`),a})(re);return(0,bi.jsxs)(ll,{as:ee,className:Mt(oe.root,i),ownerState:re,onBlur:q,onClick:m,onContextMenu:U,onFocus:K,onKeyDown:Z,onKeyUp:J,onMouseDown:D,onMouseLeave:H,onMouseUp:V,onDragLeave:W,onTouchEnd:G,onTouchMove:Q,onTouchStart:Y,ref:ne,tabIndex:u?-1:O,type:L,...te,...R,children:[a,M?(0,bi.jsx)(ol,{ref:z,center:o,..._}):null]})})),sl=Vr;function cl(e=[]){return([,t])=>t&&function(e,t=[]){if(!function(e){return"string"==typeof e.main}(e))return!1;for(const n of t)if(!e.hasOwnProperty(n)||"string"!=typeof e[n])return!1;return!0}(t,e)}function fl(e){return qi("MuiButton",e)}const dl=Ki("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),pl=b.createContext({}),hl=b.createContext(void 0),ml=[{props:{size:"small"},style:{"& > *:nth-of-type(1)":{fontSize:18}}},{props:{size:"medium"},style:{"& > *:nth-of-type(1)":{fontSize:20}}},{props:{size:"large"},style:{"& > *:nth-of-type(1)":{fontSize:22}}}],gl=gi(ul,{shouldForwardProp:e=>rn(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${sl(n.color)}`],t[`size${sl(n.size)}`],t[`${n.variant}Size${sl(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})(vi((({theme:e})=>{const t="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],n="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return{...e.typography.button,minWidth:64,padding:"6px 16px",border:0,borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none"},[`&.${dl.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:{variant:"contained"},style:{color:"var(--variant-containedColor)",backgroundColor:"var(--variant-containedBg)",boxShadow:(e.vars||e).shadows[2],"&:hover":{boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2]}},"&:active":{boxShadow:(e.vars||e).shadows[8]},[`&.${dl.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]},[`&.${dl.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}},{props:{variant:"outlined"},style:{padding:"5px 15px",border:"1px solid currentColor",borderColor:"var(--variant-outlinedBorder, currentColor)",backgroundColor:"var(--variant-outlinedBg)",color:"var(--variant-outlinedColor)",[`&.${dl.disabled}`]:{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`}}},{props:{variant:"text"},style:{padding:"6px 8px",color:"var(--variant-textColor)",backgroundColor:"var(--variant-textBg)"}},...Object.entries(e.palette).filter(cl()).map((([t])=>({props:{color:t},style:{"--variant-textColor":(e.vars||e).palette[t].main,"--variant-outlinedColor":(e.vars||e).palette[t].main,"--variant-outlinedBorder":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.5)`:qt(e.palette[t].main,.5),"--variant-containedColor":(e.vars||e).palette[t].contrastText,"--variant-containedBg":(e.vars||e).palette[t].main,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":(e.vars||e).palette[t].dark,"--variant-textBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:qt(e.palette[t].main,e.palette.action.hoverOpacity),"--variant-outlinedBorder":(e.vars||e).palette[t].main,"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:qt(e.palette[t].main,e.palette.action.hoverOpacity)}}}}))),{props:{color:"inherit"},style:{color:"inherit",borderColor:"currentColor","--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedBg:t,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedHoverBg:n,"--variant-textBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:qt(e.palette.text.primary,e.palette.action.hoverOpacity),"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:qt(e.palette.text.primary,e.palette.action.hoverOpacity)}}}},{props:{size:"small",variant:"text"},style:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"text"},style:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"outlined"},style:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"outlined"},style:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"contained"},style:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"contained"},style:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)}},{props:{disableElevation:!0},style:{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${dl.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${dl.disabled}`]:{boxShadow:"none"}}},{props:{fullWidth:!0},style:{width:"100%"}}]}}))),yl=gi("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${sl(n.size)}`]]}})({display:"inherit",marginRight:8,marginLeft:-4,variants:[{props:{size:"small"},style:{marginLeft:-2}},...ml]}),vl=gi("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${sl(n.size)}`]]}})({display:"inherit",marginRight:-4,marginLeft:8,variants:[{props:{size:"small"},style:{marginRight:-2}},...ml]}),bl=b.forwardRef((function(e,t){const n=b.useContext(pl),r=b.useContext(hl),o=Ci({props:Ft(n,e),name:"MuiButton"}),{children:a,color:i="primary",component:l="button",className:u,disabled:s=!1,disableElevation:c=!1,disableFocusRipple:f=!1,endIcon:d,focusVisibleClassName:p,fullWidth:h=!1,size:m="medium",startIcon:g,type:y,variant:v="text",...A}=o,C={...o,color:i,component:l,disabled:s,disableElevation:c,disableFocusRipple:f,fullWidth:h,size:m,type:y,variant:v},w=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,classes:i}=e,l=Dt({root:["root",a,`${a}${sl(t)}`,`size${sl(o)}`,`${a}Size${sl(o)}`,`color${sl(t)}`,n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["icon","startIcon",`iconSize${sl(o)}`],endIcon:["icon","endIcon",`iconSize${sl(o)}`]},fl,i);return{...i,...l}})(C),x=g&&(0,bi.jsx)(yl,{className:w.startIcon,ownerState:C,children:g}),k=d&&(0,bi.jsx)(vl,{className:w.endIcon,ownerState:C,children:d}),E=r||"";return(0,bi.jsxs)(gl,{ownerState:C,className:Mt(n.className,w.root,u,E),component:l,disabled:s,focusRipple:!f,focusVisibleClassName:Mt(w.focusVisible,p),ref:t,type:y,...A,classes:w,children:[x,a,k]})})),Al=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},Cl=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t},wl=function(e){const{elementType:t,externalSlotProps:n,ownerState:r,skipResolvingSlotProps:o=!1,...a}=e,i=o?{}:function(e,t,n){return"function"==typeof e?e(t,n):e}(n,r),{props:l,internalRef:u}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:a}=e;if(!t){const e=Mt(n?.className,a,o?.className,r?.className),t={...n?.style,...o?.style,...r?.style},i={...n,...o,...r};return e.length>0&&(i.className=e),Object.keys(t).length>0&&(i.style=t),{props:i,internalRef:void 0}}const i=Al({...o,...r}),l=Cl(r),u=Cl(o),s=t(i),c=Mt(s?.className,n?.className,a,o?.className,r?.className),f={...s?.style,...n?.style,...o?.style,...r?.style},d={...s,...n,...u,...l};return c.length>0&&(d.className=c),Object.keys(f).length>0&&(d.style=f),{props:d,internalRef:s.ref}}({...a,externalSlotProps:i});return function(e,t,n){return void 0===e||"string"==typeof e?t:{...t,ownerState:{...t.ownerState,...n}}}(t,{...l,ref:xi(u,i?.ref,e.additionalProps?.ref)},r)};function xl(e){return e&&e.ownerDocument||document}function kl(e){return parseInt(b.version,10)>=19?e?.props?.ref||null:e?.ref||null}function El(e){return e.substring(2).toLowerCase()}function Sl(e){const{children:t,disableReactTree:n=!1,mouseEvent:r="onClick",onClickAway:o,touchEvent:a="onTouchEnd"}=e,i=b.useRef(!1),l=b.useRef(null),u=b.useRef(!1),s=b.useRef(!1);b.useEffect((()=>(setTimeout((()=>{u.current=!0}),0),()=>{u.current=!1})),[]);const c=xi(kl(t),l),f=Si((e=>{const t=s.current;s.current=!1;const r=xl(l.current);if(!u.current||!l.current||"clientX"in e&&function(e,t){return t.documentElement.clientWidth<e.clientX||t.documentElement.clientHeight<e.clientY}(e,r))return;if(i.current)return void(i.current=!1);let a;a=e.composedPath?e.composedPath().includes(l.current):!r.documentElement.contains(e.target)||l.current.contains(e.target),a||!n&&t||o(e)})),d=e=>n=>{s.current=!0;const r=t.props[e];r&&r(n)},p={ref:c};return!1!==a&&(p[a]=d(a)),b.useEffect((()=>{if(!1!==a){const e=El(a),t=xl(l.current),n=()=>{i.current=!0};return t.addEventListener(e,f),t.addEventListener("touchmove",n),()=>{t.removeEventListener(e,f),t.removeEventListener("touchmove",n)}}}),[f,a]),!1!==r&&(p[r]=d(r)),b.useEffect((()=>{if(!1!==r){const e=El(r),t=xl(l.current);return t.addEventListener(e,f),()=>{t.removeEventListener(e,f)}}}),[f,r]),(0,bi.jsx)(b.Fragment,{children:b.cloneElement(t,p)})}const Bl=Uo(),Pl=function(e=Bl){return function(e=null){const t=b.useContext(Er);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)};function Ol(){const e=Pl(pi);return e[hi]||e}var _l="unmounted",Tl="exited",Ll="entering",Rl="entered",Nl="exiting",Il=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=Tl,r.appearStatus=Ll):o=Rl:o=t.unmountOnExit||t.mountOnEnter?_l:Tl,r.state={status:o},r.nextCallback=null,r}Ri(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===_l?{status:Tl}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ll&&n!==Rl&&(t=Ll):n!==Ll&&n!==Rl||(t=Nl)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Ll){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:k.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Tl&&this.setState({status:_l})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[k.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),u=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Ll},(function(){t.props.onEntering(a,i),t.onTransitionEnd(u,(function(){t.safeSetState({status:Rl},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:Rl},(function(){t.props.onEntered(a)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:k.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Nl},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Tl},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Tl},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:k.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===_l)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Ti(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return b.createElement(Ni.Provider,{value:null},"function"==typeof n?n(e,r):b.cloneElement(b.Children.only(n),r))},t}(b.Component);function zl(){}Il.contextType=Ni,Il.propTypes={},Il.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:zl,onEntering:zl,onEntered:zl,onExit:zl,onExiting:zl,onExited:zl},Il.UNMOUNTED=_l,Il.EXITED=Tl,Il.ENTERING=Ll,Il.ENTERED=Rl,Il.EXITING=Nl;const jl=Il;function $l(e,t){const{timeout:n,easing:r,style:o={}}=e;return{duration:o.transitionDuration??("number"==typeof n?n:n[t.mode]||0),easing:o.transitionTimingFunction??("object"==typeof r?r[t.mode]:r),delay:o.transitionDelay}}function Ml(e){return`scale(${e}, ${e**2})`}const Fl={entering:{opacity:1,transform:Ml(1)},entered:{opacity:1,transform:"none"}},Dl="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Ul=b.forwardRef((function(e,t){const{addEndListener:n,appear:r=!0,children:o,easing:a,in:i,onEnter:l,onEntered:u,onEntering:s,onExit:c,onExited:f,onExiting:d,style:p,timeout:h="auto",TransitionComponent:m=jl,...g}=e,y=Wi(),v=b.useRef(),A=Ol(),C=b.useRef(null),w=ki(C,kl(o),t),x=e=>t=>{if(e){const n=C.current;void 0===t?e(n):e(n,t)}},k=x(s),E=x(((e,t)=>{(e=>{e.scrollTop})(e);const{duration:n,delay:r,easing:o}=$l({style:p,timeout:h,easing:a},{mode:"enter"});let i;"auto"===h?(i=A.transitions.getAutoHeightDuration(e.clientHeight),v.current=i):i=n,e.style.transition=[A.transitions.create("opacity",{duration:i,delay:r}),A.transitions.create("transform",{duration:Dl?i:.666*i,delay:r,easing:o})].join(","),l&&l(e,t)})),S=x(u),B=x(d),P=x((e=>{const{duration:t,delay:n,easing:r}=$l({style:p,timeout:h,easing:a},{mode:"exit"});let o;"auto"===h?(o=A.transitions.getAutoHeightDuration(e.clientHeight),v.current=o):o=t,e.style.transition=[A.transitions.create("opacity",{duration:o,delay:n}),A.transitions.create("transform",{duration:Dl?o:.666*o,delay:Dl?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=Ml(.75),c&&c(e)})),O=x(f);return(0,bi.jsx)(m,{appear:r,in:i,nodeRef:C,onEnter:E,onEntered:S,onEntering:k,onExit:P,onExited:O,onExiting:B,addEndListener:e=>{"auto"===h&&y.start(v.current||0,e),n&&n(C.current,e)},timeout:"auto"===h?null:h,...g,children:(e,t)=>b.cloneElement(o,{style:{opacity:0,transform:Ml(.75),visibility:"exited"!==e||i?void 0:"hidden",...Fl[e],...p,...o.props.style},ref:w,...t})})}));Ul&&(Ul.muiSupportAuto=!0);const Wl=Ul;function Vl(e){return qi("MuiPaper",e)}Ki("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const Hl=gi("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})(vi((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow"),variants:[{props:({ownerState:e})=>!e.square,style:{borderRadius:e.shape.borderRadius}},{props:{variant:"outlined"},style:{border:`1px solid ${(e.vars||e).palette.divider}`}},{props:{variant:"elevation"},style:{boxShadow:"var(--Paper-shadow)",backgroundImage:"var(--Paper-overlay)"}}]})))),Yl=b.forwardRef((function(e,t){const n=Ci({props:e,name:"MuiPaper"}),r=Ol(),{className:o,component:a="div",elevation:i=1,square:l=!1,variant:u="elevation",...s}=n,c={...n,component:a,elevation:i,square:l,variant:u},f=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return Dt({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Vl,o)})(c);return(0,bi.jsx)(Hl,{as:a,ownerState:c,className:Mt(f.root,o),ref:t,...s,style:{..."elevation"===u&&{"--Paper-shadow":(r.vars||r).shadows[i],...r.vars&&{"--Paper-overlay":r.vars.overlays?.[i]},...!r.vars&&"dark"===r.palette.mode&&{"--Paper-overlay":`linear-gradient(${qt("#fff",Ja(i))}, ${qt("#fff",Ja(i))})`}},...s.style}})}));function Gl(e){return qi("MuiSnackbarContent",e)}Ki("MuiSnackbarContent",["root","message","action"]);const Ql=gi(Yl,{name:"MuiSnackbarContent",slot:"Root",overridesResolver:(e,t)=>t.root})(vi((({theme:e})=>{const t="light"===e.palette.mode?.8:.98,n=tn(e.palette.background.default,t);return{...e.typography.body2,color:e.vars?e.vars.palette.SnackbarContent.color:e.palette.getContrastText(n),backgroundColor:e.vars?e.vars.palette.SnackbarContent.bg:n,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,flexGrow:1,[e.breakpoints.up("sm")]:{flexGrow:"initial",minWidth:288}}}))),ql=gi("div",{name:"MuiSnackbarContent",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0"}),Kl=gi("div",{name:"MuiSnackbarContent",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}),Xl=b.forwardRef((function(e,t){const n=Ci({props:e,name:"MuiSnackbarContent"}),{action:r,className:o,message:a,role:i="alert",...l}=n,u=n,s=(e=>{const{classes:t}=e;return Dt({root:["root"],action:["action"],message:["message"]},Gl,t)})(u);return(0,bi.jsxs)(Ql,{role:i,square:!0,elevation:6,className:Mt(s.root,o),ownerState:u,ref:t,...l,children:[(0,bi.jsx)(ql,{className:s.message,ownerState:u,children:a}),r?(0,bi.jsx)(Kl,{className:s.action,ownerState:u,children:r}):null]})}));function Zl(e){return qi("MuiSnackbar",e)}Ki("MuiSnackbar",["root","anchorOriginTopCenter","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft"]);const Jl=gi("div",{name:"MuiSnackbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`anchorOrigin${sl(n.anchorOrigin.vertical)}${sl(n.anchorOrigin.horizontal)}`]]}})(vi((({theme:e})=>({zIndex:(e.vars||e).zIndex.snackbar,position:"fixed",display:"flex",left:8,right:8,justifyContent:"center",alignItems:"center",variants:[{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical,style:{top:8,[e.breakpoints.up("sm")]:{top:24}}},{props:({ownerState:e})=>"top"!==e.anchorOrigin.vertical,style:{bottom:8,[e.breakpoints.up("sm")]:{bottom:24}}},{props:({ownerState:e})=>"left"===e.anchorOrigin.horizontal,style:{justifyContent:"flex-start",[e.breakpoints.up("sm")]:{left:24,right:"auto"}}},{props:({ownerState:e})=>"right"===e.anchorOrigin.horizontal,style:{justifyContent:"flex-end",[e.breakpoints.up("sm")]:{right:24,left:"auto"}}},{props:({ownerState:e})=>"center"===e.anchorOrigin.horizontal,style:{[e.breakpoints.up("sm")]:{left:"50%",right:"auto",transform:"translateX(-50%)"}}}]})))),eu=b.forwardRef((function(e,t){const n=Ci({props:e,name:"MuiSnackbar"}),r=Ol(),o={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{action:a,anchorOrigin:{vertical:i,horizontal:l}={vertical:"bottom",horizontal:"left"},autoHideDuration:u=null,children:s,className:c,ClickAwayListenerProps:f,ContentProps:d,disableWindowBlurListener:p=!1,message:h,onBlur:m,onClose:g,onFocus:y,onMouseEnter:v,onMouseLeave:A,open:C,resumeHideDuration:w,TransitionComponent:x=Wl,transitionDuration:k=o,TransitionProps:{onEnter:E,onExited:S,...B}={},...P}=n,O={...n,anchorOrigin:{vertical:i,horizontal:l},autoHideDuration:u,disableWindowBlurListener:p,TransitionComponent:x,transitionDuration:k},_=(e=>{const{classes:t,anchorOrigin:n}=e;return Dt({root:["root",`anchorOrigin${sl(n.vertical)}${sl(n.horizontal)}`]},Zl,t)})(O),{getRootProps:T,onClickAway:L}=function(e={}){const{autoHideDuration:t=null,disableWindowBlurListener:n=!1,onClose:r,open:o,resumeHideDuration:a}=e,i=Wi();b.useEffect((()=>{if(o)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){e.defaultPrevented||"Escape"===e.key&&r?.(e,"escapeKeyDown")}}),[o,r]);const l=Si(((e,t)=>{r?.(e,t)})),u=Si((e=>{r&&null!=e&&i.start(e,(()=>{l(null,"timeout")}))}));b.useEffect((()=>(o&&u(t),i.clear)),[o,t,u,i]);const s=i.clear,c=b.useCallback((()=>{null!=t&&u(null!=a?a:.5*t)}),[t,a,u]),f=e=>t=>{const n=e.onFocus;n?.(t),s()},d=e=>t=>{const n=e.onMouseEnter;n?.(t),s()},p=e=>t=>{const n=e.onMouseLeave;n?.(t),c()};return b.useEffect((()=>{if(!n&&o)return window.addEventListener("focus",c),window.addEventListener("blur",s),()=>{window.removeEventListener("focus",c),window.removeEventListener("blur",s)}}),[n,o,c,s]),{getRootProps:(t={})=>{const n={...Al(e),...Al(t)};return{role:"presentation",...t,...n,onBlur:(r=n,e=>{const t=r.onBlur;t?.(e),c()}),onFocus:f(n),onMouseEnter:d(n),onMouseLeave:p(n)};var r},onClickAway:e=>{r?.(e,"clickaway")}}}({...O}),[R,N]=b.useState(!0),I=wl({elementType:Jl,getSlotProps:T,externalForwardedProps:P,ownerState:O,additionalProps:{ref:t},className:[_.root,c]});return!C&&R?null:(0,bi.jsx)(Sl,{onClickAway:L,...f,children:(0,bi.jsx)(Jl,{...I,children:(0,bi.jsx)(x,{appear:!0,in:C,timeout:k,direction:"top"===i?"down":"up",onEnter:(e,t)=>{N(!1),E&&E(e,t)},onExited:e=>{N(!0),S&&S(e)},...B,children:s||(0,bi.jsx)(Xl,{message:h,action:a,...d})})})})})),tu=eu;function nu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ru=function(e){var t=e.car,n=e.onAddToCart,r=I((function(e){return e.auth.user})),o=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(b.useState(!1),2),a=o[0],i=o[1];return b.createElement("div",{className:"car-card"},b.createElement("img",{src:t.image,alt:t.model,width:200}),b.createElement("h3",null,t.brand," ",t.model),b.createElement("p",null,"Год выпуска: ",t.year||"Не указан"),b.createElement("p",null,"Стоимость: $",t.price?t.price.toLocaleString():"Не указано"),b.createElement("p",null,"Тип двигателя: ",t.type||"Не указано"),b.createElement("p",null,"Пробег: ",t.mileage?"".concat(t.mileage.toLocaleString()," км"):"Не указано"),b.createElement("p",null,t.description||""),r?b.createElement(bl,{variant:"contained",color:"primary",onClick:function(){r&&(n(r.id,t),i(!0))}},"Add to Cart"):b.createElement("p",{style:{color:"red"}},"You must be logged in to add to cart"),b.createElement(tu,{open:a,autoHideDuration:3e3,onClose:function(){i(!1)},message:"Товар успешно добавлен в корзину!"}))};function ou(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return au(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?au(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function au(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const iu=function(e){var t=e.onFilterChange,n=ou((0,b.useState)(""),2),r=n[0],o=n[1],a=ou((0,b.useState)(""),2),i=a[0],l=a[1],u=ou((0,b.useState)(""),2),s=u[0],c=u[1];return b.createElement("div",{className:"filter-bar"},b.createElement("label",null,"Min Price:",b.createElement("input",{type:"number",value:r,onChange:function(e){return o(e.target.value)},placeholder:"Min price"})),b.createElement("label",null,"Max Price:",b.createElement("input",{type:"number",value:i,onChange:function(e){return l(e.target.value)},placeholder:"Max price"})),b.createElement("label",null,"Brand:",b.createElement("input",{type:"text",value:s,onChange:function(e){return c(e.target.value)},placeholder:"Brand"})),b.createElement("button",{onClick:function(){t({minPrice:r,maxPrice:i,brand:s})}},"Apply Filters"))},lu=function(e){var t=e.totalItems,n=e.itemsPerPage,r=e.currentPage,o=e.onPageChange,a=Math.ceil(t/n),i=function(e){o(e)};return b.createElement("div",{className:"pagination"},b.createElement("button",{disabled:1===r,onClick:function(){return i(r-1)}},"Предыдущая"),b.createElement("span",null,"Страница ",r," из ",a," "),b.createElement("button",{disabled:r===a,onClick:function(){return i(r+1)}},"Следующая"))};var uu=["Audi","BMW","Renault","Peugeot","Mercedes-Benz","Volkswagen","Ferrari","Toyota","Honda","Ford","Chevrolet","Nissan","Mazda","Hyundai","Kia","Citroën","Subaru","Tesla","Lexus","Infiniti","Cadillac"];const su=function(){return b.createElement("div",{className:"brand-list-container"},b.createElement("h2",null,"Выберите бренд"),b.createElement("ul",{className:"brand-list"},uu.map((function(e){return b.createElement("li",{key:e,className:"brand-item"},b.createElement(yt,{to:"/cars/brand/".concat(e.toLowerCase()),className:"brand-link"},e))}))))};function cu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const du=function(){var e=W(),t=I((function(e){return e.cars})),n=t.cars,r=t.loading,o=t.error,a=cu((0,b.useState)(n),2),i=a[0],l=a[1],u=cu((0,b.useState)({minPrice:"",maxPrice:"",brand:""}),2),s=u[0],c=u[1],f=cu((0,b.useState)(1),2),d=f[0],p=f[1],h=function(){let{matches:e}=b.useContext(_e),t=e[e.length-1];return t?t.params:{}}().brand;(0,b.useEffect)((function(){e(function(){var e,t=(e=zt().mark((function e(t){var n,r;return zt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t({type:"FETCH_CARS_REQUEST"}),e.prev=1,e.next=4,fetch("http://localhost:5000/cars");case 4:return n=e.sent,e.next=7,n.json();case 7:r=e.sent,t({type:"FETCH_CARS_SUCCESS",payload:r}),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),t({type:"FETCH_CARS_FAILURE",payload:e.t0.message});case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){jt(a,r,o,i,l,"next",e)}function l(e){jt(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}())}),[e]),(0,b.useEffect)((function(){var e;e=n,s.minPrice&&(e=e.filter((function(e){return e.price>=s.minPrice}))),s.maxPrice&&(e=e.filter((function(e){return e.price<=s.maxPrice}))),s.brand&&(e=e.filter((function(e){return e.brand.toLowerCase().includes(s.brand.toLowerCase())}))),h&&(e=e.filter((function(e){return e.brand.toLowerCase()===h.toLowerCase()}))),l(e)}),[n,s,h]);var m=50*d,g=m-50,y=i.slice(g,m);return r?b.createElement("div",{className:"cssload-loader"},b.createElement("div",{className:"cssload-line"}),b.createElement("div",{className:"cssload-line"}),b.createElement("div",{className:"cssload-line"}),b.createElement("div",{className:"cssload-line"}),b.createElement("div",{className:"cssload-line"}),b.createElement("div",{className:"cssload-line"}),b.createElement("div",{className:"cssload-subline"}),b.createElement("div",{className:"cssload-subline"}),b.createElement("div",{className:"cssload-subline"}),b.createElement("div",{className:"cssload-subline"}),b.createElement("div",{className:"cssload-subline"}),b.createElement("div",{className:"cssload-loader-circle-1"},b.createElement("div",{className:"cssload-loader-circle-2"})),b.createElement("div",{className:"cssload-needle"}),b.createElement("div",{className:"cssload-loading"},"Загрузка...")):o?b.createElement("div",null,"Error: ",o):b.createElement("div",null,b.createElement(su,null),b.createElement(iu,{onFilterChange:function(e){c(e)}}),b.createElement("div",{className:"car-list"},y.length>0?y.map((function(t){return b.createElement(ru,{key:t.id,car:t,onAddToCart:function(){return function(t){e(function(e){return function(){var t=Bt(Et().mark((function t(n,r){var o,a,i,l,u;return Et().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,o=r().auth.user){t.next=4;break}throw new Error("User not logged in");case 4:return t.next=6,fetch("http://localhost:5000/users");case 6:return a=t.sent,t.next=9,a.json();case 9:if(i=t.sent,l=i.find((function(e){return e.id===o.id}))){t.next=13;break}throw new Error("User not found");case 13:return u=[].concat(xt(l.cart),[e]),t.next=16,fetch("http://localhost:5000/users/".concat(o.id),{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({cart:u})});case 16:if(t.sent.ok){t.next=19;break}throw new Error("Failed to update cart");case 19:n({type:"UPDATE_CART",payload:u}),t.next=25;break;case 22:t.prev=22,t.t0=t.catch(0),console.error("Error adding to cart:",t.t0.message);case 25:case"end":return t.stop()}}),t,null,[[0,22]])})));return function(e,n){return t.apply(this,arguments)}}()}(t))}(t)}})})):b.createElement("p",null,"Нет автомобилей для выбранного бренда.")),b.createElement(lu,{totalItems:i.length,itemsPerPage:50,currentPage:d,onPageChange:function(e){p(e)}}))};function pu(e){return pu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pu(e)}function hu(){hu=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var A={};s(A,i,(function(){return this}));var C=Object.getPrototypeOf,w=C&&C(C(T([])));w&&w!==n&&r.call(w,i)&&(A=w);var x=b.prototype=y.prototype=Object.create(A);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==pu(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=d;return function(a,i){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=B(l,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=f(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(pu(t)+" is not iterable")}return v.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function mu(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function gu(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){mu(a,r,o,i,l,"next",e)}function l(e){mu(a,r,o,i,l,"throw",e)}i(void 0)}))}}function yu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const vu=function(){W(),ze();var e=I((function(e){return e.auth})).user,t=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return yu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,b.useState)([]),2),n=t[0],r=t[1],o=function(){var t=gu(hu().mark((function t(){var n,o;return hu().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=14;break}return t.prev=1,t.next=4,fetch("http://localhost:5000/users/".concat(e.id));case 4:return n=t.sent,t.next=7,n.json();case 7:(o=t.sent)&&o.cart?r(o.cart):r([]),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(1),console.error("Error fetching user's cart:",t.t0);case 14:case"end":return t.stop()}}),t,null,[[1,11]])})));return function(){return t.apply(this,arguments)}}();(0,b.useEffect)((function(){e&&o()}),[e]);var a=function(){var t=gu(hu().mark((function t(o){return hu().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("http://localhost:5000/users/".concat(e.id),{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({cart:n.filter((function(e){return e.id!==o}))})});case 3:t.sent.ok?r(n.filter((function(e){return e.id!==o}))):console.error("Failed to remove item from cart"),t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),console.error("Error removing item from cart:",t.t0);case 10:case"end":return t.stop()}}),t,null,[[0,7]])})));return function(e){return t.apply(this,arguments)}}();return b.createElement("div",{className:"cart"},b.createElement("h1",null,"Корзина"),n.length>0?n.map((function(e){return b.createElement("div",{key:e.id,className:"cart-item"},b.createElement("img",{src:e.image,alt:e.model,width:100}),b.createElement("h3",null,e.brand," ",e.model),b.createElement("p",null,"Год выпуска: ",e.year),b.createElement("p",null,"Стоимость: $",e.price),b.createElement("button",{onClick:function(){return a(e.id)}},"Удалить из корзины"))})):b.createElement("p",null,"Ваша корзина пуста."))};function bu(e){return bu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bu(e)}function Au(){Au=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var A={};s(A,i,(function(){return this}));var C=Object.getPrototypeOf,w=C&&C(C(T([])));w&&w!==n&&r.call(w,i)&&(A=w);var x=b.prototype=y.prototype=Object.create(A);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==bu(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=d;return function(a,i){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=B(l,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=f(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(bu(t)+" is not iterable")}return v.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Cu(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function wu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ku=function(){var e=W(),t=ze(),n=wu((0,b.useState)(""),2),r=n[0],o=n[1],a=wu((0,b.useState)(""),2),i=a[0],l=a[1],u=wu((0,b.useState)(""),2),s=u[0],c=u[1],f=I((function(e){return e.auth.user}));(0,b.useEffect)((function(){f&&t("/")}),[f,t]);var d=function(){var t,n=(t=Au().mark((function t(n){return Au().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n.preventDefault(),t.prev=1,t.next=4,e(Rt(r,i));case 4:t.next=9;break;case 6:t.prev=6,t.t0=t.catch(1),c("Invalid username or password");case 9:case"end":return t.stop()}}),t,null,[[1,6]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Cu(a,r,o,i,l,"next",e)}function l(e){Cu(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return n.apply(this,arguments)}}();return b.createElement("div",{className:"login-page"},b.createElement("div",{className:"login-form-container"},b.createElement("h1",null,"Login"),s&&b.createElement("p",{style:{color:"red"}},s),b.createElement("form",{onSubmit:d},b.createElement("label",null,"Username:",b.createElement("input",{type:"text",value:r,onChange:function(e){return o(e.target.value)},required:!0})),b.createElement("label",null,"Password:",b.createElement("input",{type:"password",value:i,onChange:function(e){return l(e.target.value)},required:!0})),b.createElement("button",{type:"submit"},"Login"))))},Eu=function(){return b.createElement(b.Fragment,null,b.createElement(Nt,null),b.createElement(Qe,null,b.createElement(Ye,{path:"/",element:b.createElement(du,null)}),b.createElement(Ye,{path:"/cart",element:b.createElement(vu,null)}),b.createElement(Ye,{path:"/login",element:b.createElement(ku,null)}),b.createElement(Ye,{path:"/cars/brand/:brand",element:b.createElement(du,null)})))};function Su(e){return Su="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Su(e)}function Bu(e,t,n){return(t=function(e){var t=function(e){if("object"!=Su(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Su(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Su(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Pu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ou(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pu(Object(n),!0).forEach((function(t){Bu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _u(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Tu="function"==typeof Symbol&&Symbol.observable||"@@observable",Lu=function(){return Math.random().toString(36).substring(7).split("").join(".")},Ru={INIT:"@@redux/INIT"+Lu(),REPLACE:"@@redux/REPLACE"+Lu(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Lu()}};function Nu(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Iu(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var zu=Iu();zu.withExtraArgument=Iu;const ju=zu;function $u(e){return $u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$u(e)}function Mu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mu(Object(n),!0).forEach((function(t){Du(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Du(e,t,n){return(t=function(e){var t=function(e){if("object"!=$u(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=$u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==$u(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Uu={cars:[],loading:!1,error:null};function Wu(e){return Wu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wu(e)}function Vu(e){return function(e){if(Array.isArray(e))return Hu(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Hu(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hu(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Yu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Gu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yu(Object(n),!0).forEach((function(t){Qu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qu(e,t,n){return(t=function(e){var t=function(e){if("object"!=Wu(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Wu(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Wu(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var qu={items:[]};function Ku(e){return Ku="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ku(e)}function Xu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xu(Object(n),!0).forEach((function(t){Ju(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ju(e,t,n){return(t=function(e){var t=function(e){if("object"!=Ku(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Ku(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ku(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var es={user:null},ts=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(_u(0));if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error(_u(1));return r(e)(t,n)}if("function"!=typeof t)throw new Error(_u(2));var a=t,i=n,l=[],u=l,s=!1;function c(){u===l&&(u=l.slice())}function f(){if(s)throw new Error(_u(3));return i}function d(e){if("function"!=typeof e)throw new Error(_u(4));if(s)throw new Error(_u(5));var t=!0;return c(),u.push(e),function(){if(t){if(s)throw new Error(_u(6));t=!1,c();var n=u.indexOf(e);u.splice(n,1),l=null}}}function p(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(_u(7));if(void 0===e.type)throw new Error(_u(8));if(s)throw new Error(_u(9));try{s=!0,i=a(i,e)}finally{s=!1}for(var t=l=u,n=0;n<t.length;n++)(0,t[n])();return e}return p({type:Ru.INIT}),(o={dispatch:p,subscribe:d,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error(_u(10));a=e,p({type:Ru.REPLACE})}})[Tu]=function(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(_u(11));function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[Tu]=function(){return this},e},o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Ru.INIT}))throw new Error(_u(12));if(void 0===n(void 0,{type:Ru.PROBE_UNKNOWN_ACTION()}))throw new Error(_u(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var u=i[l],s=n[u],c=e[u],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(_u(14));o[u]=f,r=r||f!==c}return(r=r||i.length!==Object.keys(e).length)?o:e}}({cars:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Uu,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_CARS_REQUEST":return Fu(Fu({},e),{},{loading:!0});case"FETCH_CARS_SUCCESS":return Fu(Fu({},e),{},{loading:!1,cars:t.payload});case"FETCH_CARS_FAILURE":return Fu(Fu({},e),{},{loading:!1,error:t.payload});default:return e}},cart:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:qu,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_USER_CART":return Gu(Gu({},e),{},{items:t.payload});case"ADD_TO_CART":return Gu(Gu({},e),{},{items:[].concat(Vu(e.items),[t.payload])});case"REMOVE_FROM_CART":return Gu(Gu({},e),{},{items:e.items.filter((function(e){return e.id!==t.payload}))});default:return e}},auth:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:es,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"LOGIN_SUCCESS":return Zu(Zu({},e),{},{user:t.payload});case"LOGOUT":return Zu(Zu({},e),{},{user:null});default:return e}}}),function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(_u(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=Nu.apply(void 0,a)(n.dispatch),Ou(Ou({},n),{},{dispatch:r})}}}(ju));const ns=ts;ns.dispatch(function(){var e=Lt(_t().mark((function e(t){var n,r,o;return _t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("http://localhost:5000/loggedInUser");case 3:return n=e.sent,e.next=6,n.json();case 6:(r=e.sent).length>0?(o=r[0],t({type:"LOGIN_SUCCESS",payload:o}),t(Pt(o.id))):t({type:"LOGOUT"}),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error("Error checking auth:",e.t0.message);case 13:case"end":return e.stop()}}),e,null,[[0,10]])})));return function(t){return e.apply(this,arguments)}}()),C.createRoot(document.getElementById("root")).render(b.createElement(M,{store:ns},b.createElement(mt,null,b.createElement(Eu,null))))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,