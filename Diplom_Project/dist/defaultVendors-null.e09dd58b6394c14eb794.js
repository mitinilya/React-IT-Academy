/*! For license information please see defaultVendors-null.e09dd58b6394c14eb794.js.LICENSE.txt */
"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[591],{5655:(e,t,n)=>{n.d(t,{A:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),a=Math.abs,o=String.fromCharCode,i=Object.assign;function l(e){return e.trim()}function u(e,t,n){return e.replace(t,n)}function s(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function f(e,t,n){return e.slice(t,n)}function d(e){return e.length}function p(e){return e.length}function h(e,t){return t.push(e),e}var m=1,g=1,y=0,v=0,b=0,w="";function S(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:m,column:g,length:i,return:""}}function k(e,t){return i(S("",null,null,"",null,null,0),e,{length:-e.length},t)}function x(){return b=v>0?c(w,--v):0,g--,10===b&&(g=1,m--),b}function C(){return b=v<y?c(w,v++):0,g++,10===b&&(g=1,m++),b}function E(){return c(w,v)}function A(){return v}function P(e,t){return f(w,e,t)}function T(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function R(e){return m=g=1,y=d(w=e),v=0,[]}function _(e){return w="",e}function N(e){return l(P(v-1,L(91===e?e+2:40===e?e+1:e)))}function $(e){for(;(b=E())&&b<33;)C();return T(e)>2||T(b)>3?"":" "}function O(e,t){for(;--t&&C()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return P(e,A()+(t<6&&32==E()&&32==C()))}function L(e){for(;C();)switch(b){case e:return v;case 34:case 39:34!==e&&39!==e&&L(b);break;case 40:41===e&&L(e);break;case 92:C()}return v}function M(e,t){for(;C()&&e+b!==57&&(e+b!==84||47!==E()););return"/*"+P(t,v-1)+"*"+o(47===e?e:C())}function z(e){for(;!T(E());)C();return P(e,v)}var I="-ms-",j="-moz-",F="-webkit-",D="comm",B="rule",W="decl",U="@keyframes";function V(e,t){for(var n="",r=p(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function H(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case W:return e.return=e.return||e.value;case D:return"";case U:return e.return=e.value+"{"+V(e.children,r)+"}";case B:e.value=e.props.join(",")}return d(n=V(e.children,r))?e.return=e.value+"{"+n+"}":""}function K(e){return _(Q("",null,null,null,[""],e=R(e),0,[0],e))}function Q(e,t,n,r,a,i,l,f,p){for(var m=0,g=0,y=l,v=0,b=0,w=0,S=1,k=1,P=1,T=0,R="",_=a,L=i,I=r,j=R;k;)switch(w=T,T=C()){case 40:if(108!=w&&58==c(j,y-1)){-1!=s(j+=u(N(T),"&","&\f"),"&\f")&&(P=-1);break}case 34:case 39:case 91:j+=N(T);break;case 9:case 10:case 13:case 32:j+=$(w);break;case 92:j+=O(A()-1,7);continue;case 47:switch(E()){case 42:case 47:h(q(M(C(),A()),t,n),p);break;default:j+="/"}break;case 123*S:f[m++]=d(j)*P;case 125*S:case 59:case 0:switch(T){case 0:case 125:k=0;case 59+g:-1==P&&(j=u(j,/\f/g,"")),b>0&&d(j)-y&&h(b>32?X(j+";",r,n,y-1):X(u(j," ","")+";",r,n,y-2),p);break;case 59:j+=";";default:if(h(I=Y(j,t,n,m,g,a,f,R,_=[],L=[],y),i),123===T)if(0===g)Q(j,t,I,I,_,i,y,f,L);else switch(99===v&&110===c(j,3)?100:v){case 100:case 108:case 109:case 115:Q(e,I,I,r&&h(Y(e,I,I,0,0,a,f,R,a,_=[],y),L),a,L,y,f,r?_:L);break;default:Q(j,I,I,I,[""],L,0,f,L)}}m=g=b=0,S=P=1,R=j="",y=l;break;case 58:y=1+d(j),b=w;default:if(S<1)if(123==T)--S;else if(125==T&&0==S++&&125==x())continue;switch(j+=o(T),T*S){case 38:P=g>0?1:(j+="\f",-1);break;case 44:f[m++]=(d(j)-1)*P,P=1;break;case 64:45===E()&&(j+=N(C())),v=E(),g=y=d(R=j+=z(A())),T++;break;case 45:45===w&&2==d(j)&&(S=0)}}return i}function Y(e,t,n,r,o,i,s,c,d,h,m){for(var g=o-1,y=0===o?i:[""],v=p(y),b=0,w=0,k=0;b<r;++b)for(var x=0,C=f(e,g+1,g=a(w=s[b])),E=e;x<v;++x)(E=l(w>0?y[x]+" "+C:u(C,/&\f/g,y[x])))&&(d[k++]=E);return S(e,t,n,0===o?B:c,d,h,m)}function q(e,t,n){return S(e,t,n,D,o(b),f(e,2,-2),0)}function X(e,t,n,r){return S(e,t,n,W,f(e,0,r),f(e,r+1,-1),r)}var G=function(e,t,n){for(var r=0,a=0;r=a,a=E(),38===r&&12===a&&(t[n]=1),!T(a);)C();return P(e,v)},J=new WeakMap,Z=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||J.get(n))&&!r){J.set(e,!0);for(var a=[],i=function(e,t){return _(function(e,t){var n=-1,r=44;do{switch(T(r)){case 0:38===r&&12===E()&&(t[n]=1),e[n]+=G(v-1,t,n);break;case 2:e[n]+=N(r);break;case 4:if(44===r){e[++n]=58===E()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=C());return e}(R(e),t))}(t,a),l=n.props,u=0,s=0;u<i.length;u++)for(var c=0;c<l.length;c++,s++)e.props[s]=a[u]?i[u].replace(/&\f/g,l[c]):l[c]+" "+i[u]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return F+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return F+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return F+e+j+e+I+e+e;case 6828:case 4268:return F+e+I+e+e;case 6165:return F+e+I+"flex-"+e+e;case 5187:return F+e+u(e,/(\w+).+(:[^]+)/,F+"box-$1$2"+I+"flex-$1$2")+e;case 5443:return F+e+I+"flex-item-"+u(e,/flex-|-self/,"")+e;case 4675:return F+e+I+"flex-line-pack"+u(e,/align-content|flex-|-self/,"")+e;case 5548:return F+e+I+u(e,"shrink","negative")+e;case 5292:return F+e+I+u(e,"basis","preferred-size")+e;case 6060:return F+"box-"+u(e,"-grow","")+F+e+I+u(e,"grow","positive")+e;case 4554:return F+u(e,/([^-])(transform)/g,"$1"+F+"$2")+e;case 6187:return u(u(u(e,/(zoom-|grab)/,F+"$1"),/(image-set)/,F+"$1"),e,"")+e;case 5495:case 3959:return u(e,/(image-set\([^]*)/,F+"$1$`$1");case 4968:return u(u(e,/(.+:)(flex-)?(.*)/,F+"box-pack:$3"+I+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+F+e+e;case 4095:case 3583:case 4068:case 2532:return u(e,/(.+)-inline(.+)/,F+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(d(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return u(e,/(.+:)(.+)-([^]+)/,"$1"+F+"$2-$3$1"+j+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~s(e,"stretch")?te(u(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,d(e)-3-(~s(e,"!important")&&10))){case 107:return u(e,":",":"+F)+e;case 101:return u(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+F+(45===c(e,14)?"inline-":"")+"box$3$1"+F+"$2$3$1"+I+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return F+e+I+u(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return F+e+I+u(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return F+e+I+u(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return F+e+I+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case W:e.return=te(e.value,e.length);break;case U:return V([k(e,{value:u(e.value,"@","@"+F)})],r);case B:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return V([k(e,{props:[u(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return V([k(e,{props:[u(t,/:(plac\w+)/,":"+F+"input-$1")]}),k(e,{props:[u(t,/:(plac\w+)/,":-moz-$1")]}),k(e,{props:[u(t,/:(plac\w+)/,I+"input-$1")]})],r)}return""}))}}],re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var a,o,i=e.stylisPlugins||ne,l={},u=[];a=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;u.push(e)}));var s,c,f,d,h=[H,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],m=(c=[Z,ee].concat(i,h),f=p(c),function(e,t,n,r){for(var a="",o=0;o<f;o++)a+=c[o](e,t,n,r)||"";return a});o=function(e,t,n,r){s=n,V(K(e?e+"{"+t.styles+"}":t.styles),m),r&&(g.inserted[t.name]=!0)};var g={key:t,sheet:new r({key:t,container:a,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:o};return g.sheet.hydrate(u),g}},6289:(e,t,n)=>{function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{A:()=>r})},9214:(e,t,n)=>{n.d(t,{T:()=>l,w:()=>i});var r=n(6540),a=n(5655),o=(n(3174),n(1287),r.createContext("undefined"!=typeof HTMLElement?(0,a.A)({key:"css"}):null)),i=(o.Provider,function(e){return(0,r.forwardRef)((function(t,n){var a=(0,r.useContext)(o);return e(t,a,n)}))}),l=r.createContext({})},3174:(e,t,n)=>{n.d(t,{J:()=>g});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},a=n(6289),o=!1,i=/[A-Z]|^ms/g,l=/_EMO_([^_]+?)_([^]*?)_EMO_/g,u=function(e){return 45===e.charCodeAt(1)},s=function(e){return null!=e&&"boolean"!=typeof e},c=(0,a.A)((function(e){return u(e)?e:e.replace(i,"-$&").toLowerCase()})),f=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(l,(function(e,t,n){return h={name:t,styles:n,next:h},t}))}return 1===r[e]||u(e)||"number"!=typeof t||0===t?t:t+"px"},d="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function p(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var a=n;if(1===a.anim)return h={name:a.name,styles:a.styles,next:h},a.name;var i=n;if(void 0!==i.styles){var l=i.next;if(void 0!==l)for(;void 0!==l;)h={name:l.name,styles:l.styles,next:h},l=l.next;return i.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=p(e,t,n[a])+";";else for(var i in n){var l=n[i];if("object"!=typeof l){var u=l;null!=t&&void 0!==t[u]?r+=i+"{"+t[u]+"}":s(u)&&(r+=c(i)+":"+f(i,u)+";")}else{if("NO_COMPONENT_SELECTOR"===i&&o)throw new Error(d);if(!Array.isArray(l)||"string"!=typeof l[0]||null!=t&&void 0!==t[l[0]]){var h=p(e,t,l);switch(i){case"animation":case"animationName":r+=c(i)+":"+h+";";break;default:r+=i+"{"+h+"}"}}else for(var m=0;m<l.length;m++)s(l[m])&&(r+=c(i)+":"+f(i,l[m])+";")}}return r}(e,t,n);case"function":if(void 0!==e){var u=h,m=n(e);return h=u,p(e,t,m)}}var g=n;if(null==t)return g;var y=t[g];return void 0!==y?y:g}var h,m=/label:\s*([^\s;{]+)\s*(;|$)/g;function g(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";h=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=p(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=p(n,t,e[i]),r&&(a+=o[i]);m.lastIndex=0;for(var l,u="";null!==(l=m.exec(a));)u+="-"+l[1];var s=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(a)+u;return{name:s,styles:a,next:h}}},1287:(e,t,n)=>{var r;n.d(t,{s:()=>i});var a=n(6540),o=!!(r||(r=n.t(a,2))).useInsertionEffect&&(r||(r=n.t(a,2))).useInsertionEffect,i=o||function(e){return e()};o||a.useLayoutEffect},7199:(e,t,n)=>{n.d(t,{A:()=>te});var r=n(6540),a=n(4164),o=n(7379),i=n(5659),l=n(3139),u=n(3431),s=n(7552),c=n(9077),f=n(5607);function d(e){try{return e.matches(":focus-visible")}catch(e){}return!1}var p=n(6852);const h=n(5949).A;var m=n(2295);class g{static create(){return new g}static use(){const e=(0,m.A)(g.create).current,[t,n]=r.useState(!1);return e.shouldMount=t,e.setShouldMount=n,r.useEffect(e.mountEffect,[t]),e}constructor(){this.ref={current:null},this.mounted=null,this.didMount=!1,this.shouldMount=!1,this.setShouldMount=null}mount(){return this.mounted||(this.mounted=function(){let e,t;const n=new Promise(((n,r)=>{e=n,t=r}));return n.resolve=e,n.reject=t,n}(),this.shouldMount=!0,this.setShouldMount(this.shouldMount)),this.mounted}mountEffect=()=>{this.shouldMount&&!this.didMount&&null!==this.ref.current&&(this.didMount=!0,this.mounted.resolve())};start(...e){this.mount().then((()=>this.ref.current?.start(...e)))}stop(...e){this.mount().then((()=>this.ref.current?.stop(...e)))}pulsate(...e){this.mount().then((()=>this.ref.current?.pulsate(...e)))}}var y=n(8587),v=n(8168),b=n(5540),w=n(7241);function S(e,t){var n=Object.create(null);return e&&r.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)})),n}function k(e,t,n){return null!=n[t]?n[t]:e.props[t]}function x(e,t,n){var a=S(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,a=Object.create(null),o=[];for(var i in e)i in t?o.length&&(a[i]=o,o=[]):o.push(i);var l={};for(var u in t){if(a[u])for(r=0;r<a[u].length;r++){var s=a[u][r];l[a[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}(t,a);return Object.keys(o).forEach((function(i){var l=o[i];if((0,r.isValidElement)(l)){var u=i in t,s=i in a,c=t[i],f=(0,r.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&(0,r.isValidElement)(c)&&(o[i]=(0,r.cloneElement)(l,{onExited:n.bind(null,l),in:c.props.in,exit:k(l,"exit",e),enter:k(l,"enter",e)})):o[i]=(0,r.cloneElement)(l,{in:!1}):o[i]=(0,r.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:k(l,"exit",e),enter:k(l,"enter",e)})}})),o}var C=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},E=function(e){function t(t,n){var r,a=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},r}(0,b.A)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,a,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,a=i,S(n.children,(function(e){return(0,r.cloneElement)(e,{onExited:a.bind(null,e),in:!0,appear:k(e,"appear",n),enter:k(e,"enter",n),exit:k(e,"exit",n)})}))):x(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=S(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,v.A)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,a=(0,y.A)(e,["component","childFactory"]),o=this.state.contextValue,i=C(this.state.children).map(n);return delete a.appear,delete a.enter,delete a.exit,null===t?r.createElement(w.A.Provider,{value:o},i):r.createElement(w.A.Provider,{value:o},r.createElement(t,a,i))},t}(r.Component);E.propTypes={},E.defaultProps={component:"div",childFactory:function(e){return e}};const A=E;var P=n(9787),T=(n(1287),n(3174));function R(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,T.J)(t)}n(5655),n(4146);var _=function(){var e=R.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},N=n(4848);var $=n(8413);const O=(0,$.A)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),L=_`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`,M=_`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`,z=_`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`,I=(0,s.Ay)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),j=(0,s.Ay)((function(e){const{className:t,classes:n,pulsate:o=!1,rippleX:i,rippleY:l,rippleSize:u,in:s,onExited:c,timeout:f}=e,[d,p]=r.useState(!1),h=(0,a.A)(t,n.ripple,n.rippleVisible,o&&n.ripplePulsate),m={width:u,height:u,top:-u/2+l,left:-u/2+i},g=(0,a.A)(n.child,d&&n.childLeaving,o&&n.childPulsate);return s||d||p(!0),r.useEffect((()=>{if(!s&&null!=c){const e=setTimeout(c,f);return()=>{clearTimeout(e)}}}),[c,s,f]),(0,N.jsx)("span",{className:h,style:m,children:(0,N.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})`
  opacity: 0;
  position: absolute;

  &.${O.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${L};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  &.${O.ripplePulsate} {
    animation-duration: ${({theme:e})=>e.transitions.duration.shorter}ms;
  }

  & .${O.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${O.childLeaving} {
    opacity: 0;
    animation-name: ${M};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  & .${O.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${z};
    animation-duration: 2500ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`,F=r.forwardRef((function(e,t){const n=(0,f.b)({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:i={},className:l,...u}=n,[s,c]=r.useState([]),d=r.useRef(0),p=r.useRef(null);r.useEffect((()=>{p.current&&(p.current(),p.current=null)}),[s]);const h=r.useRef(!1),m=(0,P.A)(),g=r.useRef(null),y=r.useRef(null),v=r.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:l}=e;c((e=>[...e,(0,N.jsx)(j,{classes:{ripple:(0,a.A)(i.ripple,O.ripple),rippleVisible:(0,a.A)(i.rippleVisible,O.rippleVisible),ripplePulsate:(0,a.A)(i.ripplePulsate,O.ripplePulsate),child:(0,a.A)(i.child,O.child),childLeaving:(0,a.A)(i.childLeaving,O.childLeaving),childPulsate:(0,a.A)(i.childPulsate,O.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},d.current)])),d.current+=1,p.current=l}),[i]),b=r.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===e?.type&&h.current)return void(h.current=!1);"touchstart"===e?.type&&(h.current=!0);const l=i?null:y.current,u=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let s,c,f;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(u.width/2),c=Math.round(u.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;s=Math.round(t-u.left),c=Math.round(n-u.top)}if(a)f=Math.sqrt((2*u.width**2+u.height**2)/3),f%2==0&&(f+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-s),s)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;f=Math.sqrt(e**2+t**2)}e?.touches?null===g.current&&(g.current=()=>{v({pulsate:r,rippleX:s,rippleY:c,rippleSize:f,cb:n})},m.start(80,(()=>{g.current&&(g.current(),g.current=null)}))):v({pulsate:r,rippleX:s,rippleY:c,rippleSize:f,cb:n})}),[o,v,m]),w=r.useCallback((()=>{b({},{pulsate:!0})}),[b]),S=r.useCallback(((e,t)=>{if(m.clear(),"touchend"===e?.type&&g.current)return g.current(),g.current=null,void m.start(0,(()=>{S(e,t)}));g.current=null,c((e=>e.length>0?e.slice(1):e)),p.current=t}),[m]);return r.useImperativeHandle(t,(()=>({pulsate:w,start:b,stop:S})),[w,b,S]),(0,N.jsx)(I,{className:(0,a.A)(O.root,i.root,l),ref:y,...u,children:(0,N.jsx)(A,{component:null,exit:!0,children:s})})}));var D=n(2288);function B(e){return(0,D.Ay)("MuiButtonBase",e)}const W=(0,$.A)("MuiButtonBase",["root","disabled","focusVisible"]),U=(0,s.Ay)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${W.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),V=r.forwardRef((function(e,t){const n=(0,f.b)({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:l=!1,children:u,className:s,component:c="button",disabled:m=!1,disableRipple:y=!1,disableTouchRipple:v=!1,focusRipple:b=!1,focusVisibleClassName:w,LinkComponent:S="a",onBlur:k,onClick:x,onContextMenu:C,onDragLeave:E,onFocus:A,onFocusVisible:P,onKeyDown:T,onKeyUp:R,onMouseDown:_,onMouseLeave:$,onMouseUp:O,onTouchEnd:L,onTouchMove:M,onTouchStart:z,tabIndex:I=0,TouchRippleProps:j,touchRippleRef:D,type:W,...V}=n,H=r.useRef(null),K=g.use(),Q=(0,p.A)(K.ref,D),[Y,q]=r.useState(!1);m&&Y&&q(!1),r.useImperativeHandle(o,(()=>({focusVisible:()=>{q(!0),H.current.focus()}})),[]);const X=K.shouldMount&&!y&&!m;function G(e,t,n=v){return h((r=>(t&&t(r),n||K[e](r),!0)))}r.useEffect((()=>{Y&&b&&!y&&K.pulsate()}),[y,b,Y,K]);const J=G("start",_),Z=G("stop",C),ee=G("stop",E),te=G("stop",O),ne=G("stop",(e=>{Y&&e.preventDefault(),$&&$(e)})),re=G("start",z),ae=G("stop",L),oe=G("stop",M),ie=G("stop",(e=>{d(e.target)||q(!1),k&&k(e)}),!1),le=h((e=>{H.current||(H.current=e.currentTarget),d(e.target)&&(q(!0),P&&P(e)),A&&A(e)})),ue=()=>{const e=H.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},se=h((e=>{b&&!e.repeat&&Y&&" "===e.key&&K.stop(e,(()=>{K.start(e)})),e.target===e.currentTarget&&ue()&&" "===e.key&&e.preventDefault(),T&&T(e),e.target===e.currentTarget&&ue()&&"Enter"===e.key&&!m&&(e.preventDefault(),x&&x(e))})),ce=h((e=>{b&&" "===e.key&&Y&&!e.defaultPrevented&&K.stop(e,(()=>{K.pulsate(e)})),R&&R(e),x&&e.target===e.currentTarget&&ue()&&" "===e.key&&!e.defaultPrevented&&x(e)}));let fe=c;"button"===fe&&(V.href||V.to)&&(fe=S);const de={};"button"===fe?(de.type=void 0===W?"button":W,de.disabled=m):(V.href||V.to||(de.role="button"),m&&(de["aria-disabled"]=m));const pe=(0,p.A)(t,H),he={...n,centerRipple:l,component:c,disabled:m,disableRipple:y,disableTouchRipple:v,focusRipple:b,tabIndex:I,focusVisible:Y},me=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:a}=e,o={root:["root",t&&"disabled",n&&"focusVisible"]},l=(0,i.A)(o,B,a);return n&&r&&(l.root+=` ${r}`),l})(he);return(0,N.jsxs)(U,{as:fe,className:(0,a.A)(me.root,s),ownerState:he,onBlur:ie,onClick:x,onContextMenu:Z,onFocus:le,onKeyDown:se,onKeyUp:ce,onMouseDown:J,onMouseLeave:ne,onMouseUp:te,onDragLeave:ee,onTouchEnd:ae,onTouchMove:oe,onTouchStart:re,ref:pe,tabIndex:m?-1:I,type:W,...de,...V,children:[u,X?(0,N.jsx)(F,{ref:Q,center:l,...j}):null]})}));var H=n(8466);function K(e=[]){return([,t])=>t&&function(e,t=[]){if(!function(e){return"string"==typeof e.main}(e))return!1;for(const n of t)if(!e.hasOwnProperty(n)||"string"!=typeof e[n])return!1;return!0}(t,e)}function Q(e){return(0,D.Ay)("MuiButton",e)}const Y=(0,$.A)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),q=r.createContext({}),X=r.createContext(void 0),G=[{props:{size:"small"},style:{"& > *:nth-of-type(1)":{fontSize:18}}},{props:{size:"medium"},style:{"& > *:nth-of-type(1)":{fontSize:20}}},{props:{size:"large"},style:{"& > *:nth-of-type(1)":{fontSize:22}}}],J=(0,s.Ay)(V,{shouldForwardProp:e=>(0,u.A)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,H.A)(n.color)}`],t[`size${(0,H.A)(n.size)}`],t[`${n.variant}Size${(0,H.A)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((0,c.A)((({theme:e})=>{const t="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],n="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return{...e.typography.button,minWidth:64,padding:"6px 16px",border:0,borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none"},[`&.${Y.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:{variant:"contained"},style:{color:"var(--variant-containedColor)",backgroundColor:"var(--variant-containedBg)",boxShadow:(e.vars||e).shadows[2],"&:hover":{boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2]}},"&:active":{boxShadow:(e.vars||e).shadows[8]},[`&.${Y.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]},[`&.${Y.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}},{props:{variant:"outlined"},style:{padding:"5px 15px",border:"1px solid currentColor",borderColor:"var(--variant-outlinedBorder, currentColor)",backgroundColor:"var(--variant-outlinedBg)",color:"var(--variant-outlinedColor)",[`&.${Y.disabled}`]:{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`}}},{props:{variant:"text"},style:{padding:"6px 8px",color:"var(--variant-textColor)",backgroundColor:"var(--variant-textBg)"}},...Object.entries(e.palette).filter(K()).map((([t])=>({props:{color:t},style:{"--variant-textColor":(e.vars||e).palette[t].main,"--variant-outlinedColor":(e.vars||e).palette[t].main,"--variant-outlinedBorder":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.5)`:(0,l.X4)(e.palette[t].main,.5),"--variant-containedColor":(e.vars||e).palette[t].contrastText,"--variant-containedBg":(e.vars||e).palette[t].main,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":(e.vars||e).palette[t].dark,"--variant-textBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.X4)(e.palette[t].main,e.palette.action.hoverOpacity),"--variant-outlinedBorder":(e.vars||e).palette[t].main,"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.X4)(e.palette[t].main,e.palette.action.hoverOpacity)}}}}))),{props:{color:"inherit"},style:{color:"inherit",borderColor:"currentColor","--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedBg:t,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedHoverBg:n,"--variant-textBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.X4)(e.palette.text.primary,e.palette.action.hoverOpacity),"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.X4)(e.palette.text.primary,e.palette.action.hoverOpacity)}}}},{props:{size:"small",variant:"text"},style:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"text"},style:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"outlined"},style:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"outlined"},style:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"contained"},style:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"contained"},style:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)}},{props:{disableElevation:!0},style:{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${Y.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${Y.disabled}`]:{boxShadow:"none"}}},{props:{fullWidth:!0},style:{width:"100%"}}]}}))),Z=(0,s.Ay)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,H.A)(n.size)}`]]}})({display:"inherit",marginRight:8,marginLeft:-4,variants:[{props:{size:"small"},style:{marginLeft:-2}},...G]}),ee=(0,s.Ay)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,H.A)(n.size)}`]]}})({display:"inherit",marginRight:-4,marginLeft:8,variants:[{props:{size:"small"},style:{marginRight:-2}},...G]}),te=r.forwardRef((function(e,t){const n=r.useContext(q),l=r.useContext(X),u=(0,o.A)(n,e),s=(0,f.b)({props:u,name:"MuiButton"}),{children:c,color:d="primary",component:p="button",className:h,disabled:m=!1,disableElevation:g=!1,disableFocusRipple:y=!1,endIcon:v,focusVisibleClassName:b,fullWidth:w=!1,size:S="medium",startIcon:k,type:x,variant:C="text",...E}=s,A={...s,color:d,component:p,disabled:m,disableElevation:g,disableFocusRipple:y,fullWidth:w,size:S,type:x,variant:C},P=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:a,variant:o,classes:l}=e,u={root:["root",o,`${o}${(0,H.A)(t)}`,`size${(0,H.A)(a)}`,`${o}Size${(0,H.A)(a)}`,`color${(0,H.A)(t)}`,n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["icon","startIcon",`iconSize${(0,H.A)(a)}`],endIcon:["icon","endIcon",`iconSize${(0,H.A)(a)}`]},s=(0,i.A)(u,Q,l);return{...l,...s}})(A),T=k&&(0,N.jsx)(Z,{className:P.startIcon,ownerState:A,children:k}),R=v&&(0,N.jsx)(ee,{className:P.endIcon,ownerState:A,children:v}),_=l||"";return(0,N.jsxs)(J,{ownerState:A,className:(0,a.A)(n.className,P.root,h,_),component:p,disabled:m,focusRipple:!y,focusVisibleClassName:(0,a.A)(P.focusVisible,b),ref:t,type:x,...E,classes:P,children:[T,c,R]})}))},5607:(e,t,n)=>{n.d(t,{b:()=>i});var r=n(6540),a=n(7379);n(4848);const o=r.createContext(void 0);function i(e){return function({props:e,name:t}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?(0,a.A)(o.defaultProps,r):o.styleOverrides||o.variants?r:(0,a.A)(o,r)}({props:e,name:t,theme:{components:r.useContext(o)}})}(e)}},6444:(e,t,n)=>{n.d(t,{A:()=>le});var r=n(6540),a=n(5659),o=n(5498);var i=n(4164);const l=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},u=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t},s=function(e){const{elementType:t,externalSlotProps:n,ownerState:r,skipResolvingSlotProps:a=!1,...s}=e,c=a?{}:function(e,t,n){return"function"==typeof e?e(t,n):e}(n,r),{props:f,internalRef:d}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:a,className:o}=e;if(!t){const e=(0,i.A)(n?.className,o,a?.className,r?.className),t={...n?.style,...a?.style,...r?.style},l={...n,...a,...r};return e.length>0&&(l.className=e),Object.keys(t).length>0&&(l.style=t),{props:l,internalRef:void 0}}const s=l({...a,...r}),c=u(r),f=u(a),d=t(s),p=(0,i.A)(d?.className,n?.className,o,a?.className,r?.className),h={...d?.style,...n?.style,...a?.style,...r?.style},m={...d,...n,...f,...c};return p.length>0&&(m.className=p),Object.keys(h).length>0&&(m.style=h),{props:m,internalRef:d.ref}}({...s,externalSlotProps:c});return function(e,t,n){return void 0===e||"string"==typeof e?t:{...t,ownerState:{...t.ownerState,...n}}}(t,{...f,ref:(0,o.A)(d,c?.ref,e.additionalProps?.ref)},r)};var c=n(9787),f=n(5949);function d(e){return e&&e.ownerDocument||document}function p(e){return parseInt(r.version,10)>=19?e?.props?.ref||null:e?.ref||null}var h=n(4848);function m(e){return e.substring(2).toLowerCase()}function g(e){const{children:t,disableReactTree:n=!1,mouseEvent:a="onClick",onClickAway:i,touchEvent:l="onTouchEnd"}=e,u=r.useRef(!1),s=r.useRef(null),c=r.useRef(!1),g=r.useRef(!1);r.useEffect((()=>(setTimeout((()=>{c.current=!0}),0),()=>{c.current=!1})),[]);const y=(0,o.A)(p(t),s),v=(0,f.A)((e=>{const t=g.current;g.current=!1;const r=d(s.current);if(!c.current||!s.current||"clientX"in e&&function(e,t){return t.documentElement.clientWidth<e.clientX||t.documentElement.clientHeight<e.clientY}(e,r))return;if(u.current)return void(u.current=!1);let a;a=e.composedPath?e.composedPath().includes(s.current):!r.documentElement.contains(e.target)||s.current.contains(e.target),a||!n&&t||i(e)})),b=e=>n=>{g.current=!0;const r=t.props[e];r&&r(n)},w={ref:y};return!1!==l&&(w[l]=b(l)),r.useEffect((()=>{if(!1!==l){const e=m(l),t=d(s.current),n=()=>{u.current=!0};return t.addEventListener(e,v),t.addEventListener("touchmove",n),()=>{t.removeEventListener(e,v),t.removeEventListener("touchmove",n)}}}),[v,l]),!1!==a&&(w[a]=b(a)),r.useEffect((()=>{if(!1!==a){const e=m(a),t=d(s.current);return t.addEventListener(e,v),()=>{t.removeEventListener(e,v)}}}),[v,a]),(0,h.jsx)(r.Fragment,{children:r.cloneElement(t,w)})}var y=n(7552),v=n(6641),b=n(9214);const w=(0,v.A)(),S=function(e=w){return function(e=null){const t=r.useContext(b.T);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)};var k=n(6278),x=n(8312);function C(){const e=S(k.A);return e[x.A]||e}var E=n(9077),A=n(5607),P=n(8466),T=n(8587),R=n(5540),_=n(961);var N=n(7241),$="unmounted",O="exited",L="entering",M="entered",z="exiting",I=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a=O,r.appearStatus=L):a=M:a=t.unmountOnExit||t.mountOnEnter?$:O,r.state={status:a},r.nextCallback=null,r}(0,R.A)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===$?{status:O}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==L&&n!==M&&(t=L):n!==L&&n!==M||(t=z)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===L){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:_.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===O&&this.setState({status:$})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[_.findDOMNode(this),r],o=a[0],i=a[1],l=this.getTimeouts(),u=r?l.appear:l.enter;e||n?(this.props.onEnter(o,i),this.safeSetState({status:L},(function(){t.props.onEntering(o,i),t.onTransitionEnd(u,(function(){t.safeSetState({status:M},(function(){t.props.onEntered(o,i)}))}))}))):this.safeSetState({status:M},(function(){t.props.onEntered(o)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:_.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:z},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:O},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:O},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:_.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=a[0],i=a[1];this.props.addEndListener(o,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===$)return null;var t=this.props,n=t.children,a=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,(0,T.A)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return r.createElement(N.A.Provider,{value:null},"function"==typeof n?n(e,a):r.cloneElement(r.Children.only(n),a))},t}(r.Component);function j(){}I.contextType=N.A,I.propTypes={},I.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:j,onEntering:j,onEntered:j,onExit:j,onExiting:j,onExited:j},I.UNMOUNTED=$,I.EXITED=O,I.ENTERING=L,I.ENTERED=M,I.EXITING=z;const F=I;function D(e,t){const{timeout:n,easing:r,style:a={}}=e;return{duration:a.transitionDuration??("number"==typeof n?n:n[t.mode]||0),easing:a.transitionTimingFunction??("object"==typeof r?r[t.mode]:r),delay:a.transitionDelay}}var B=n(6852);function W(e){return`scale(${e}, ${e**2})`}const U={entering:{opacity:1,transform:W(1)},entered:{opacity:1,transform:"none"}},V="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),H=r.forwardRef((function(e,t){const{addEndListener:n,appear:a=!0,children:o,easing:i,in:l,onEnter:u,onEntered:s,onEntering:f,onExit:d,onExited:m,onExiting:g,style:y,timeout:v="auto",TransitionComponent:b=F,...w}=e,S=(0,c.A)(),k=r.useRef(),x=C(),E=r.useRef(null),A=(0,B.A)(E,p(o),t),P=e=>t=>{if(e){const n=E.current;void 0===t?e(n):e(n,t)}},T=P(f),R=P(((e,t)=>{(e=>{e.scrollTop})(e);const{duration:n,delay:r,easing:a}=D({style:y,timeout:v,easing:i},{mode:"enter"});let o;"auto"===v?(o=x.transitions.getAutoHeightDuration(e.clientHeight),k.current=o):o=n,e.style.transition=[x.transitions.create("opacity",{duration:o,delay:r}),x.transitions.create("transform",{duration:V?o:.666*o,delay:r,easing:a})].join(","),u&&u(e,t)})),_=P(s),N=P(g),$=P((e=>{const{duration:t,delay:n,easing:r}=D({style:y,timeout:v,easing:i},{mode:"exit"});let a;"auto"===v?(a=x.transitions.getAutoHeightDuration(e.clientHeight),k.current=a):a=t,e.style.transition=[x.transitions.create("opacity",{duration:a,delay:n}),x.transitions.create("transform",{duration:V?a:.666*a,delay:V?n:n||.333*a,easing:r})].join(","),e.style.opacity=0,e.style.transform=W(.75),d&&d(e)})),O=P(m);return(0,h.jsx)(b,{appear:a,in:l,nodeRef:E,onEnter:R,onEntered:_,onEntering:T,onExit:$,onExited:O,onExiting:N,addEndListener:e=>{"auto"===v&&S.start(k.current||0,e),n&&n(E.current,e)},timeout:"auto"===v?null:v,...w,children:(e,t)=>r.cloneElement(o,{style:{opacity:0,transform:W(.75),visibility:"exited"!==e||l?void 0:"hidden",...U[e],...y,...o.props.style},ref:A,...t})})}));H&&(H.muiSupportAuto=!0);const K=H;var Q=n(3139),Y=n(8783),q=n(8413),X=n(2288);function G(e){return(0,X.Ay)("MuiPaper",e)}(0,q.A)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const J=(0,y.Ay)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((0,E.A)((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow"),variants:[{props:({ownerState:e})=>!e.square,style:{borderRadius:e.shape.borderRadius}},{props:{variant:"outlined"},style:{border:`1px solid ${(e.vars||e).palette.divider}`}},{props:{variant:"elevation"},style:{boxShadow:"var(--Paper-shadow)",backgroundImage:"var(--Paper-overlay)"}}]})))),Z=r.forwardRef((function(e,t){const n=(0,A.b)({props:e,name:"MuiPaper"}),r=C(),{className:o,component:l="div",elevation:u=1,square:s=!1,variant:c="elevation",...f}=n,d={...n,component:l,elevation:u,square:s,variant:c},p=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,i={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,a.A)(i,G,o)})(d);return(0,h.jsx)(J,{as:l,ownerState:d,className:(0,i.A)(p.root,o),ref:t,...f,style:{..."elevation"===c&&{"--Paper-shadow":(r.vars||r).shadows[u],...r.vars&&{"--Paper-overlay":r.vars.overlays?.[u]},...!r.vars&&"dark"===r.palette.mode&&{"--Paper-overlay":`linear-gradient(${(0,Q.X4)("#fff",(0,Y.A)(u))}, ${(0,Q.X4)("#fff",(0,Y.A)(u))})`}},...f.style}})}));function ee(e){return(0,X.Ay)("MuiSnackbarContent",e)}(0,q.A)("MuiSnackbarContent",["root","message","action"]);const te=(0,y.Ay)(Z,{name:"MuiSnackbarContent",slot:"Root",overridesResolver:(e,t)=>t.root})((0,E.A)((({theme:e})=>{const t="light"===e.palette.mode?.8:.98,n=(0,Q.tL)(e.palette.background.default,t);return{...e.typography.body2,color:e.vars?e.vars.palette.SnackbarContent.color:e.palette.getContrastText(n),backgroundColor:e.vars?e.vars.palette.SnackbarContent.bg:n,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,flexGrow:1,[e.breakpoints.up("sm")]:{flexGrow:"initial",minWidth:288}}}))),ne=(0,y.Ay)("div",{name:"MuiSnackbarContent",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0"}),re=(0,y.Ay)("div",{name:"MuiSnackbarContent",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}),ae=r.forwardRef((function(e,t){const n=(0,A.b)({props:e,name:"MuiSnackbarContent"}),{action:r,className:o,message:l,role:u="alert",...s}=n,c=n,f=(e=>{const{classes:t}=e;return(0,a.A)({root:["root"],action:["action"],message:["message"]},ee,t)})(c);return(0,h.jsxs)(te,{role:u,square:!0,elevation:6,className:(0,i.A)(f.root,o),ownerState:c,ref:t,...s,children:[(0,h.jsx)(ne,{className:f.message,ownerState:c,children:l}),r?(0,h.jsx)(re,{className:f.action,ownerState:c,children:r}):null]})}));function oe(e){return(0,X.Ay)("MuiSnackbar",e)}(0,q.A)("MuiSnackbar",["root","anchorOriginTopCenter","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft"]);const ie=(0,y.Ay)("div",{name:"MuiSnackbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`anchorOrigin${(0,P.A)(n.anchorOrigin.vertical)}${(0,P.A)(n.anchorOrigin.horizontal)}`]]}})((0,E.A)((({theme:e})=>({zIndex:(e.vars||e).zIndex.snackbar,position:"fixed",display:"flex",left:8,right:8,justifyContent:"center",alignItems:"center",variants:[{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical,style:{top:8,[e.breakpoints.up("sm")]:{top:24}}},{props:({ownerState:e})=>"top"!==e.anchorOrigin.vertical,style:{bottom:8,[e.breakpoints.up("sm")]:{bottom:24}}},{props:({ownerState:e})=>"left"===e.anchorOrigin.horizontal,style:{justifyContent:"flex-start",[e.breakpoints.up("sm")]:{left:24,right:"auto"}}},{props:({ownerState:e})=>"right"===e.anchorOrigin.horizontal,style:{justifyContent:"flex-end",[e.breakpoints.up("sm")]:{right:24,left:"auto"}}},{props:({ownerState:e})=>"center"===e.anchorOrigin.horizontal,style:{[e.breakpoints.up("sm")]:{left:"50%",right:"auto",transform:"translateX(-50%)"}}}]})))),le=r.forwardRef((function(e,t){const n=(0,A.b)({props:e,name:"MuiSnackbar"}),o=C(),i={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},{action:u,anchorOrigin:{vertical:d,horizontal:p}={vertical:"bottom",horizontal:"left"},autoHideDuration:m=null,children:y,className:v,ClickAwayListenerProps:b,ContentProps:w,disableWindowBlurListener:S=!1,message:k,onBlur:x,onClose:E,onFocus:T,onMouseEnter:R,onMouseLeave:_,open:N,resumeHideDuration:$,TransitionComponent:O=K,transitionDuration:L=i,TransitionProps:{onEnter:M,onExited:z,...I}={},...j}=n,F={...n,anchorOrigin:{vertical:d,horizontal:p},autoHideDuration:m,disableWindowBlurListener:S,TransitionComponent:O,transitionDuration:L},D=(e=>{const{classes:t,anchorOrigin:n}=e,r={root:["root",`anchorOrigin${(0,P.A)(n.vertical)}${(0,P.A)(n.horizontal)}`]};return(0,a.A)(r,oe,t)})(F),{getRootProps:B,onClickAway:W}=function(e={}){const{autoHideDuration:t=null,disableWindowBlurListener:n=!1,onClose:a,open:o,resumeHideDuration:i}=e,u=(0,c.A)();r.useEffect((()=>{if(o)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){e.defaultPrevented||"Escape"===e.key&&a?.(e,"escapeKeyDown")}}),[o,a]);const s=(0,f.A)(((e,t)=>{a?.(e,t)})),d=(0,f.A)((e=>{a&&null!=e&&u.start(e,(()=>{s(null,"timeout")}))}));r.useEffect((()=>(o&&d(t),u.clear)),[o,t,d,u]);const p=u.clear,h=r.useCallback((()=>{null!=t&&d(null!=i?i:.5*t)}),[t,i,d]),m=e=>t=>{const n=e.onFocus;n?.(t),p()},g=e=>t=>{const n=e.onMouseEnter;n?.(t),p()},y=e=>t=>{const n=e.onMouseLeave;n?.(t),h()};return r.useEffect((()=>{if(!n&&o)return window.addEventListener("focus",h),window.addEventListener("blur",p),()=>{window.removeEventListener("focus",h),window.removeEventListener("blur",p)}}),[n,o,h,p]),{getRootProps:(t={})=>{const n={...l(e),...l(t)};return{role:"presentation",...t,...n,onBlur:(r=n,e=>{const t=r.onBlur;t?.(e),h()}),onFocus:m(n),onMouseEnter:g(n),onMouseLeave:y(n)};var r},onClickAway:e=>{a?.(e,"clickaway")}}}({...F}),[U,V]=r.useState(!0),H=s({elementType:ie,getSlotProps:B,externalForwardedProps:j,ownerState:F,additionalProps:{ref:t},className:[D.root,v]});return!N&&U?null:(0,h.jsx)(g,{onClickAway:W,...b,children:(0,h.jsx)(ie,{...H,children:(0,h.jsx)(O,{appear:!0,in:N,timeout:L,direction:"top"===d?"down":"up",onEnter:(e,t)=>{V(!1),M&&M(e,t)},onExited:e=>{V(!0),z&&z(e)},...I,children:y||(0,h.jsx)(ae,{message:k,action:u,...w})})})})}))},6278:(e,t,n)=>{n.d(t,{A:()=>Pe});var r=n(9453),a=n(1317),o=n(3139);const i={black:"#000",white:"#fff"},l={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},u="#f3e5f5",s="#ce93d8",c="#ba68c8",f="#ab47bc",d="#9c27b0",p="#7b1fa2",h="#e57373",m="#ef5350",g="#f44336",y="#d32f2f",v="#c62828",b="#ffb74d",w="#ffa726",S="#ff9800",k="#f57c00",x="#e65100",C="#e3f2fd",E="#90caf9",A="#42a5f5",P="#1976d2",T="#1565c0",R="#4fc3f7",_="#29b6f6",N="#03a9f4",$="#0288d1",O="#01579b",L="#81c784",M="#66bb6a",z="#4caf50",I="#388e3c",j="#2e7d32",F="#1b5e20";function D(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:i.white,default:i.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const B=D();function W(){return{text:{primary:i.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:i.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const U=W();function V(e,t,n,r){const a=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,o.a)(e.main,a):"dark"===t&&(e.dark=(0,o.e$)(e.main,i)))}function H(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:H=.2,...K}=e,Q=e.primary||function(e="light"){return"dark"===e?{main:E,light:C,dark:A}:{main:P,light:A,dark:T}}(t),Y=e.secondary||function(e="light"){return"dark"===e?{main:s,light:u,dark:f}:{main:d,light:c,dark:p}}(t),q=e.error||function(e="light"){return"dark"===e?{main:g,light:h,dark:y}:{main:y,light:m,dark:v}}(t),X=e.info||function(e="light"){return"dark"===e?{main:_,light:R,dark:$}:{main:$,light:N,dark:O}}(t),G=e.success||function(e="light"){return"dark"===e?{main:M,light:L,dark:I}:{main:j,light:z,dark:F}}(t),J=e.warning||function(e="light"){return"dark"===e?{main:w,light:b,dark:k}:{main:"#ed6c02",light:S,dark:x}}(t);function Z(e){return(0,o.eM)(e,U.text.primary)>=n?U.text.primary:B.text.primary}const ee=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:o=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,r.A)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,r.A)(12,t?` (${t})`:"",JSON.stringify(e.main)));return V(e,"light",a,H),V(e,"dark",o,H),e.contrastText||(e.contrastText=Z(e.main)),e};let te;return"light"===t?te=D():"dark"===t&&(te=W()),(0,a.A)({common:{...i},mode:t,primary:ee({color:Q,name:"primary"}),secondary:ee({color:Y,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:ee({color:q,name:"error"}),warning:ee({color:J,name:"warning"}),info:ee({color:X,name:"info"}),success:ee({color:G,name:"success"}),grey:l,contrastThreshold:n,getContrastText:Z,augmentColor:ee,tonalOffset:H,...te},K)}function K(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}var Q=n(6955),Y=n(4580);function q(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}const X=(e,t,n,r=[])=>{let a=e;t.forEach(((e,o)=>{o===t.length-1?Array.isArray(a)?a[Number(e)]=n:a&&"object"==typeof a&&(a[e]=n):a&&"object"==typeof a&&(a[e]||(a[e]=r.includes(e)?[]:{}),a=a[e])}))};function G(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},a={},o={},i={};var l,u;return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,u=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(a,{[r]:u}),X(o,e,`var(${r})`,l),X(i,e,`var(${r}, ${u})`,l)}},u=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,a])=>{(!u||u&&!u([...n,t]))&&null!=a&&("object"==typeof a&&Object.keys(a).length>0?e(a,[...n,t],Array.isArray(a)?[...r,t]:r):l([...n,t],a,r))}))}(e),{css:a,vars:o,varsWithDefaults:i}}var J=n(8348),Z=n(3571),ee=n(6641);const te={textTransform:"uppercase"},ne='"Roboto", "Helvetica", "Arial", sans-serif';function re(e,t){const{fontFamily:n=ne,fontSize:r=14,fontWeightLight:o=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:u=700,htmlFontSize:s=16,allVariants:c,pxToRem:f,...d}="function"==typeof t?t(e):t,p=r/14,h=f||(e=>e/s*p+"rem"),m=(e,t,r,a,o)=>{return{fontFamily:n,fontWeight:e,fontSize:h(t),lineHeight:r,...n===ne?{letterSpacing:(i=a/t,Math.round(1e5*i)/1e5+"em")}:{},...o,...c};var i},g={h1:m(o,96,1.167,-1.5),h2:m(o,60,1.2,-.5),h3:m(i,48,1.167,0),h4:m(i,34,1.235,.25),h5:m(i,24,1.334,0),h6:m(l,20,1.6,.15),subtitle1:m(i,16,1.75,.15),subtitle2:m(l,14,1.57,.1),body1:m(i,16,1.5,.15),body2:m(i,14,1.43,.15),button:m(l,14,1.75,.4,te),caption:m(i,12,1.66,.4),overline:m(i,12,2.66,1,te),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,a.A)({htmlFontSize:s,pxToRem:h,fontFamily:n,fontSize:r,fontWeightLight:o,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:u,...g},d,{clone:!1})}function ae(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const oe=["none",ae(0,2,1,-1,0,1,1,0,0,1,3,0),ae(0,3,1,-2,0,2,2,0,0,1,5,0),ae(0,3,3,-2,0,3,4,0,0,1,8,0),ae(0,2,4,-1,0,4,5,0,0,1,10,0),ae(0,3,5,-1,0,5,8,0,0,1,14,0),ae(0,3,5,-1,0,6,10,0,0,1,18,0),ae(0,4,5,-2,0,7,10,1,0,2,16,1),ae(0,5,5,-3,0,8,10,1,0,3,14,2),ae(0,5,6,-3,0,9,12,1,0,3,16,2),ae(0,6,6,-3,0,10,14,1,0,4,18,3),ae(0,6,7,-4,0,11,15,1,0,4,20,3),ae(0,7,8,-4,0,12,17,2,0,5,22,4),ae(0,7,8,-4,0,13,19,2,0,5,24,4),ae(0,7,9,-4,0,14,21,2,0,5,26,4),ae(0,8,9,-5,0,15,22,2,0,6,28,5),ae(0,8,10,-5,0,16,24,2,0,6,30,5),ae(0,8,11,-5,0,17,26,2,0,6,32,5),ae(0,9,11,-5,0,18,28,2,0,7,34,6),ae(0,9,12,-6,0,19,29,2,0,7,36,6),ae(0,10,13,-6,0,20,31,3,0,8,38,7),ae(0,10,13,-6,0,21,33,3,0,8,40,7),ae(0,10,14,-6,0,22,35,3,0,8,42,7),ae(0,11,14,-7,0,23,36,3,0,9,44,8),ae(0,11,15,-7,0,24,38,3,0,9,46,8)],ie={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},le={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function ue(e){return`${Math.round(e)}ms`}function se(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function ce(e){const t={...ie,...e.easing},n={...le,...e.duration};return{getAutoHeightDuration:se,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:o=t.easeInOut,delay:i=0,...l}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:ue(a)} ${o} ${"string"==typeof i?i:ue(i)}`)).join(",")},...e,easing:t,duration:n}}const fe={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function de(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let o=0;o<n.length;o++){const[i,l]=n[o];r=l,!(0,a.Q)(r)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||i.startsWith("unstable_")?delete t[i]:(0,a.Q)(l)&&(t[i]={...l},e(t[i]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const pe=function(e={},...t){const{breakpoints:n,mixins:o={},spacing:i,palette:l={},transitions:u={},typography:s={},shape:c,...f}=e;if(e.vars)throw new Error((0,r.A)(20));const d=H(l),p=(0,ee.A)(e);let h=(0,a.A)(p,{mixins:(m=p.breakpoints,g=o,{toolbar:{minHeight:56,[m.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[m.up("sm")]:{minHeight:64}},...g}),palette:d,shadows:oe.slice(),typography:re(d,s),transitions:ce(u),zIndex:{...fe}});var m,g;return h=(0,a.A)(h,f),h=t.reduce(((e,t)=>(0,a.A)(e,t)),h),h.unstable_sxConfig={...J.A,...f?.unstable_sxConfig},h.unstable_sx=function(e){return(0,Z.A)({sx:e,theme:this})},h.toRuntimeSource=de,h};var he=n(8783);const me=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=(0,he.A)(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function ge(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function ye(e){return"dark"===e?me:[]}function ve(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const be=e=>(t,n)=>{const r=e.rootSelector||":root",a=e.colorSchemeSelector;let o=a;if("class"===a&&(o=".%s"),"data"===a&&(o="[data-%s]"),a?.startsWith("data-")&&!a.includes("%s")&&(o=`[${a}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const a={};return(i=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${i?`${i}-`:""}overlays-${t}`)),`--${i?`${i}-`:""}palette-AppBar-darkBg`,`--${i?`${i}-`:""}palette-AppBar-darkColor`]).forEach((e=>{a[e]=n[e],delete n[e]})),"media"===o?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:a}}:o?{[o.replace("%s",t)]:a,[`${r}, ${o.replace("%s",t)}`]:n}:{[r]:{...n,...a}}}if(o&&"media"!==o)return`${r}, ${o.replace("%s",String(t))}`}else if(t){if("media"===o)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(o)return o.replace("%s",String(t))}var i;return r};function we(e,t,n){!e[t]&&n&&(e[t]=n)}function Se(e){return e&&e.startsWith("hsl")?(0,o.YL)(e):e}function ke(e,t){`${t}Channel`in e||(e[`${t}Channel`]=(0,o.Me)(Se(e[t]),`MUI: Can't create \`palette.${t}Channel\` because \`palette.${t}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\nTo suppress this warning, you need to explicitly provide the \`palette.${t}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`))}const xe=e=>{try{return e()}catch(e){}};function Ce(e,t,n,r){if(!t)return;t=!0===t?{}:t;const a="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...a}=e,o=H(t);return{palette:o,opacity:{...ge(o.mode),...n},overlays:r||ye(o.mode),...a}}({...t,palette:{mode:a,...t?.palette}}));const{palette:o,...i}=pe({...n,palette:{mode:a,...t?.palette}});return e[r]={...t,palette:o,opacity:{...ge(a),...t?.opacity},overlays:t?.overlays||ye(a)},i}function Ee(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:i,disableCssColorScheme:l=!1,cssVarPrefix:u="mui",shouldSkipGeneratingVar:s=ve,colorSchemeSelector:c=(n.light&&n.dark?"media":void 0),rootSelector:f=":root",...d}=e,p=Object.keys(n)[0],h=i||(n.light&&"light"!==p?"light":p),m=((e="mui")=>K(e))(u),{[h]:g,light:y,dark:v,...b}=n,w={...b};let S=g;if(("dark"===h&&!("dark"in n)||"light"===h&&!("light"in n))&&(S=!0),!S)throw new Error((0,r.A)(21,h));const k=Ce(w,S,d,h);y&&!w.light&&Ce(w,y,void 0,"light"),v&&!w.dark&&Ce(w,v,void 0,"dark");let x={defaultColorScheme:h,...k,cssVarPrefix:u,colorSchemeSelector:c,rootSelector:f,getCssVar:m,colorSchemes:w,font:{...q(k.typography),...k.font},spacing:(C=d.spacing,"number"==typeof C?`${C}px`:"string"==typeof C||"function"==typeof C||Array.isArray(C)?C:"8px")};var C;Object.keys(x.colorSchemes).forEach((e=>{const t=x.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],a=n[2];return m(e,t[r][a])};var r;if("light"===t.mode&&(we(t.common,"background","#fff"),we(t.common,"onBackground","#000")),"dark"===t.mode&&(we(t.common,"background","#000"),we(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){we(t.Alert,"errorColor",(0,o.Nd)(t.error.light,.6)),we(t.Alert,"infoColor",(0,o.Nd)(t.info.light,.6)),we(t.Alert,"successColor",(0,o.Nd)(t.success.light,.6)),we(t.Alert,"warningColor",(0,o.Nd)(t.warning.light,.6)),we(t.Alert,"errorFilledBg",n("palette-error-main")),we(t.Alert,"infoFilledBg",n("palette-info-main")),we(t.Alert,"successFilledBg",n("palette-success-main")),we(t.Alert,"warningFilledBg",n("palette-warning-main")),we(t.Alert,"errorFilledColor",xe((()=>t.getContrastText(t.error.main)))),we(t.Alert,"infoFilledColor",xe((()=>t.getContrastText(t.info.main)))),we(t.Alert,"successFilledColor",xe((()=>t.getContrastText(t.success.main)))),we(t.Alert,"warningFilledColor",xe((()=>t.getContrastText(t.warning.main)))),we(t.Alert,"errorStandardBg",(0,o.j4)(t.error.light,.9)),we(t.Alert,"infoStandardBg",(0,o.j4)(t.info.light,.9)),we(t.Alert,"successStandardBg",(0,o.j4)(t.success.light,.9)),we(t.Alert,"warningStandardBg",(0,o.j4)(t.warning.light,.9)),we(t.Alert,"errorIconColor",n("palette-error-main")),we(t.Alert,"infoIconColor",n("palette-info-main")),we(t.Alert,"successIconColor",n("palette-success-main")),we(t.Alert,"warningIconColor",n("palette-warning-main")),we(t.AppBar,"defaultBg",n("palette-grey-100")),we(t.Avatar,"defaultBg",n("palette-grey-400")),we(t.Button,"inheritContainedBg",n("palette-grey-300")),we(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),we(t.Chip,"defaultBorder",n("palette-grey-400")),we(t.Chip,"defaultAvatarColor",n("palette-grey-700")),we(t.Chip,"defaultIconColor",n("palette-grey-700")),we(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),we(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),we(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),we(t.LinearProgress,"primaryBg",(0,o.j4)(t.primary.main,.62)),we(t.LinearProgress,"secondaryBg",(0,o.j4)(t.secondary.main,.62)),we(t.LinearProgress,"errorBg",(0,o.j4)(t.error.main,.62)),we(t.LinearProgress,"infoBg",(0,o.j4)(t.info.main,.62)),we(t.LinearProgress,"successBg",(0,o.j4)(t.success.main,.62)),we(t.LinearProgress,"warningBg",(0,o.j4)(t.warning.main,.62)),we(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),we(t.Slider,"primaryTrack",(0,o.j4)(t.primary.main,.62)),we(t.Slider,"secondaryTrack",(0,o.j4)(t.secondary.main,.62)),we(t.Slider,"errorTrack",(0,o.j4)(t.error.main,.62)),we(t.Slider,"infoTrack",(0,o.j4)(t.info.main,.62)),we(t.Slider,"successTrack",(0,o.j4)(t.success.main,.62)),we(t.Slider,"warningTrack",(0,o.j4)(t.warning.main,.62));const e=(0,o.Y9)(t.background.default,.8);we(t.SnackbarContent,"bg",e),we(t.SnackbarContent,"color",xe((()=>t.getContrastText(e)))),we(t.SpeedDialAction,"fabHoverBg",(0,o.Y9)(t.background.paper,.15)),we(t.StepConnector,"border",n("palette-grey-400")),we(t.StepContent,"border",n("palette-grey-400")),we(t.Switch,"defaultColor",n("palette-common-white")),we(t.Switch,"defaultDisabledColor",n("palette-grey-100")),we(t.Switch,"primaryDisabledColor",(0,o.j4)(t.primary.main,.62)),we(t.Switch,"secondaryDisabledColor",(0,o.j4)(t.secondary.main,.62)),we(t.Switch,"errorDisabledColor",(0,o.j4)(t.error.main,.62)),we(t.Switch,"infoDisabledColor",(0,o.j4)(t.info.main,.62)),we(t.Switch,"successDisabledColor",(0,o.j4)(t.success.main,.62)),we(t.Switch,"warningDisabledColor",(0,o.j4)(t.warning.main,.62)),we(t.TableCell,"border",(0,o.j4)((0,o.Cg)(t.divider,1),.88)),we(t.Tooltip,"bg",(0,o.Cg)(t.grey[700],.92))}if("dark"===t.mode){we(t.Alert,"errorColor",(0,o.j4)(t.error.light,.6)),we(t.Alert,"infoColor",(0,o.j4)(t.info.light,.6)),we(t.Alert,"successColor",(0,o.j4)(t.success.light,.6)),we(t.Alert,"warningColor",(0,o.j4)(t.warning.light,.6)),we(t.Alert,"errorFilledBg",n("palette-error-dark")),we(t.Alert,"infoFilledBg",n("palette-info-dark")),we(t.Alert,"successFilledBg",n("palette-success-dark")),we(t.Alert,"warningFilledBg",n("palette-warning-dark")),we(t.Alert,"errorFilledColor",xe((()=>t.getContrastText(t.error.dark)))),we(t.Alert,"infoFilledColor",xe((()=>t.getContrastText(t.info.dark)))),we(t.Alert,"successFilledColor",xe((()=>t.getContrastText(t.success.dark)))),we(t.Alert,"warningFilledColor",xe((()=>t.getContrastText(t.warning.dark)))),we(t.Alert,"errorStandardBg",(0,o.Nd)(t.error.light,.9)),we(t.Alert,"infoStandardBg",(0,o.Nd)(t.info.light,.9)),we(t.Alert,"successStandardBg",(0,o.Nd)(t.success.light,.9)),we(t.Alert,"warningStandardBg",(0,o.Nd)(t.warning.light,.9)),we(t.Alert,"errorIconColor",n("palette-error-main")),we(t.Alert,"infoIconColor",n("palette-info-main")),we(t.Alert,"successIconColor",n("palette-success-main")),we(t.Alert,"warningIconColor",n("palette-warning-main")),we(t.AppBar,"defaultBg",n("palette-grey-900")),we(t.AppBar,"darkBg",n("palette-background-paper")),we(t.AppBar,"darkColor",n("palette-text-primary")),we(t.Avatar,"defaultBg",n("palette-grey-600")),we(t.Button,"inheritContainedBg",n("palette-grey-800")),we(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),we(t.Chip,"defaultBorder",n("palette-grey-700")),we(t.Chip,"defaultAvatarColor",n("palette-grey-300")),we(t.Chip,"defaultIconColor",n("palette-grey-300")),we(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),we(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),we(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),we(t.LinearProgress,"primaryBg",(0,o.Nd)(t.primary.main,.5)),we(t.LinearProgress,"secondaryBg",(0,o.Nd)(t.secondary.main,.5)),we(t.LinearProgress,"errorBg",(0,o.Nd)(t.error.main,.5)),we(t.LinearProgress,"infoBg",(0,o.Nd)(t.info.main,.5)),we(t.LinearProgress,"successBg",(0,o.Nd)(t.success.main,.5)),we(t.LinearProgress,"warningBg",(0,o.Nd)(t.warning.main,.5)),we(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),we(t.Slider,"primaryTrack",(0,o.Nd)(t.primary.main,.5)),we(t.Slider,"secondaryTrack",(0,o.Nd)(t.secondary.main,.5)),we(t.Slider,"errorTrack",(0,o.Nd)(t.error.main,.5)),we(t.Slider,"infoTrack",(0,o.Nd)(t.info.main,.5)),we(t.Slider,"successTrack",(0,o.Nd)(t.success.main,.5)),we(t.Slider,"warningTrack",(0,o.Nd)(t.warning.main,.5));const e=(0,o.Y9)(t.background.default,.98);we(t.SnackbarContent,"bg",e),we(t.SnackbarContent,"color",xe((()=>t.getContrastText(e)))),we(t.SpeedDialAction,"fabHoverBg",(0,o.Y9)(t.background.paper,.15)),we(t.StepConnector,"border",n("palette-grey-600")),we(t.StepContent,"border",n("palette-grey-600")),we(t.Switch,"defaultColor",n("palette-grey-300")),we(t.Switch,"defaultDisabledColor",n("palette-grey-600")),we(t.Switch,"primaryDisabledColor",(0,o.Nd)(t.primary.main,.55)),we(t.Switch,"secondaryDisabledColor",(0,o.Nd)(t.secondary.main,.55)),we(t.Switch,"errorDisabledColor",(0,o.Nd)(t.error.main,.55)),we(t.Switch,"infoDisabledColor",(0,o.Nd)(t.info.main,.55)),we(t.Switch,"successDisabledColor",(0,o.Nd)(t.success.main,.55)),we(t.Switch,"warningDisabledColor",(0,o.Nd)(t.warning.main,.55)),we(t.TableCell,"border",(0,o.Nd)((0,o.Cg)(t.divider,1),.68)),we(t.Tooltip,"bg",(0,o.Cg)(t.grey[700],.92))}ke(t.background,"default"),ke(t.background,"paper"),ke(t.common,"background"),ke(t.common,"onBackground"),ke(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];n&&"object"==typeof n&&(n.main&&we(t[e],"mainChannel",(0,o.Me)(Se(n.main))),n.light&&we(t[e],"lightChannel",(0,o.Me)(Se(n.light))),n.dark&&we(t[e],"darkChannel",(0,o.Me)(Se(n.dark))),n.contrastText&&we(t[e],"contrastTextChannel",(0,o.Me)(Se(n.contrastText))),"text"===e&&(ke(t[e],"primary"),ke(t[e],"secondary")),"action"===e&&(n.active&&ke(t[e],"active"),n.selected&&ke(t[e],"selected")))}))})),x=t.reduce(((e,t)=>(0,a.A)(e,t)),x);const E={prefix:u,disableCssColorScheme:l,shouldSkipGeneratingVar:s,getSelector:be(x)},{vars:A,generateThemeVars:P,generateStyleSheets:T}=function(e,t={}){const{getSelector:n=y,disableCssColorScheme:r,colorSchemeSelector:o}=t,{colorSchemes:i={},components:l,defaultColorScheme:u="light",...s}=e,{vars:c,css:f,varsWithDefaults:d}=G(s,t);let p=d;const h={},{[u]:m,...g}=i;if(Object.entries(g||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:i}=G(n,t);p=(0,a.A)(p,i),h[e]={css:o,vars:r}})),m){const{css:e,vars:n,varsWithDefaults:r}=G(m,t);p=(0,a.A)(p,r),h[u]={css:e,vars:n}}function y(t,n){let r=o;if("class"===o&&(r=".%s"),"data"===o&&(r="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(r=`[${o}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=i[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:p,generateThemeVars:()=>{let e={...c};return Object.entries(h).forEach((([,{vars:t}])=>{e=(0,a.A)(e,t)})),e},generateStyleSheets:()=>{const t=[],a=e.defaultColorScheme||"light";function o(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}o(n(void 0,{...f}),f);const{[a]:l,...u}=h;if(l){const{css:e}=l,t=i[a]?.palette?.mode,u=!r&&t?{colorScheme:t,...e}:{...e};o(n(a,{...u}),u)}return Object.entries(u).forEach((([e,{css:t}])=>{const a=i[e]?.palette?.mode,l=!r&&a?{colorScheme:a,...t}:{...t};o(n(e,{...l}),l)})),t}}}(x,E);return x.vars=A,Object.entries(x.colorSchemes[x.defaultColorScheme]).forEach((([e,t])=>{x[e]=t})),x.generateThemeVars=P,x.generateStyleSheets=T,x.generateSpacing=function(){return(0,Q.A)(d.spacing,(0,Y.LX)(this))},x.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(c),x.spacing=x.generateSpacing(),x.shouldSkipGeneratingVar=s,x.unstable_sxConfig={...J.A,...d?.unstable_sxConfig},x.unstable_sx=function(e){return(0,Z.A)({sx:e,theme:this})},x.toRuntimeSource=de,x}function Ae(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:H({...!0===n?{}:n.palette,mode:t})})}const Pe=function(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:a=(n?void 0:{light:!0}),defaultColorScheme:o=n?.mode,...i}=e,l=o||"light",u=a?.[l],s={...a,...n?{[l]:{..."boolean"!=typeof u&&u,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return pe(e,...t);let r=n;"palette"in e||s[l]&&(!0!==s[l]?r=s[l].palette:"dark"===l&&(r={mode:"dark"}));const a=pe({...e,palette:r},...t);return a.defaultColorScheme=l,a.colorSchemes=s,"light"===a.palette.mode&&(a.colorSchemes.light={...!0!==s.light&&s.light,palette:a.palette},Ae(a,"dark",s.dark)),"dark"===a.palette.mode&&(a.colorSchemes.dark={...!0!==s.dark&&s.dark,palette:a.palette},Ae(a,"light",s.light)),a}return n||"light"in s||"light"!==l||(s.light=!0),Ee({...i,colorSchemes:s,defaultColorScheme:l,..."boolean"!=typeof r&&r},...t)}()},8783:(e,t,n)=>{function r(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}n.d(t,{A:()=>r})},8312:(e,t,n)=>{n.d(t,{A:()=>r});const r="$$material"},3431:(e,t,n)=>{n.d(t,{A:()=>r});const r=e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e},7552:(e,t,n)=>{n.d(t,{Ay:()=>v});var r=n(4317),a=n(1317),o=n(6641),i=n(3571),l=n(7118);const u=(0,o.A)();function s(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function c(e){return e?(t,n)=>n[e]:null}function f(e,t){const n="function"==typeof t?t(e):t;if(Array.isArray(n))return n.flatMap((t=>f(e,t)));if(Array.isArray(n?.variants)){let t;if(n.isProcessed)t=n.style;else{const{variants:e,...r}=n;t=r}return d(e,n.variants,[t])}return n?.isProcessed?n.style:n}function d(e,t,n=[]){let r;e:for(let a=0;a<t.length;a+=1){const o=t[a];if("function"==typeof o.props){if(r??={...e,...e.ownerState,ownerState:e.ownerState},!o.props(r))continue}else for(const t in o.props)if(e[t]!==o.props[t]&&e.ownerState?.[t]!==o.props[t])continue e;"function"==typeof o.style?(r??={...e,...e.ownerState,ownerState:e.ownerState},n.push(o.style(r))):n.push(o.style)}return n}function p(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}var h=n(6278),m=n(8312),g=n(3431);const y=function(e={}){const{themeId:t,defaultTheme:n=u,rootShouldForwardProp:o=s,slotShouldForwardProp:h=s}=e;function m(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{(0,r.HX)(e,(e=>e.filter((e=>e!==i.A))));const{name:n,slot:u,skipVariantsResolver:g,skipSx:y,overridesResolver:v=c(p(u)),...b}=t,w=void 0!==g?g:u&&"Root"!==u&&"root"!==u||!1,S=y||!1;let k=s;"Root"===u||"root"===u?k=o:u?k=h:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(k=void 0);const x=(0,r.Ay)(e,{shouldForwardProp:k,label:void 0,...b}),C=e=>{if("function"==typeof e&&e.__emotion_real!==e)return function(t){return f(t,e)};if((0,a.Q)(e)){const t=(0,l.A)(e);return t.variants?function(e){return f(e,t)}:t.style}return e},E=(...t)=>{const r=[],a=t.map(C),o=[];if(r.push(m),n&&v&&o.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const a={};for(const t in r)a[t]=f(e,r[t]);return v(e,a)})),n&&!w&&o.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?d(e,r):null})),S||o.push(i.A),Array.isArray(a[0])){const e=a.shift(),t=new Array(r.length).fill(""),n=new Array(o.length).fill("");let i;i=[...t,...e,...n],i.raw=[...t,...e.raw,...n],r.unshift(i)}const l=[...r,...a,...o],u=x(...l);return e.muiName&&(u.muiName=e.muiName),u};return x.withConfig&&(E.withConfig=x.withConfig),E}}({themeId:m.A,defaultTheme:h.A,rootShouldForwardProp:g.A}),v=y},8466:(e,t,n)=>{n.d(t,{A:()=>r});const r=n(3967).A},9077:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(7118);const a={theme:void 0},o=function(e){let t,n;return function(o){let i=t;return void 0!==i&&o.theme===n||(a.theme=o.theme,i=(0,r.A)(e(a)),t=i,n=o.theme),i}}},6852:(e,t,n)=>{n.d(t,{A:()=>r});const r=n(5498).A},4317:(e,t,n)=>{n.d(t,{Ay:()=>v,HX:()=>b,tT:()=>S});var r=n(8168),a=n(6540),o=n(6289),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=(0,o.A)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),u=n(9214),s=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},c=n(3174),f=n(1287),d=l,p=function(e){return"theme"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p},m=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},g=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return s(t,n,r),(0,f.s)((function(){return function(e,t,n){s(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}(t,n,r)})),null},y=function e(t,n){var o,i,l=t.__emotion_real===t,s=l&&t.__emotion_base||t;void 0!==n&&(o=n.label,i=n.target);var f=m(t,n,l),d=f||h(s),p=!d("as");return function(){var y=arguments,v=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&v.push("label:"+o+";"),null==y[0]||void 0===y[0].raw)v.push.apply(v,y);else{v.push(y[0][0]);for(var b=y.length,w=1;w<b;w++)v.push(y[w],y[0][w])}var S=(0,u.w)((function(e,t,n){var r,o,l,m,y=p&&e.as||s,b="",w=[],S=e;if(null==e.theme){for(var k in S={},e)S[k]=e[k];S.theme=a.useContext(u.T)}"string"==typeof e.className?(r=t.registered,o=w,l=e.className,m="",l.split(" ").forEach((function(e){void 0!==r[e]?o.push(r[e]+";"):e&&(m+=e+" ")})),b=m):null!=e.className&&(b=e.className+" ");var x=(0,c.J)(v.concat(w),t.registered,S);b+=t.key+"-"+x.name,void 0!==i&&(b+=" "+i);var C=p&&void 0===f?h(y):d,E={};for(var A in e)p&&"as"===A||C(A)&&(E[A]=e[A]);return E.className=b,n&&(E.ref=n),a.createElement(a.Fragment,null,a.createElement(g,{cache:t,serialized:x,isStringTag:"string"==typeof y}),a.createElement(y,E))}));return S.displayName=void 0!==o?o:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",S.defaultProps=t.defaultProps,S.__emotion_real=S,S.__emotion_base=s,S.__emotion_styles=v,S.__emotion_forwardProp=f,Object.defineProperty(S,"toString",{value:function(){return"."+i}}),S.withComponent=function(t,a){return e(t,(0,r.A)({},n,a,{shouldForwardProp:m(S,a,!0)})).apply(void 0,v)},S}}.bind();function v(e,t){return y(e,t)}function b(e,t){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){y[e]=y(e)}));const w=[];function S(e){return w[0]=e,(0,c.J)(w)}},9499:(e,t,n)=>{n.d(t,{EU:()=>u,NI:()=>l,vf:()=>s,zu:()=>a});var r=n(6171);const a={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${a[e]}px)`},i={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:a[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function l(e,t,n){const l=e.theme||{};if(Array.isArray(t)){const e=l.breakpoints||o;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=l.breakpoints||o;return Object.keys(t).reduce(((o,u)=>{if((0,r.ob)(e.keys,u)){const e=(0,r.CT)(l.containerQueries?l:i,u);e&&(o[e]=n(t[u],u))}else if(Object.keys(e.values||a).includes(u))o[e.up(u)]=n(t[u],u);else{const e=u;o[e]=t[e]}return o}),{})}return n(t)}function u(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}function s(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},3139:(e,t,n)=>{n.d(t,{X4:()=>d,e$:()=>h,tL:()=>v,eM:()=>f,YL:()=>s,a:()=>g,Cg:()=>p,Me:()=>l,Nd:()=>m,Y9:()=>b,j4:()=>y});var r=n(9453);const a=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))};function o(e,t=0,n=1){return a(e,t,n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error((0,r.A)(9,e));let a,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),a=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(a))throw new Error((0,r.A)(10,a))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:a}}const l=(e,t)=>{try{return(e=>{const t=i(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function u(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){e=i(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),l=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let s="rgb";const c=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),u({type:s,values:c})}function c(e){let t="hsl"===(e=i(e)).type||"hsla"===e.type?i(s(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function f(e,t){const n=c(e),r=c(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function d(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,u(e)}function p(e,t,n){try{return d(e,t)}catch(t){return e}}function h(e,t){if(e=i(e),t=o(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return u(e)}function m(e,t,n){try{return h(e,t)}catch(t){return e}}function g(e,t){if(e=i(e),t=o(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return u(e)}function y(e,t,n){try{return g(e,t)}catch(t){return e}}function v(e,t=.15){return c(e)>.5?h(e,t):g(e,t)}function b(e,t,n){try{return v(e,t)}catch(t){return e}}},6955:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(4580);function a(e=8,t=(0,r.LX)({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}},6641:(e,t,n)=>{n.d(t,{A:()=>c});var r=n(1317);var a=n(6171);const o={borderRadius:4};var i=n(6955),l=n(3571),u=n(8348);function s(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const c=function(e={},...t){const{breakpoints:n={},palette:c={},spacing:f,shape:d={},...p}=e,h=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...a}=e,o=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),i=Object.keys(o);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function s(e,a){const o=i.indexOf(a);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[i[o]]?t[i[o]]:a)-r/100}${n})`}return{keys:i,values:o,up:l,down:u,between:s,only:function(e){return i.indexOf(e)+1<i.length?s(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?u(i[t]):s(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...a}}(n),m=(0,i.A)(f);let g=(0,r.A)({breakpoints:h,direction:"ltr",components:{},palette:{mode:"light",...c},spacing:m,shape:{...o,...d}},p);return g=(0,a.Ay)(g),g.applyStyles=s,g=t.reduce(((e,t)=>(0,r.A)(e,t)),g),g.unstable_sxConfig={...u.A,...p?.unstable_sxConfig},g.unstable_sx=function(e){return(0,l.A)({sx:e,theme:this})},g}},6171:(e,t,n)=>{function r(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}function a(e,t){return"@"===t||t.startsWith("@")&&(e.some((e=>t.startsWith(`@${e}`)))||!!t.match(/^@\d/))}function o(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,a]=n,o=Number.isNaN(+r)?r||0:+r;return e.containerQueries(a).up(o)}function i(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const a=t(e.breakpoints.not(...n),r);return a.includes("not all and")?a.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):a}}const r={},a=e=>(n(r,e),r);return n(a),{...e,containerQueries:a}}n.d(t,{Ay:()=>i,CT:()=>o,_S:()=>r,ob:()=>a})},7611:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(1317);const a=function(e,t){return t?(0,r.A)(e,t,{clone:!1}):e}},7118:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(4317);function a(e){const{variants:t,...n}=e,a={variants:t,style:(0,r.tT)(n),isProcessed:!0};return a.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=(0,r.tT)(e.style))})),a}},4580:(e,t,n)=>{n.d(t,{LX:()=>h,MA:()=>p,_W:()=>m,Lc:()=>y,Ms:()=>v});var r=n(9499),a=n(3539),o=n(7611);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},u={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},s=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!u[e])return[e];e=u[e]}const[t,n]=e.split(""),r=i[t],a=l[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(t)),e[t])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],f=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],d=[...c,...f];function p(e,t,n,r){const o=(0,a.Yn)(e,t,!0)??n;return"number"==typeof o||"string"==typeof o?e=>"string"==typeof e?e:"string"==typeof o?`calc(${e} * ${o})`:o*e:Array.isArray(o)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=o[t];return e>=0?n:"number"==typeof n?-n:`-${n}`}:"function"==typeof o?o:()=>{}}function h(e){return p(e,"spacing",8)}function m(e,t){return"string"==typeof t||null==t?t:e(t)}function g(e,t){const n=h(e.theme);return Object.keys(e).map((a=>function(e,t,n,a){if(!t.includes(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(s(n),a),i=e[n];return(0,r.NI)(e,i,o)}(e,t,a,n))).reduce(o.A,{})}function y(e){return g(e,c)}function v(e){return g(e,f)}function b(e){return g(e,d)}y.propTypes={},y.filterProps=c,v.propTypes={},v.filterProps=f,b.propTypes={},b.filterProps=d},8348:(e,t,n)=>{n.d(t,{A:()=>L});var r=n(4580),a=n(3539),o=n(7611);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.A)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var l=n(9499);function u(e){return"number"!=typeof e?e:`${e}px solid`}function s(e,t){return(0,a.Ay)({prop:e,themeKey:"borders",transform:t})}const c=s("border",u),f=s("borderTop",u),d=s("borderRight",u),p=s("borderBottom",u),h=s("borderLeft",u),m=s("borderColor"),g=s("borderTopColor"),y=s("borderRightColor"),v=s("borderBottomColor"),b=s("borderLeftColor"),w=s("outline",u),S=s("outlineColor"),k=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.MA)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r._W)(t,e)});return(0,l.NI)(e,e.borderRadius,n)}return null};k.propTypes={},k.filterProps=["borderRadius"],i(c,f,d,p,h,m,g,y,v,b,k,w,S);const x=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.MA)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r._W)(t,e)});return(0,l.NI)(e,e.gap,n)}return null};x.propTypes={},x.filterProps=["gap"];const C=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.MA)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.columnGap,n)}return null};C.propTypes={},C.filterProps=["columnGap"];const E=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.MA)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.rowGap,n)}return null};function A(e,t){return"grey"===t?t:e}function P(e){return e<=1&&0!==e?100*e+"%":e}E.propTypes={},E.filterProps=["rowGap"],i(x,C,E,(0,a.Ay)({prop:"gridColumn"}),(0,a.Ay)({prop:"gridRow"}),(0,a.Ay)({prop:"gridAutoFlow"}),(0,a.Ay)({prop:"gridAutoColumns"}),(0,a.Ay)({prop:"gridAutoRows"}),(0,a.Ay)({prop:"gridTemplateColumns"}),(0,a.Ay)({prop:"gridTemplateRows"}),(0,a.Ay)({prop:"gridTemplateAreas"}),(0,a.Ay)({prop:"gridArea"})),i((0,a.Ay)({prop:"color",themeKey:"palette",transform:A}),(0,a.Ay)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:A}),(0,a.Ay)({prop:"backgroundColor",themeKey:"palette",transform:A}));const T=(0,a.Ay)({prop:"width",transform:P}),R=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||l.zu[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:P(t)}};return(0,l.NI)(e,e.maxWidth,t)}return null};R.filterProps=["maxWidth"];const _=(0,a.Ay)({prop:"minWidth",transform:P}),N=(0,a.Ay)({prop:"height",transform:P}),$=(0,a.Ay)({prop:"maxHeight",transform:P}),O=(0,a.Ay)({prop:"minHeight",transform:P}),L=((0,a.Ay)({prop:"size",cssProperty:"width",transform:P}),(0,a.Ay)({prop:"size",cssProperty:"height",transform:P}),i(T,R,_,N,$,O,(0,a.Ay)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:u},borderTop:{themeKey:"borders",transform:u},borderRight:{themeKey:"borders",transform:u},borderBottom:{themeKey:"borders",transform:u},borderLeft:{themeKey:"borders",transform:u},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:u},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:k},color:{themeKey:"palette",transform:A},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:A},backgroundColor:{themeKey:"palette",transform:A},p:{style:r.Ms},pt:{style:r.Ms},pr:{style:r.Ms},pb:{style:r.Ms},pl:{style:r.Ms},px:{style:r.Ms},py:{style:r.Ms},padding:{style:r.Ms},paddingTop:{style:r.Ms},paddingRight:{style:r.Ms},paddingBottom:{style:r.Ms},paddingLeft:{style:r.Ms},paddingX:{style:r.Ms},paddingY:{style:r.Ms},paddingInline:{style:r.Ms},paddingInlineStart:{style:r.Ms},paddingInlineEnd:{style:r.Ms},paddingBlock:{style:r.Ms},paddingBlockStart:{style:r.Ms},paddingBlockEnd:{style:r.Ms},m:{style:r.Lc},mt:{style:r.Lc},mr:{style:r.Lc},mb:{style:r.Lc},ml:{style:r.Lc},mx:{style:r.Lc},my:{style:r.Lc},margin:{style:r.Lc},marginTop:{style:r.Lc},marginRight:{style:r.Lc},marginBottom:{style:r.Lc},marginLeft:{style:r.Lc},marginX:{style:r.Lc},marginY:{style:r.Lc},marginInline:{style:r.Lc},marginInlineStart:{style:r.Lc},marginInlineEnd:{style:r.Lc},marginBlock:{style:r.Lc},marginBlockStart:{style:r.Lc},marginBlockEnd:{style:r.Lc},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:x},rowGap:{style:E},columnGap:{style:C},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:P},maxWidth:{style:R},minWidth:{transform:P},height:{transform:P},maxHeight:{transform:P},minHeight:{transform:P},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},3571:(e,t,n)=>{n.d(t,{A:()=>c});var r=n(3967),a=n(7611),o=n(3539),i=n(9499),l=n(6171),u=n(8348);const s=function(){function e(e,t,n,a){const l={[e]:t,theme:n},u=a[e];if(!u)return{[e]:t};const{cssProperty:s=e,themeKey:c,transform:f,style:d}=u;if(null==t)return null;if("typography"===c&&"inherit"===t)return{[e]:t};const p=(0,o.Yn)(n,c)||{};return d?d(l):(0,i.NI)(l,t,(t=>{let n=(0,o.BO)(p,f,t);return t===n&&"string"==typeof t&&(n=(0,o.BO)(p,f,`${e}${"default"===t?"":(0,r.A)(t)}`,t)),!1===s?n:{[s]:n}}))}return function t(n){const{sx:r,theme:o={}}=n||{};if(!r)return null;const s=o.unstable_sxConfig??u.A;function c(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const u=(0,i.EU)(o.breakpoints),c=Object.keys(u);let f=u;return Object.keys(r).forEach((n=>{const l="function"==typeof(u=r[n])?u(o):u;var u;if(null!=l)if("object"==typeof l)if(s[n])f=(0,a.A)(f,e(n,l,o,s));else{const e=(0,i.NI)({theme:o},l,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,l)?f=(0,a.A)(f,e):f[n]=t({sx:l,theme:o})}else f=(0,a.A)(f,e(n,l,o,s))})),(0,l._S)(o,(0,i.vf)(c,f))}return Array.isArray(r)?r.map(c):c(r)}}();s.filterProps=["sx"];const c=s},3539:(e,t,n)=>{n.d(t,{Ay:()=>l,BO:()=>i,Yn:()=>o});var r=n(3967),a=n(9499);function o(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:o(e,n)||r,t&&(a=t(a,r,e)),a}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:u}=e,s=e=>{if(null==e[t])return null;const s=e[t],c=o(e.theme,l)||{};return(0,a.NI)(e,s,(e=>{let a=i(c,u,e);return e===a&&"string"==typeof e&&(a=i(c,u,`${t}${"default"===e?"":(0,r.A)(e)}`,e)),!1===n?a:{[n]:a}}))};return s.propTypes={},s.filterProps=[t],s}},3967:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(9453);function a(e){if("string"!=typeof e)throw new Error((0,r.A)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},5659:(e,t,n)=>{function r(e,t,n=void 0){const r={};for(const a in e){const o=e[a];let i="",l=!0;for(let e=0;e<o.length;e+=1){const r=o[e];r&&(i+=(!0===l?"":" ")+t(r),l=!1,n&&n[r]&&(i+=" "+n[r]))}r[a]=i}return r}n.d(t,{A:()=>r})},1317:(e,t,n)=>{n.d(t,{A:()=>i,Q:()=>a});var r=n(6540);function a(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function o(e){if(r.isValidElement(e)||!a(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=o(e[n])})),t}function i(e,t,n={clone:!0}){const l=n.clone?{...e}:e;return a(e)&&a(t)&&Object.keys(t).forEach((u=>{r.isValidElement(t[u])?l[u]=t[u]:a(t[u])&&Object.prototype.hasOwnProperty.call(e,u)&&a(e[u])?l[u]=i(e[u],t[u],n):n.clone?l[u]=a(t[u])?o(t[u]):t[u]:l[u]=t[u]})),l}},9453:(e,t,n)=>{function r(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}n.d(t,{A:()=>r})},2288:(e,t,n)=>{n.d(t,{Ay:()=>i});const r=e=>e,a=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})(),o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function i(e,t,n="Mui"){const r=o[t];return r?`${n}-${r}`:`${a.generate(e)}-${t}`}},8413:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(2288);function a(e,t,n="Mui"){const a={};return t.forEach((t=>{a[t]=(0,r.Ay)(e,t,n)})),a}},7379:(e,t,n)=>{function r(e,t){const n={...t};for(const a in e)if(Object.prototype.hasOwnProperty.call(e,a)){const o=a;if("components"===o||"slots"===o)n[o]={...e[o],...n[o]};else if("componentsProps"===o||"slotProps"===o){const a=e[o],i=t[o];if(i)if(a){n[o]={...i};for(const e in a)if(Object.prototype.hasOwnProperty.call(a,e)){const t=e;n[o][t]=r(a[t],i[t])}}else n[o]=i;else n[o]=a||{}}else void 0===n[o]&&(n[o]=e[o])}return n}n.d(t,{A:()=>r})},5949:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(6540);const a="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,o=function(e){const t=r.useRef(e);return a((()=>{t.current=e})),r.useRef(((...e)=>(0,t.current)(...e))).current}},5498:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(6540);function a(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)}},2295:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(6540);const a={};function o(e,t){const n=r.useRef(a);return n.current===a&&(n.current=e(t)),n}},9787:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(2295),a=n(6540);const o=[];class i{static create(){return new i}currentId=null;start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)};disposeEffect=()=>this.clear}function l(){const e=(0,r.A)(i.create).current;var t;return t=e.disposeEffect,a.useEffect(t,o),e}},6314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},1354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},4146:(e,t,n)=>{var r=n(3404),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=p(n);a&&a!==h&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),g=0;g<i.length;++g){var y=i[g];if(!(o[y]||r&&r[y]||m&&m[y]||l&&l[y])){var v=d(n,y);try{s(t,y,v)}catch(e){}}}}return t}},3072:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case m:case u:return e;default:return t}}case a:return t}}}function k(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=g,t.Memo=m,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===o},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===a},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},3404:(e,t,n)=>{e.exports=n(3072)},2551:(e,t,n)=>{var r=n(6540),a=n(9982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),A=Symbol.for("react.provider"),P=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),_=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),$=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var O=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var z,I=Object.assign;function j(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var F=!1;function D(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function B(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case E:return"Profiler";case C:return"StrictMode";case R:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case A:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case $:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){G(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function oe(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,xe=null,Ce=null;function Ee(e){if(e=ba(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=Sa(t),ke(e.stateNode,e.type,t))}}function Ae(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function Pe(){if(xe){var e=xe,t=Ce;if(Ce=xe=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Te(e,t){return e(t)}function Re(){}var _e=!1;function Ne(e,t,n){if(_e)return e(t,n);_e=!0;try{return Te(e,t,n)}finally{_e=!1,(null!==xe||null!==Ce)&&(Re(),Pe())}}function $e(e,t){var n=e.stateNode;if(null===n)return null;var r=Sa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Oe=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Oe=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){Oe=!1}function Me(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var ze=!1,Ie=null,je=!1,Fe=null,De={onError:function(e){ze=!0,Ie=e}};function Be(e,t,n,r,a,o,i,l,u){ze=!1,Ie=null,Me.apply(De,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(We(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Ve(a),e;if(i===r)return Ve(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ke(e):null}function Ke(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ke(e);if(null!==t)return t;e=e.sibling}return null}var Qe=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,qe=a.unstable_shouldYield,Xe=a.unstable_requestPaint,Ge=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=ft(l):0!=(o&=i)&&(r=ft(o))}else 0!=(i=n&~a)?r=ft(i):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var St,kt,xt,Ct,Et,At=!1,Pt=[],Tt=null,Rt=null,_t=null,Nt=new Map,$t=new Map,Ot=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":$t.delete(t.pointerId)}}function zt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function It(e){var t=va(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void Et(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){jt(e)&&n.delete(t)}function Dt(){At=!1,null!==Tt&&jt(Tt)&&(Tt=null),null!==Rt&&jt(Rt)&&(Rt=null),null!==_t&&jt(_t)&&(_t=null),Nt.forEach(Ft),$t.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,At||(At=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Dt)))}function Wt(e){function t(t){return Bt(t,e)}if(0<Pt.length){Bt(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&Bt(Tt,e),null!==Rt&&Bt(Rt,e),null!==_t&&Bt(_t,e),Nt.forEach(t),$t.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)It(n),null===n.blockedOn&&Ot.shift()}var Ut=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var a=bt,o=Ut.transition;Ut.transition=null;try{bt=1,Qt(e,t,n,r)}finally{bt=a,Ut.transition=o}}function Kt(e,t,n,r){var a=bt,o=Ut.transition;Ut.transition=null;try{bt=4,Qt(e,t,n,r)}finally{bt=a,Ut.transition=o}}function Qt(e,t,n,r){if(Vt){var a=qt(e,t,n,r);if(null===a)Vr(e,t,r,Yt,n),Mt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Tt=zt(Tt,e,t,n,r,a),!0;case"dragenter":return Rt=zt(Rt,e,t,n,r,a),!0;case"mouseover":return _t=zt(_t,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Nt.set(o,zt(Nt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,$t.set(o,zt($t.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&St(o),null===(o=qt(e,t,n,r))&&Vr(e,t,r,Yt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Yt=null;function qt(e,t,n,r){if(Yt=null,null!==(e=va(e=Se(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,a="value"in Gt?Gt.value:Gt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=I({},sn,{view:0,detail:0}),dn=an(fn),pn=I({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(I({},pn,{dataTransfer:0})),gn=an(I({},fn,{relatedTarget:0})),yn=an(I({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=I({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(vn),wn=an(I({},sn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function En(){return Cn}var An=I({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=an(An),Tn=an(I({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=an(I({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),_n=an(I({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=I({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),$n=an(Nn),On=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var zn=c&&"TextEvent"in window&&!Mn,In=c&&(!Ln||Mn&&8<Mn&&11>=Mn),jn=String.fromCharCode(32),Fn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){Ae(r),0<(t=Kr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Qn=null;function Yn(e){jr(e,0)}function qn(e){if(Q(wa(e)))return e}function Xn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Gn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Kn&&(Kn.detachEvent("onpropertychange",nr),Qn=Kn=null)}function nr(e){if("value"===e.propertyName&&qn(Qn)){var t=[];Hn(t,Qn,e,Se(e)),Ne(Yn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(Kn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Qn)}function or(e,t){if("click"===e)return qn(t)}function ir(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Y(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Kr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},xr={},Cr={};function Er(e){if(xr[e])return xr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return xr[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Ar=Er("animationend"),Pr=Er("animationiteration"),Tr=Er("animationstart"),Rr=Er("transitionend"),_r=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function $r(e,t){_r.set(e,t),u(t,[e])}for(var Or=0;Or<Nr.length;Or++){var Lr=Nr[Or];$r(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}$r(Ar,"onAnimationEnd"),$r(Pr,"onAnimationIteration"),$r(Tr,"onAnimationStart"),$r("dblclick","onDoubleClick"),$r("focusin","onFocus"),$r("focusout","onBlur"),$r(Rr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if(Be.apply(this,arguments),ze){if(!ze)throw Error(o(198));var c=Ie;ze=!1,Ie=null,je||(je=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function jr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Ir(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Ir(a,l,s),o=u}}}if(je)throw e=Fe,je=!1,Fe=null,e}function Fr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Br]){e[Br]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Dr("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Xt(t)){case 1:var a=Ht;break;case 4:a=Kt;break;default:a=Qt}n=a.bind(null,t,n,e),a=void 0,!Oe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=va(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}Ne((function(){var r=o,a=Se(n),i=[];e:{var l=_r.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Pn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Rn;break;case Ar:case Pr:case Tr:u=yn;break;case Rr:u=_n;break;case"scroll":u=dn;break;case"wheel":u=$n;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=$e(h,d))&&c.push(Hr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!va(s)&&!s[ha])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?va(s):null)&&(s!==(f=We(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:wa(u),p=null==s?l:wa(s),(l=new c(m,h+"leave",u,n,a)).target=f,l.relatedTarget=p,m=null,va(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)c=Qr(c),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qr(c),d=Qr(d)}c=null}else c=null;null!==u&&Yr(i,l,u,c,!1),null!==s&&null!==f&&Yr(i,f,s,c,!0)}if("select"===(u=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Xn;else if(Vn(l))if(Gn)g=ir;else{g=ar;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Hn(i,g,n,a):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?wa(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,a)}var v;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(v=en()):(Jt="value"in(Gt=a)?Gt.value:Gt.textContent,Wn=!0)),0<(y=Kr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:y}),(v||null!==(v=Bn(n)))&&(b.data=v))),(v=zn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,jn);case"textInput":return(e=t.data)===jn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Ln&&Dn(e,t)?(e=en(),Zt=Jt=Gt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Kr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=v)}jr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Kr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=$e(e,n))&&r.unshift(Hr(e,o,a)),null!=(o=$e(e,t))&&r.push(Hr(e,o,a))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=$e(n,o))&&i.unshift(Hr(n,u,l)):a||null!=(u=$e(n,o))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var qr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Xr,"")}function Jr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Wt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ha="__reactContainer$"+fa,ma="__reactEvents$"+fa,ga="__reactListeners$"+fa,ya="__reactHandles$"+fa;function va(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Sa(e){return e[pa]||null}var ka=[],xa=-1;function Ca(e){return{current:e}}function Ea(e){0>xa||(e.current=ka[xa],ka[xa]=null,xa--)}function Aa(e,t){xa++,ka[xa]=e.current,e.current=t}var Pa={},Ta=Ca(Pa),Ra=Ca(!1),_a=Pa;function Na(e,t){var n=e.type.contextTypes;if(!n)return Pa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function $a(e){return null!=e.childContextTypes}function Oa(){Ea(Ra),Ea(Ta)}function La(e,t,n){if(Ta.current!==Pa)throw Error(o(168));Aa(Ta,t),Aa(Ra,n)}function Ma(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,U(e)||"Unknown",a));return I({},n,r)}function za(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Pa,_a=Ta.current,Aa(Ta,e),Aa(Ra,Ra.current),!0}function Ia(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ma(e,t,_a),r.__reactInternalMemoizedMergedChildContext=e,Ea(Ra),Ea(Ta),Aa(Ta,e)):Ea(Ra),Aa(Ra,n)}var ja=null,Fa=!1,Da=!1;function Ba(e){null===ja?ja=[e]:ja.push(e)}function Wa(){if(!Da&&null!==ja){Da=!0;var e=0,t=bt;try{var n=ja;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}ja=null,Fa=!1}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),Qe(Ze,Wa),t}finally{bt=t,Da=!1}}return null}var Ua=[],Va=0,Ha=null,Ka=0,Qa=[],Ya=0,qa=null,Xa=1,Ga="";function Ja(e,t){Ua[Va++]=Ka,Ua[Va++]=Ha,Ha=e,Ka=t}function Za(e,t,n){Qa[Ya++]=Xa,Qa[Ya++]=Ga,Qa[Ya++]=qa,qa=e;var r=Xa;e=Ga;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Xa=1<<32-it(t)+a|n<<a|r,Ga=o+e}else Xa=1<<o|n<<a|r,Ga=e}function eo(e){null!==e.return&&(Ja(e,1),Za(e,1,0))}function to(e){for(;e===Ha;)Ha=Ua[--Va],Ua[Va]=null,Ka=Ua[--Va],Ua[Va]=null;for(;e===qa;)qa=Qa[--Ya],Qa[Ya]=null,Ga=Qa[--Ya],Qa[Ya]=null,Xa=Qa[--Ya],Qa[Ya]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Ns(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==qa?{id:Xa,overflow:Ga}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ns(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return!(!(1&e.mode)||128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)io(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var go=w.ReactCurrentBatchConfig;function yo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function vo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function wo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Os(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Is(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===x?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===$&&bo(o)===t.type)?((r=a(t,n.props)).ref=yo(e,t,n),r.return=e,r):((r=Ls(n.type,n.key,n.props,null,e.mode,r)).ref=yo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=js(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Is(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ls(t.type,t.key,t.props,null,e.mode,n)).ref=yo(e,null,t),n.return=e,n;case k:return(t=js(t,e.mode,n)).return=e,t;case $:return d(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Ms(t,e.mode,n,null)).return=e,t;vo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===a?s(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null;case $:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||M(n))return null!==a?null:f(e,t,n,r,null);vo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case $:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,a,null);vo(t,r)}return null}function m(a,o,l,u){for(var s=null,c=null,f=o,m=o=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(a,f,l[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(a,f),o=i(y,o,m),null===c?s=y:c.sibling=y,c=y,f=g}if(m===l.length)return n(a,f),ao&&Ja(a,m),s;if(null===f){for(;m<l.length;m++)null!==(f=d(a,l[m],u))&&(o=i(f,o,m),null===c?s=f:c.sibling=f,c=f);return ao&&Ja(a,m),s}for(f=r(a,f);m<l.length;m++)null!==(g=h(f,a,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),o=i(g,o,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(a,e)})),ao&&Ja(a,m),s}function g(a,l,u,s){var c=M(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,m=l,g=l=0,y=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(a,m,v.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(a,m),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,m=y}if(v.done)return n(a,m),ao&&Ja(a,g),c;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=d(a,v.value,s))&&(l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return ao&&Ja(a,g),c}for(m=r(a,m);!v.done;g++,v=u.next())null!==(v=h(m,a,g,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return e&&m.forEach((function(e){return t(a,e)})),ao&&Ja(a,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case S:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===x){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===$&&bo(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=yo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===x?((o=Ms(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=Ls(i.type,i.key,i.props,null,r.mode,u)).ref=yo(r,o,i),u.return=r,r=u)}return l(r);case k:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=js(i,r.mode,u)).return=r,r=o}return l(r);case $:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return m(r,o,i,u);if(M(i))return g(r,o,i,u);vo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Is(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var So=wo(!0),ko=wo(!1),xo=Ca(null),Co=null,Eo=null,Ao=null;function Po(){Ao=Eo=Co=null}function To(e){var t=xo.current;Ea(xo),e._currentValue=t}function Ro(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _o(e,t){Co=e,Ao=Eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bl=!0),e.firstContext=null)}function No(e){var t=e._currentValue;if(Ao!==e)if(e={context:e,memoizedValue:t,next:null},null===Eo){if(null===Co)throw Error(o(308));Eo=e,Co.dependencies={lanes:0,firstContext:e}}else Eo=Eo.next=e;return t}var $o=null;function Oo(e){null===$o?$o=[e]:$o.push(e)}function Lo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Oo(t)):(n.next=a.next,a.next=n),t.interleaved=n,Mo(e,r)}function Mo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var zo=!1;function Io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function jo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Do(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Tu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Mo(e,n)}return null===(a=r.interleaved)?(t.next=t,Oo(r)):(t.next=a.next,a.next=t),r.interleaved=t,Mo(e,n)}function Bo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Wo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Uo(e,t,n,r){var a=e.updateQueue;zo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(i=0,c=s=u=null,l=o;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=I({},f,d);break e;case 2:zo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(d=l).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);zu|=i,e.lanes=i,e.memoizedState=f}}function Vo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Ho={},Ko=Ca(Ho),Qo=Ca(Ho),Yo=Ca(Ho);function qo(e){if(e===Ho)throw Error(o(174));return e}function Xo(e,t){switch(Aa(Yo,t),Aa(Qo,e),Aa(Ko,Ho),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ea(Ko),Aa(Ko,t)}function Go(){Ea(Ko),Ea(Qo),Ea(Yo)}function Jo(e){qo(Yo.current);var t=qo(Ko.current),n=ue(t,e.type);t!==n&&(Aa(Qo,e),Aa(Ko,n))}function Zo(e){Qo.current===e&&(Ea(Ko),Ea(Qo))}var ei=Ca(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=w.ReactCurrentDispatcher,oi=w.ReactCurrentBatchConfig,ii=0,li=null,ui=null,si=null,ci=!1,fi=!1,di=0,pi=0;function hi(){throw Error(o(321))}function mi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,a,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?Zi:el,e=n(r,a),fi){i=0;do{if(fi=!1,di=0,25<=i)throw Error(o(301));i+=1,si=ui=null,t.updateQueue=null,ai.current=tl,e=n(r,a)}while(fi)}if(ai.current=Ji,t=null!==ui&&null!==ui.next,ii=0,si=ui=li=null,ci=!1,t)throw Error(o(300));return e}function yi(){var e=0!==di;return di=0,e}function vi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===si?li.memoizedState=si=e:si=si.next=e,si}function bi(){if(null===ui){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=ui.next;var t=null===si?li.memoizedState:si.next;if(null!==t)si=t,ui=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ui=e).memoizedState,baseState:ui.baseState,baseQueue:ui.baseQueue,queue:ui.queue,next:null},null===si?li.memoizedState=si=e:si=si.next=e}return si}function wi(e,t){return"function"==typeof t?t(e):t}function Si(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ui,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ii&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,li.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,li.lanes|=i,zu|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ki(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function xi(){}function Ci(e,t){var n=li,r=bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,bl=!0),r=r.queue,zi(Pi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==si&&1&si.memoizedState.tag){if(n.flags|=2048,Ni(9,Ai.bind(null,n,r,a,t),void 0,null),null===Ru)throw Error(o(349));30&ii||Ei(n,t,a)}return a}function Ei(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ai(e,t,n,r){t.value=n,t.getSnapshot=r,Ti(t)&&Ri(e)}function Pi(e,t,n){return n((function(){Ti(t)&&Ri(e)}))}function Ti(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ri(e){var t=Mo(e,1);null!==t&&ns(t,e,1,-1)}function _i(e){var t=vi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wi,lastRenderedState:e},t.queue=e,e=e.dispatch=Yi.bind(null,li,e),[t.memoizedState,e]}function Ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function $i(){return bi().memoizedState}function Oi(e,t,n,r){var a=vi();li.flags|=e,a.memoizedState=Ni(1|t,n,void 0,void 0===r?null:r)}function Li(e,t,n,r){var a=bi();r=void 0===r?null:r;var o=void 0;if(null!==ui){var i=ui.memoizedState;if(o=i.destroy,null!==r&&mi(r,i.deps))return void(a.memoizedState=Ni(t,n,o,r))}li.flags|=e,a.memoizedState=Ni(1|t,n,o,r)}function Mi(e,t){return Oi(8390656,8,e,t)}function zi(e,t){return Li(2048,8,e,t)}function Ii(e,t){return Li(4,2,e,t)}function ji(e,t){return Li(4,4,e,t)}function Fi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Di(e,t,n){return n=null!=n?n.concat([e]):null,Li(4,4,Fi.bind(null,t,e),n)}function Bi(){}function Wi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ui(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Vi(e,t,n){return 21&ii?(lr(n,t)||(n=mt(),li.lanes|=n,zu|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n)}function Hi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),t()}finally{bt=n,oi.transition=r}}function Ki(){return bi().memoizedState}function Qi(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},qi(e)?Xi(t,n):null!==(n=Lo(e,t,n,r))&&(ns(n,e,r,es()),Gi(n,t,r))}function Yi(e,t,n){var r=ts(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(qi(e))Xi(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(a.next=a,Oo(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Lo(e,t,a,r))&&(ns(n,e,r,a=es()),Gi(n,t,r))}}function qi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Xi(e,t){fi=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Gi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Ji={readContext:No,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},Zi={readContext:No,useCallback:function(e,t){return vi().memoizedState=[e,void 0===t?null:t],e},useContext:No,useEffect:Mi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Oi(4194308,4,Fi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Oi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Oi(4,2,e,t)},useMemo:function(e,t){var n=vi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=vi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Qi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vi().memoizedState=e},useState:_i,useDebugValue:Bi,useDeferredValue:function(e){return vi().memoizedState=e},useTransition:function(){var e=_i(!1),t=e[0];return e=Hi.bind(null,e[1]),vi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,a=vi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Ru)throw Error(o(349));30&ii||Ei(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Mi(Pi.bind(null,r,i,e),[e]),r.flags|=2048,Ni(9,Ai.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=vi(),t=Ru.identifierPrefix;if(ao){var n=Ga;t=":"+t+"R"+(n=(Xa&~(1<<32-it(Xa)-1)).toString(32)+n),0<(n=di++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:No,useCallback:Wi,useContext:No,useEffect:zi,useImperativeHandle:Di,useInsertionEffect:Ii,useLayoutEffect:ji,useMemo:Ui,useReducer:Si,useRef:$i,useState:function(){return Si(wi)},useDebugValue:Bi,useDeferredValue:function(e){return Vi(bi(),ui.memoizedState,e)},useTransition:function(){return[Si(wi)[0],bi().memoizedState]},useMutableSource:xi,useSyncExternalStore:Ci,useId:Ki,unstable_isNewReconciler:!1},tl={readContext:No,useCallback:Wi,useContext:No,useEffect:zi,useImperativeHandle:Di,useInsertionEffect:Ii,useLayoutEffect:ji,useMemo:Ui,useReducer:ki,useRef:$i,useState:function(){return ki(wi)},useDebugValue:Bi,useDeferredValue:function(e){var t=bi();return null===ui?t.memoizedState=e:Vi(t,ui.memoizedState,e)},useTransition:function(){return[ki(wi)[0],bi().memoizedState]},useMutableSource:xi,useSyncExternalStore:Ci,useId:Ki,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var al={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Fo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Do(e,o,a))&&(ns(t,e,a,r),Bo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=Fo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Do(e,o,a))&&(ns(t,e,a,r),Bo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),a=Fo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Do(e,a,r))&&(ns(t,e,r,n),Bo(t,e,r))}};function ol(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function il(e,t,n){var r=!1,a=Pa,o=t.contextType;return"object"==typeof o&&null!==o?o=No(o):(a=$a(t)?_a:Ta.current,o=(r=null!=(r=t.contextTypes))?Na(e,a):Pa),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=al,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&al.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Io(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=No(o):(o=$a(t)?_a:Ta.current,a.context=Na(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rl(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&al.enqueueReplaceState(a,a.state,null),Uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function sl(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function cl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=Fo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vu||(Vu=!0,Hu=r),fl(0,t)},n}function hl(e,t,n){(n=Fo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fo(-1,1)).tag=2,Do(n,t,1))),n.lanes|=1),e)}var vl=w.ReactCurrentOwner,bl=!1;function wl(e,t,n,r){t.child=null===e?ko(t,null,n,r):So(t,e.child,n,r)}function Sl(e,t,n,r,a){n=n.render;var o=t.ref;return _o(t,a),r=gi(e,t,n,r,o,a),n=yi(),null===e||bl?(ao&&n&&eo(t),t.flags|=1,wl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function kl(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||$s(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ls(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,xl(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Vl(e,t,a)}return t.flags|=1,(e=Os(o,r)).ref=t.ref,e.return=t,t.child=e}function xl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Vl(e,t,a);131072&e.flags&&(bl=!0)}}return Al(e,t,n,r,a)}function Cl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Aa(Ou,$u),$u|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Aa(Ou,$u),$u|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Aa(Ou,$u),$u|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Aa(Ou,$u),$u|=r;return wl(e,t,a,n),t.child}function El(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Al(e,t,n,r,a){var o=$a(n)?_a:Ta.current;return o=Na(t,o),_o(t,a),n=gi(e,t,n,r,o,a),r=yi(),null===e||bl?(ao&&r&&eo(t),t.flags|=1,wl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function Pl(e,t,n,r,a){if($a(n)){var o=!0;za(t)}else o=!1;if(_o(t,a),null===t.stateNode)Ul(e,t),il(t,n,r),ul(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?No(s):Na(t,s=$a(n)?_a:Ta.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ll(t,i,r,s),zo=!1;var d=t.memoizedState;i.state=d,Uo(t,r,i,a),u=t.memoizedState,l!==r||d!==u||Ra.current||zo?("function"==typeof c&&(rl(t,n,c,r),u=t.memoizedState),(l=zo||ol(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,jo(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:nl(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?No(u):Na(t,u=$a(n)?_a:Ta.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ll(t,i,r,u),zo=!1,d=t.memoizedState,i.state=d,Uo(t,r,i,a);var h=t.memoizedState;l!==f||d!==h||Ra.current||zo?("function"==typeof p&&(rl(t,n,p,r),h=t.memoizedState),(s=zo||ol(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Tl(e,t,n,r,o,a)}function Tl(e,t,n,r,a,o){El(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&Ia(t,n,!1),Vl(e,t,o);r=t.stateNode,vl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=So(t,e.child,null,o),t.child=So(t,null,l,o)):wl(e,t,l,o),t.memoizedState=r.state,a&&Ia(t,n,!0),t.child}function Rl(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),Xo(e,t.containerInfo)}function _l(e,t,n,r,a){return ho(),mo(a),t.flags|=256,wl(e,t,n,r),t.child}var Nl,$l,Ol,Ll,Ml={dehydrated:null,treeContext:null,retryLane:0};function zl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Il(e,t,n){var r,a=t.pendingProps,i=ei.current,l=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Aa(ei,1&i),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=a.children,e=a.fallback,l?(a=t.mode,l=t.child,u={mode:"hidden",children:u},1&a||null===l?l=zs(u,a,0,null):(l.childLanes=0,l.pendingProps=u),e=Ms(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=zl(n),t.memoizedState=Ml,e):jl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,r=cl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=zs({mode:"visible",children:r.children},a,0,null),(i=Ms(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&So(t,e.child,null,l),t.child.memoizedState=zl(l),t.memoizedState=Ml,i);if(!(1&t.mode))return Fl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Fl(e,t,l,r=cl(i=Error(o(419)),r,void 0))}if(u=!!(l&e.childLanes),bl||u){if(null!==(r=Ru)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|l)?0:a)&&a!==i.retryLane&&(i.retryLane=a,Mo(e,a),ns(r,e,a,-1))}return ms(),Fl(e,t,l,r=cl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ps.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Qa[Ya++]=Xa,Qa[Ya++]=Ga,Qa[Ya++]=qa,Xa=e.id,Ga=e.overflow,qa=t),(t=jl(t,r.children)).flags|=4096,t)}(e,t,u,a,r,i,n);if(l){l=a.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:a.children};return 1&u||t.child===i?(a=Os(i,s)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null),null!==r?l=Os(r,l):(l=Ms(l,u,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,u=null===(u=e.child.memoizedState)?zl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Ml,a}return e=(l=e.child).sibling,a=Os(l,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function jl(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){return null!==r&&mo(r),So(t,e.child,null,n),(e=jl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Dl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ro(e.return,t,n)}function Bl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(wl(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Dl(e,n,t);else if(19===e.tag)Dl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Aa(ei,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Bl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Bl(t,!0,n,null,o);break;case"together":Bl(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Ul(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Os(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Os(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return $a(t.type)&&Oa(),Kl(t),null;case 3:return r=t.stateNode,Go(),Ea(Ra),Ea(Ta),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),$l(e,t),Kl(t),null;case 5:Zo(t);var a=qo(Yo.current);if(n=t.type,null!==e&&null!=t.stateNode)Ol(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Kl(t),null}if(e=qo(Ko.current),fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[da]=t,r[pa]=i,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Mr.length;a++)Fr(Mr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var u in ve(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":K(r),Z(r,i,!0);break;case"textarea":K(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,Nl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Mr.length;a++)Fr(Mr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":X(e,r),a=q(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=I({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ve(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":K(e),Z(e,r,!1);break;case"textarea":K(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)Ll(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=qo(Yo.current),qo(Ko.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return Kl(t),null;case 13:if(Ea(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))po(),ho(),t.flags|=98560,i=!1;else if(i=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[da]=t}else ho(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),i=!1}else null!==oo&&(is(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Lu&&(Lu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return Go(),$l(e,t),null===e&&Wr(t.stateNode.containerInfo),Kl(t),null;case 10:return To(t.type._context),Kl(t),null;case 19:if(Ea(ei),null===(i=t.memoizedState))return Kl(t),null;if(r=!!(128&t.flags),null===(u=i.rendering))if(r)Hl(i,!1);else{if(0!==Lu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=ti(e))){for(t.flags|=128,Hl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Aa(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Ge()>Wu&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!ao)return Kl(t),null}else 2*Ge()-i.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ge(),t.sibling=null,n=ei.current,Aa(ei,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&$u)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Yl(e,t){switch(to(t),t.tag){case 1:return $a(t.type)&&Oa(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Go(),Ea(Ra),Ea(Ta),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(Ea(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ea(ei),null;case 4:return Go(),null;case 10:return To(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Nl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$l=function(){},Ol=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,qo(Ko.current);var o,i=null;switch(n){case"input":a=q(e,a),r=q(e,r),i=[];break;case"select":a=I({},a,{value:void 0}),r=I({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ve(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Ll=function(e,t,n,r){n!==r&&(t.flags|=4)};var ql=!1,Xl=!1,Gl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function Zl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cs(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Cs(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&eu(t,n,o)}a=a.next}while(a!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ou(e){var t=e.alternate;null!==t&&(e.alternate=null,ou(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ma],delete t[ga],delete t[ya]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,fu=!1;function du(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xl||Zl(n,t);case 6:var r=cu,a=fu;cu=null,du(e,t,n),fu=a,null!==(cu=r)&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Wt(e)):ua(cu,n.stateNode));break;case 4:r=cu,a=fu,cu=n.stateNode.containerInfo,fu=!0,du(e,t,n),cu=r,fu=a;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&eu(n,t,i),a=a.next}while(a!==r)}du(e,t,n);break;case 1:if(!Xl&&(Zl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cs(n,t,e)}du(e,t,n);break;case 21:du(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,du(e,t,n),Xl=r):du(e,t,n);break;default:du(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Gl),t.forEach((function(t){var r=Ts.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,fu=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===cu)throw Error(o(160));pu(i,l,a),cu=null,fu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Cs(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),yu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){Cs(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Cs(e,e.return,t)}}break;case 1:mu(t,e),yu(e),512&r&&null!==n&&Zl(n,n.return);break;case 5:if(mu(t,e),yu(e),512&r&&null!==n&&Zl(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){Cs(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&G(a,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":J(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(a,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){Cs(e,e.return,t)}}break;case 6:if(mu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){Cs(e,e.return,t)}}break;case 3:if(mu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){Cs(e,e.return,t)}break;case 4:default:mu(t,e),yu(e);break;case 13:mu(t,e),yu(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Bu=Ge())),4&r&&hu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||f,mu(t,e),Xl=c):mu(t,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Jl=e,f=e.child;null!==f;){for(d=Jl=f;null!==Jl;){switch(h=(p=Jl).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Zl(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cs(r,n,e)}}break;case 5:Zl(p,p.return);break;case 22:if(null!==p.memoizedState){Su(d);continue}}null!==h?(h.return=p,Jl=h):Su(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){Cs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Cs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),yu(e),4&r&&hu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),su(e,lu(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(o(161))}}catch(t){Cs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vu(e,t,n){Jl=e,bu(e,t,n)}function bu(e,t,n){for(var r=!!(1&e.mode);null!==Jl;){var a=Jl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||ql;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Xl;l=ql;var s=Xl;if(ql=i,(Xl=u)&&!s)for(Jl=a;null!==Jl;)u=(i=Jl).child,22===i.tag&&null!==i.memoizedState?ku(a):null!==u?(u.return=i,Jl=u):ku(a);for(;null!==o;)Jl=o,bu(o,t,n),o=o.sibling;Jl=a,ql=l,Xl=s}wu(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Jl=o):wu(e)}}function wu(e){for(;null!==Jl;){var t=Jl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xl||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Vo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Vo(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(o(163))}Xl||512&t.flags&&au(t)}catch(e){Cs(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Su(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function ku(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){Cs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Cs(t,a,e)}}var o=t.return;try{au(t)}catch(e){Cs(t,o,e)}break;case 5:var i=t.return;try{au(t)}catch(e){Cs(t,i,e)}}}catch(e){Cs(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var xu,Cu=Math.ceil,Eu=w.ReactCurrentDispatcher,Au=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,Tu=0,Ru=null,_u=null,Nu=0,$u=0,Ou=Ca(0),Lu=0,Mu=null,zu=0,Iu=0,ju=0,Fu=null,Du=null,Bu=0,Wu=1/0,Uu=null,Vu=!1,Hu=null,Ku=null,Qu=!1,Yu=null,qu=0,Xu=0,Gu=null,Ju=-1,Zu=0;function es(){return 6&Tu?Ge():-1!==Ju?Ju:Ju=Ge()}function ts(e){return 1&e.mode?2&Tu&&0!==Nu?Nu&-Nu:null!==go.transition?(0===Zu&&(Zu=mt()),Zu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Xt(e.type):1}function ns(e,t,n,r){if(50<Xu)throw Xu=0,Gu=null,Error(o(185));yt(e,n,r),2&Tu&&e===Ru||(e===Ru&&(!(2&Tu)&&(Iu|=n),4===Lu&&ls(e,Nu)),rs(e,r),1===n&&0===Tu&&!(1&t.mode)&&(Wu=Ge()+500,Fa&&Wa()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?l&n&&!(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=dt(e,e===Ru?Nu:0);if(0===r)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Fa=!0,Ba(e)}(us.bind(null,e)):Ba(us.bind(null,e)),ia((function(){!(6&Tu)&&Wa()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Rs(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Ju=-1,Zu=0,6&Tu)throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===Ru?Nu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=gs(e,r);else{t=r;var a=Tu;Tu|=2;var i=hs();for(Ru===e&&Nu===t||(Uu=null,Wu=Ge()+500,ds(e,t));;)try{vs();break}catch(t){ps(e,t)}Po(),Eu.current=i,Tu=a,null!==_u?t=0:(Ru=null,Nu=0,t=Lu)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=os(e,a)),1===t)throw n=Mu,ds(e,0),ls(e,r),rs(e,Ge()),n;if(6===t)ls(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=gs(e,r),2===t&&(i=ht(e),0!==i&&(r=i,t=os(e,i))),1!==t)))throw n=Mu,ds(e,0),ls(e,r),rs(e,Ge()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Ss(e,Du,Uu);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=Bu+500-Ge())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Ss.bind(null,e,Du,Uu),t);break}Ss(e,Du,Uu);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cu(r/1960))-r)){e.timeoutHandle=ra(Ss.bind(null,e,Du,Uu),r);break}Ss(e,Du,Uu);break;default:throw Error(o(329))}}}return rs(e,Ge()),e.callbackNode===n?as.bind(null,e):null}function os(e,t){var n=Fu;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=gs(e,t))&&(t=Du,Du=n,null!==t&&is(t)),e}function is(e){null===Du?Du=e:Du.push.apply(Du,e)}function ls(e,t){for(t&=~ju,t&=~Iu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(6&Tu)throw Error(o(327));ks();var t=dt(e,0);if(!(1&t))return rs(e,Ge()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=os(e,r))}if(1===n)throw n=Mu,ds(e,0),ls(e,t),rs(e,Ge()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e,Du,Uu),rs(e,Ge()),null}function ss(e,t){var n=Tu;Tu|=1;try{return e(t)}finally{0===(Tu=n)&&(Wu=Ge()+500,Fa&&Wa())}}function cs(e){null!==Yu&&0===Yu.tag&&!(6&Tu)&&ks();var t=Tu;Tu|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,!(6&(Tu=t))&&Wa()}}function fs(){$u=Ou.current,Ea(Ou)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==_u)for(n=_u.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oa();break;case 3:Go(),Ea(Ra),Ea(Ta),ri();break;case 5:Zo(r);break;case 4:Go();break;case 13:case 19:Ea(ei);break;case 10:To(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Ru=e,_u=e=Os(e.current,null),Nu=$u=t,Lu=0,Mu=null,ju=Iu=zu=0,Du=Fu=null,null!==$o){for(t=0;t<$o.length;t++)if(null!==(r=(n=$o[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}$o=null}return e}function ps(e,t){for(;;){var n=_u;try{if(Po(),ai.current=Ji,ci){for(var r=li.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ci=!1}if(ii=0,si=ui=li=null,fi=!1,di=0,Au.current=null,null===n||null===n.return){Lu=1,Mu=t,_u=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Nu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=gl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&ml(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(!(1&t)){ml(i,c,t),ms();break e}s=Error(o(426))}else if(ao&&1&u.mode){var y=gl(l);if(null!==y){!(65536&y.flags)&&(y.flags|=256),yl(y,l,u,0,t),mo(sl(s,u));break e}}i=s=sl(s,u),4!==Lu&&(Lu=2),null===Fu?Fu=[i]:Fu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Wo(i,pl(0,s,t));break e;case 1:u=s;var v=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof v.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Ku&&Ku.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Wo(i,hl(i,u,t));break e}}i=i.return}while(null!==i)}ws(n)}catch(e){t=e,_u===n&&null!==n&&(_u=n=n.return);continue}break}}function hs(){var e=Eu.current;return Eu.current=Ji,null===e?Ji:e}function ms(){0!==Lu&&3!==Lu&&2!==Lu||(Lu=4),null===Ru||!(268435455&zu)&&!(268435455&Iu)||ls(Ru,Nu)}function gs(e,t){var n=Tu;Tu|=2;var r=hs();for(Ru===e&&Nu===t||(Uu=null,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}if(Po(),Tu=n,Eu.current=r,null!==_u)throw Error(o(261));return Ru=null,Nu=0,Lu}function ys(){for(;null!==_u;)bs(_u)}function vs(){for(;null!==_u&&!qe();)bs(_u)}function bs(e){var t=xu(e.alternate,e,$u);e.memoizedProps=e.pendingProps,null===t?ws(e):_u=t,Au.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Yl(n,t)))return n.flags&=32767,void(_u=n);if(null===e)return Lu=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Ql(n,t,$u)))return void(_u=n);if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===Lu&&(Lu=5)}function Ss(e,t,n){var r=bt,a=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Yu);if(6&Tu)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Ru&&(_u=Ru=null,Nu=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Qu||(Qu=!0,Rs(tt,(function(){return ks(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=Tu;Tu|=4,Au.current=null,function(e,t){if(ea=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=l+a),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:nl(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){Cs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=tu,tu=!1}(e,n),gu(n,e),hr(ta),Vt=!!ea,ta=ea=null,e.current=n,vu(n,e,a),Xe(),Tu=u,bt=l,Pu.transition=i}else e.current=n;if(Qu&&(Qu=!1,Yu=e,qu=a),0===(i=e.pendingLanes)&&(Ku=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Vu)throw Vu=!1,e=Hu,Hu=null,e;!!(1&qu)&&0!==e.tag&&ks(),1&(i=e.pendingLanes)?e===Gu?Xu++:(Xu=0,Gu=e):Xu=0,Wa()}(e,t,n,r)}finally{Pu.transition=a,bt=r}return null}function ks(){if(null!==Yu){var e=wt(qu),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,qu=0,6&Tu)throw Error(o(331));var a=Tu;for(Tu|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(16&Jl.flags){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Jl=c;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:nu(8,f,i)}var d=f.child;if(null!==d)d.return=f,Jl=d;else for(;null!==Jl;){var p=(f=Jl).sibling,h=f.return;if(ou(f),f===c){Jl=null;break}if(null!==p){p.return=h,Jl=p;break}Jl=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Jl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(2048&(i=Jl).flags)switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Jl=v;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var w=(l=Jl).child;if(2064&l.subtreeFlags&&null!==w)w.return=l,Jl=w;else e:for(l=b;null!==Jl;){if(2048&(u=Jl).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){Cs(u,u.return,e)}if(u===l){Jl=null;break e}var S=u.sibling;if(null!==S){S.return=u.return,Jl=S;break e}Jl=u.return}}if(Tu=a,Wa(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function xs(e,t,n){e=Do(e,t=pl(0,t=sl(n,t),1),1),t=es(),null!==e&&(yt(e,1,t),rs(e,t))}function Cs(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Do(t,e=hl(t,e=sl(n,e),1),1),e=es(),null!==t&&(yt(t,1,e),rs(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Ru===e&&(Nu&n)===n&&(4===Lu||3===Lu&&(130023424&Nu)===Nu&&500>Ge()-Bu?ds(e,0):ju|=n),rs(e,t)}function As(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Mo(e,t))&&(yt(e,t,n),rs(e,n))}function Ps(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),As(e,n)}function Ts(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),As(e,n)}function Rs(e,t){return Qe(e,t)}function _s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new _s(e,t,n,r)}function $s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Os(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ls(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)$s(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Ms(n.children,a,i,t);case C:l=8,a|=8;break;case E:return(e=Ns(12,n,t,2|a)).elementType=E,e.lanes=i,e;case R:return(e=Ns(13,n,t,a)).elementType=R,e.lanes=i,e;case _:return(e=Ns(19,n,t,a)).elementType=_,e.lanes=i,e;case O:return zs(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case A:l=10;break e;case P:l=9;break e;case T:l=11;break e;case N:l=14;break e;case $:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ns(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Ms(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function zs(e,t,n,r){return(e=Ns(22,e,r,t)).elementType=O,e.lanes=n,e.stateNode={isHidden:!1},e}function Is(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function js(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Ds(e,t,n,r,a,o,i,l,u){return e=new Fs(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ns(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Io(o),e}function Bs(e){if(!e)return Pa;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if($a(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if($a(n))return Ma(e,n,t)}return t}function Ws(e,t,n,r,a,o,i,l,u){return(e=Ds(n,r,!0,e,0,o,0,l,u)).context=Bs(null),n=e.current,(o=Fo(r=es(),a=ts(n))).callback=null!=t?t:null,Do(n,o,a),e.current.lanes=a,yt(e,a,r),rs(e,r),e}function Us(e,t,n,r){var a=t.current,o=es(),i=ts(a);return n=Bs(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Do(a,t,i))&&(ns(e,a,i,o),Bo(e,a,i)),i}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){Hs(e,t),(e=e.alternate)&&Hs(e,t)}xu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ra.current)bl=!0;else{if(!(e.lanes&n||128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Rl(t),ho();break;case 5:Jo(t);break;case 1:$a(t.type)&&za(t);break;case 4:Xo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Aa(xo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Aa(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Il(e,t,n):(Aa(ei,1&ei.current),null!==(e=Vl(e,t,n))?e.sibling:null);Aa(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Aa(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return Vl(e,t,n)}(e,t,n);bl=!!(131072&e.flags)}else bl=!1,ao&&1048576&t.flags&&Za(t,Ka,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ul(e,t),e=t.pendingProps;var a=Na(t,Ta.current);_o(t,n),a=gi(null,t,r,e,a,n);var i=yi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,$a(r)?(i=!0,za(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Io(t),a.updater=al,t.stateNode=a,a._reactInternals=t,ul(t,r,e,n),t=Tl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),wl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ul(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return $s(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===N)return 14}return 2}(r),e=nl(r,e),a){case 0:t=Al(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=kl(null,t,r,nl(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Al(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 1:return r=t.type,a=t.pendingProps,Pl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 3:e:{if(Rl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,jo(e,t),Uo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_l(e,t,r,n,a=sl(Error(o(423)),t));break e}if(r!==a){t=_l(e,t,r,n,a=sl(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=ko(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Vl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return Jo(t),null===e&&so(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),El(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&so(t),null;case 13:return Il(e,t,n);case 4:return Xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Aa(xo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Ra.current){t=Vl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Fo(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Ro(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ro(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,_o(t,n),r=r(a=No(a)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return a=nl(r=t.type,t.pendingProps),kl(e,t,r,a=nl(r.type,a),n);case 15:return xl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:nl(r,a),Ul(e,t),t.tag=1,$a(r)?(e=!0,za(t)):e=!1,_o(t,n),il(t,r,a),ul(t,r,a,n),Tl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return Cl(e,t,n)}throw Error(o(156,t.tag))};var Qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function qs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function Zs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Vs(i);l.call(e)}}Us(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Vs(i);o.call(e)}}var i=Ws(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=i,e[ha]=i.current,Wr(8===e.nodeType?e.parentNode:e),cs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Vs(u);l.call(e)}}var u=Ds(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[ha]=u.current,Wr(8===e.nodeType?e.parentNode:e),cs((function(){Us(t,u,n,r)})),u}(n,t,e,a,r);return Vs(i)}qs.prototype.render=Ys.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Us(e,t,null,null)},qs.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Us(null,e,null,null)})),t[ha]=null}},qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ot.length&&0!==t&&t<Ot[n].priority;n++);Ot.splice(n,0,e),0===n&&It(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(vt(t,1|n),rs(t,Ge()),!(6&Tu)&&(Wu=Ge()+500,Wa()))}break;case 13:cs((function(){var t=Mo(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Ks(e,1)}},kt=function(e){if(13===e.tag){var t=Mo(e,134217728);null!==t&&ns(t,e,134217728,es()),Ks(e,134217728)}},xt=function(e){if(13===e.tag){var t=ts(e),n=Mo(e,t);null!==n&&ns(n,e,t,es()),Ks(e,t)}},Ct=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Sa(r);if(!a)throw Error(o(90));Q(r),J(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=ss,Re=cs;var ec={usingClientEntryPoint:!1,Events:[ba,wa,Sa,Ae,Pe,ss]},tc={findFiberByHostInstance:va,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var n=!1,r="",a=Qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Ds(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Wr(8===e.nodeType?e.parentNode:e),new Ys(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Gs(t))throw Error(o(200));return Zs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Qs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,a,0,i,l),e[ha]=t.current,Wr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new qs(t)},t.render=function(e,t,n){if(!Gs(t))throw Error(o(200));return Zs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Gs(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){Zs(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Gs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zs(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},5338:(e,t,n)=>{var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},2799:(e,t)=>{Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},4363:(e,t,n)=>{n(2799)},2896:(e,t,n)=>{n.d(t,{Kq:()=>S,wA:()=>E,d4:()=>y});var r=n(9888),a=n(9242),o=n(961);let i=function(e){e()};const l=()=>i;var u=n(6540);const s=Symbol.for(`react-redux-context-${u.version}`),c=globalThis,f=new Proxy({},new Proxy({},{get(e,t){const n=function(){let e=c[s];return e||(e=(0,u.createContext)(null),c[s]=e),e}();return(e,...r)=>Reflect[t](n,...r)}}));function d(e=f){return function(){return(0,u.useContext)(e)}}const p=d();let h=()=>{throw new Error("uSES not initialized!")};const m=(e,t)=>e===t;function g(e=f){const t=e===f?p:d(e);return function(e,n={}){const{equalityFn:r=m,stabilityCheck:a,noopCheck:o}="function"==typeof n?{equalityFn:n}:n,{store:i,subscription:l,getServerState:s,stabilityCheck:c,noopCheck:f}=t(),d=((0,u.useRef)(!0),(0,u.useCallback)({[e.name]:t=>e(t)}[e.name],[e,c,a])),p=h(l.addNestedSub,i.getState,s||i.getState,d,r);return(0,u.useDebugValue)(p),p}}const y=g();n(4146),n(4363);const v={notify(){},get:()=>[]};const b="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?u.useLayoutEffect:u.useEffect;let w=null;const S=function({store:e,context:t,children:n,serverState:r,stabilityCheck:a="once",noopCheck:o="once"}){const i=(0,u.useMemo)((()=>{const t=function(e,t){let n,r=v;function a(){i.onStateChange&&i.onStateChange()}function o(){n||(n=t?t.addNestedSub(a):e.subscribe(a),r=function(){const e=l();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,a=n={callback:e,next:null,prev:n};return a.prev?a.prev.next=a:t=a,function(){r&&null!==t&&(r=!1,a.next?a.next.prev=a.prev:n=a.prev,a.prev?a.prev.next=a.next:t=a.next)}}}}())}const i={addNestedSub:function(e){return o(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:a,isSubscribed:function(){return Boolean(n)},trySubscribe:o,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=v)},getListeners:()=>r};return i}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0,stabilityCheck:a,noopCheck:o}}),[e,r,a,o]),s=(0,u.useMemo)((()=>e.getState()),[e]);b((()=>{const{subscription:t}=i;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),s!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[i,s]);const c=t||f;return u.createElement(c.Provider,{value:i},n)};function k(e=f){const t=e===f?p:d(e);return function(){const{store:e}=t();return e}}const x=k();function C(e=f){const t=e===f?x:k(e);return function(){return t().dispatch}}const E=C();var A,P;A=a.useSyncExternalStoreWithSelector,h=A,(e=>{w=e})(r.useSyncExternalStore),P=o.unstable_batchedUpdates,i=P},6069:(e,t)=>{Object.prototype.toString},7241:(e,t,n)=>{n.d(t,{A:()=>r});const r=n(6540).createContext(null)},1020:(e,t,n)=>{var r=n(6540),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:u,_owner:i.current}}t.jsx=u,t.jsxs=u},5287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,a)&&!C.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:x.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+T(u,0):o,S(i)?(a="",null!=e&&(a=e.replace(P,"$&/")+"/"),R(i,t,a,"",(function(e){return e}))):null!=i&&(A(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",S(e))for(var s=0;s<e.length;s++){var c=o+T(l=e[s],s);u+=R(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=R(l=l.value,t,a,c=o+T(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function _(e,t,n){if(null==e)return e;var r=[],a=0;return R(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var $={current:null},O={transition:null},L={ReactCurrentDispatcher:$,ReactCurrentBatchConfig:O,ReactCurrentOwner:x};function M(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!A(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.act=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!C.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=O.transition;O.transition={};try{e()}finally{O.transition=t}},t.unstable_act=M,t.useCallback=function(e,t){return $.current.useCallback(e,t)},t.useContext=function(e){return $.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return $.current.useDeferredValue(e)},t.useEffect=function(e,t){return $.current.useEffect(e,t)},t.useId=function(){return $.current.useId()},t.useImperativeHandle=function(e,t,n){return $.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return $.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return $.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return $.current.useMemo(e,t)},t.useReducer=function(e,t,n){return $.current.useReducer(e,t,n)},t.useRef=function(e){return $.current.useRef(e)},t.useState=function(e){return $.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return $.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return $.current.useTransition()},t.version="18.3.1"},6540:(e,t,n)=>{e.exports=n(5287)},4848:(e,t,n)=>{e.exports=n(1020)},1265:(e,t,n)=>{function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(a){return"function"==typeof a?a(n,r,e):t(a)}}}}n.d(t,{A:()=>o});var a=r();a.withExtraArgument=r;const o=a},1829:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function a(e,t,n){return(t=function(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}n.d(t,{Tw:()=>h,HY:()=>d,y$:()=>f});var u="function"==typeof Symbol&&Symbol.observable||"@@observable",s=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+s(),REPLACE:"@@redux/REPLACE"+s(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+s()}};function f(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(l(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(l(1));return n(f)(e,t)}if("function"!=typeof e)throw new Error(l(2));var a=e,o=t,i=[],s=i,d=!1;function p(){s===i&&(s=i.slice())}function h(){if(d)throw new Error(l(3));return o}function m(e){if("function"!=typeof e)throw new Error(l(4));if(d)throw new Error(l(5));var t=!0;return p(),s.push(e),function(){if(t){if(d)throw new Error(l(6));t=!1,p();var n=s.indexOf(e);s.splice(n,1),i=null}}}function g(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(l(7));if(void 0===e.type)throw new Error(l(8));if(d)throw new Error(l(9));try{d=!0,o=a(o,e)}finally{d=!1}for(var t=i=s,n=0;n<t.length;n++)(0,t[n])();return e}return g({type:c.INIT}),(r={dispatch:g,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error(l(10));a=e,g({type:c.REPLACE})}})[u]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(l(11));function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[u]=function(){return this},e},r}function d(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];"function"==typeof e[a]&&(n[a]=e[a])}var o,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:c.INIT}))throw new Error(l(12));if(void 0===n(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(l(13))}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,a={},u=0;u<i.length;u++){var s=i[u],c=n[s],f=e[s],d=c(f,t);if(void 0===d)throw t&&t.type,new Error(l(14));a[s]=d,r=r||d!==f}return(r=r||i.length!==Object.keys(e).length)?a:e}}function p(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(l(15))},a={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(a)}));return r=p.apply(void 0,o)(n.dispatch),i(i({},n),{},{dispatch:r})}}}},7463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,O(k);else{var t=r(c);null!==t&&L(S,t.startTime-e)}}function k(e,n){m=!1,g&&(g=!1,v(A),A=-1),h=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!R());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&L(S,f.startTime-n),u=!1}return u}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,E=null,A=-1,P=5,T=-1;function R(){return!(t.unstable_now()-T<P)}function _(){if(null!==E){var e=t.unstable_now();T=e;var n=!0;try{n=E(!0,e)}finally{n?x():(C=!1,E=null)}}else C=!1}if("function"==typeof b)x=function(){b(_)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,$=N.port2;N.port1.onmessage=_,x=function(){$.postMessage(null)}}else x=function(){y(_,0)};function O(e){E=e,C||(C=!0,x())}function L(e,n){A=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,O(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(v(A),A=-1):g=!0,L(S,o-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,O(k))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},9982:(e,t,n)=>{e.exports=n(7463)},5072:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},7659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},1063:(e,t,n)=>{var r=n(6540),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},o=r.useState,i=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!a(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=o({inst:{value:n,getSnapshot:t}}),a=r[0].inst,c=r[1];return l((function(){a.value=n,a.getSnapshot=t,s(a)&&c({inst:a})}),[e,n,t]),i((function(){return s(a)&&c({inst:a}),e((function(){s(a)&&c({inst:a})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},8940:(e,t,n)=>{var r=n(6540),a=n(9888),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=a.useSyncExternalStore,l=r.useRef,u=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,a){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s((function(){function e(e){if(!u){if(u=!0,i=e,e=r(e),void 0!==a&&d.hasValue){var t=d.value;if(a(t,e))return l=t}return l=e}if(t=l,o(i,e))return t;var n=r(e);return void 0!==a&&a(t,n)?t:(i=e,l=n)}var i,l,u=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,a]);var p=i(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),c(p),p}},9888:(e,t,n)=>{e.exports=n(1063)},9242:(e,t,n)=>{e.exports=n(8940)},8168:(e,t,n)=>{function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(null,arguments)}n.d(t,{A:()=>r})},5540:(e,t,n)=>{function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{A:()=>a})},8587:(e,t,n)=>{function r(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}n.d(t,{A:()=>r})},4164:(e,t,n)=>{function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n)}else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}n.d(t,{A:()=>a});const a=function(){for(var e,t,n=0,a="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},1239:(e,t,n)=>{n.d(t,{BV:()=>se,Kd:()=>_e,N_:()=>$e,Zp:()=>q,g:()=>X,qh:()=>le});var r=n(6540),a=(n(6069),"popstate");function o(e={}){return function(e,t,n,r={}){let{window:o=document.defaultView,v5Compat:l=!1}=r,f=o.history,d="POP",p=null,h=m();function m(){return(f.state||{idx:null}).idx}function g(){d="POP";let e=m(),t=null==e?null:e-h;h=e,p&&p({action:d,location:v.location,delta:t})}function y(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:c(e);return n=n.replace(/ $/,"%20"),i(t,`No window.location.(origin|href) available to create URL for href: ${n}`),new URL(n,t)}null==h&&(h=0,f.replaceState({...f.state,idx:h},""));let v={get action(){return d},get location(){return e(o,f)},listen(e){if(p)throw new Error("A history only accepts one active listener");return o.addEventListener(a,g),p=e,()=>{o.removeEventListener(a,g),p=null}},createHref:e=>t(o,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){d="PUSH";let r=s(v.location,e,t);n&&n(r,e),h=m()+1;let a=u(r,h),i=v.createHref(r);try{f.pushState(a,"",i)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(i)}l&&p&&p({action:d,location:v.location,delta:1})},replace:function(e,t){d="REPLACE";let r=s(v.location,e,t);n&&n(r,e),h=m();let a=u(r,h),o=v.createHref(r);f.replaceState(a,"",o),l&&p&&p({action:d,location:v.location,delta:0})},go:e=>f.go(e)};return v}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return s("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:c(t)}),null,e)}function i(e,t){if(!1===e||null==e)throw new Error(t)}function l(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function u(e,t){return{usr:e.state,key:e.key,idx:t}}function s(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?f(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function c({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}function d(e,t,n="/"){return function(e,t,n,r){let a=A(("string"==typeof t?f(t):t).pathname||"/",n);if(null==a)return null;let o=p(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=E(a);i=x(o[e],t,r)}return i}(e,t,n,!1)}function p(e,t=[],n=[],r=""){let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(i(l.relativePath.startsWith(r),`Absolute route path "${l.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),l.relativePath=l.relativePath.slice(r.length));let u=_([r,l.relativePath]),s=n.concat(l);e.children&&e.children.length>0&&(i(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${u}".`),p(e.children,t,s,u)),(null!=e.path||e.index)&&t.push({path:u,score:k(u,e.index),routesMeta:s})};return e.forEach(((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of h(e.path))a(e,t,n);else a(e,t)})),t}function h(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=h(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}var m=/^:[\w-]+$/,g=3,y=2,v=1,b=10,w=-2,S=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=w),t&&(r+=y),n.filter((e=>!S(e))).reduce(((e,t)=>e+(m.test(t)?g:""===t?v:b)),r)}function x(e,t,n=!1){let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],u=e===r.length-1,s="/"===o?t:t.slice(o.length)||"/",c=C({path:l.relativePath,caseSensitive:l.caseSensitive,end:u},s),f=l.route;if(!c&&u&&n&&!r[r.length-1].route.index&&(c=C({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},s)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:_([o,c.pathname]),pathnameBase:N(_([o,c.pathnameBase])),route:f}),"/"!==c.pathnameBase&&(o=_([o,c.pathnameBase]))}return i}function C(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){l("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),u=a.slice(1);return{params:r.reduce(((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=u[r]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const a=u[r];return e[t]=n&&!a?void 0:(a||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function E(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return l(!1,`The URL path "${e}" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function A(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function T(e){let t=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase))}function R(e,t,n,r=!1){let a;"string"==typeof e?a=f(e):(a={...e},i(!a.pathname||!a.pathname.includes("?"),P("?","pathname","search",a)),i(!a.pathname||!a.pathname.includes("#"),P("#","pathname","hash",a)),i(!a.search||!a.search.includes("#"),P("#","search","hash",a)));let o,l=""===e||""===a.pathname,u=l?"/":a.pathname;if(null==u)o=n;else{let e=t.length-1;if(!r&&u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t="/"){let{pathname:n,search:r="",hash:a=""}="string"==typeof e?f(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:$(r),hash:O(a)}}(a,o),c=u&&"/"!==u&&u.endsWith("/"),d=(l||"."===u)&&n.endsWith("/");return s.pathname.endsWith("/")||!c&&!d||(s.pathname+="/"),s}var _=e=>e.join("/").replace(/\/\/+/g,"/"),N=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),$=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",O=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function L(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var M=["POST","PUT","PATCH","DELETE"],z=(new Set(M),["GET",...M]);new Set(z),Symbol("ResetLoaderData");var I=r.createContext(null);I.displayName="DataRouter";var j=r.createContext(null);j.displayName="DataRouterState";var F=r.createContext({isTransitioning:!1});F.displayName="ViewTransition",r.createContext(new Map).displayName="Fetchers",r.createContext(null).displayName="Await";var D=r.createContext(null);D.displayName="Navigation";var B=r.createContext(null);B.displayName="Location";var W=r.createContext({outlet:null,matches:[],isDataRoute:!1});W.displayName="Route";var U=r.createContext(null);U.displayName="RouteError";var V=!1;function H(){return null!=r.useContext(B)}function K(){return i(H(),"useLocation() may be used only in the context of a <Router> component."),r.useContext(B).location}var Q="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function Y(e){r.useContext(D).static||r.useLayoutEffect(e)}function q(){let{isDataRoute:e}=r.useContext(W);return e?function(){let{router:e}=function(e){let t=r.useContext(I);return i(t,re(e)),t}("useNavigate"),t=ae("useNavigate"),n=r.useRef(!1);return Y((()=>{n.current=!0})),r.useCallback((async(r,a={})=>{l(n.current,Q),n.current&&("number"==typeof r?e.navigate(r):await e.navigate(r,{fromRouteId:t,...a}))}),[e,t])}():function(){i(H(),"useNavigate() may be used only in the context of a <Router> component.");let e=r.useContext(I),{basename:t,navigator:n}=r.useContext(D),{matches:a}=r.useContext(W),{pathname:o}=K(),u=JSON.stringify(T(a)),s=r.useRef(!1);return Y((()=>{s.current=!0})),r.useCallback(((r,a={})=>{if(l(s.current,Q),!s.current)return;if("number"==typeof r)return void n.go(r);let i=R(r,JSON.parse(u),o,"path"===a.relative);null==e&&"/"!==t&&(i.pathname="/"===i.pathname?t:_([t,i.pathname])),(a.replace?n.replace:n.push)(i,a.state,a)}),[t,n,u,o,e])}()}function X(){let{matches:e}=r.useContext(W),t=e[e.length-1];return t?t.params:{}}function G(e,{relative:t}={}){let{matches:n}=r.useContext(W),{pathname:a}=K(),o=JSON.stringify(T(n));return r.useMemo((()=>R(e,JSON.parse(o),a,"path"===t)),[e,o,a,t])}function J(e,t,n,a){i(H(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:o}=r.useContext(D),{matches:u}=r.useContext(W),s=u[u.length-1],c=s?s.params:{},p=s?s.pathname:"/",h=s?s.pathnameBase:"/",m=s&&s.route;if(V){let e=m&&m.path||"";ie(p,!m||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${p}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let g,y=K();if(t){let e="string"==typeof t?f(t):t;i("/"===h||e.pathname?.startsWith(h),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${h}" but pathname "${e.pathname}" was given in the \`location\` prop.`),g=e}else g=y;let v=g.pathname||"/",b=v;if("/"!==h){let e=h.replace(/^\//,"").split("/");b="/"+v.replace(/^\//,"").split("/").slice(e.length).join("/")}let w=d(e,{pathname:b});V&&(l(m||null!=w,`No routes matched location "${g.pathname}${g.search}${g.hash}" `),l(null==w||void 0!==w[w.length-1].route.element||void 0!==w[w.length-1].route.Component||void 0!==w[w.length-1].route.lazy,`Matched leaf route at location "${g.pathname}${g.search}${g.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`));let S=function(e,t=[],n=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let a=e,o=n?.errors;if(null!=o){let e=a.findIndex((e=>e.route.id&&void 0!==o?.[e.route.id]));i(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(o).join(",")}`),a=a.slice(0,Math.min(a.length,e+1))}let l=!1,u=-1;if(n)for(let e=0;e<a.length;e++){let t=a[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(u=e),t.route.id){let{loaderData:e,errors:r}=n,o=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!r||void 0===r[t.route.id]);if(t.route.lazy||o){l=!0,a=u>=0?a.slice(0,u+1):[a[0]];break}}}return a.reduceRight(((e,i,s)=>{let c,f=!1,d=null,p=null;n&&(c=o&&i.route.id?o[i.route.id]:void 0,d=i.route.errorElement||ee,l&&(u<0&&0===s?(ie("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),f=!0,p=null):u===s&&(f=!0,p=i.route.hydrateFallbackElement||null)));let h=t.concat(a.slice(0,s+1)),m=()=>{let t;return t=c?d:f?p:i.route.Component?r.createElement(i.route.Component,null):i.route.element?i.route.element:e,r.createElement(ne,{match:i,routeContext:{outlet:e,matches:h,isDataRoute:null!=n},children:t})};return n&&(i.route.ErrorBoundary||i.route.errorElement||0===s)?r.createElement(te,{location:n.location,revalidation:n.revalidation,component:d,error:c,children:m(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):m()}),null)}(w&&w.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:_([h,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?h:_([h,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),u,n,a);return t&&S?r.createElement(B.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...g},navigationType:"POP"}},S):S}function Z(){let e=function(){let e=r.useContext(U),t=function(e){let t=r.useContext(j);return i(t,re(e)),t}("useRouteError"),n=ae("useRouteError");return void 0!==e?e:t.errors?.[n]}(),t=L(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,a="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:a},l={padding:"2px 4px",backgroundColor:a},u=null;return V&&(console.error("Error handled by React Router default ErrorBoundary:",e),u=r.createElement(r.Fragment,null,r.createElement("p",null,"💿 Hey developer 👋"),r.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",r.createElement("code",{style:l},"ErrorBoundary")," or"," ",r.createElement("code",{style:l},"errorElement")," prop on your route."))),r.createElement(r.Fragment,null,r.createElement("h2",null,"Unexpected Application Error!"),r.createElement("h3",{style:{fontStyle:"italic"}},t),n?r.createElement("pre",{style:o},n):null,u)}r.createContext(null);var ee=r.createElement(Z,null),te=class extends r.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?r.createElement(W.Provider,{value:this.props.routeContext},r.createElement(U.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function ne({routeContext:e,match:t,children:n}){let a=r.useContext(I);return a&&a.static&&a.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=t.route.id),r.createElement(W.Provider,{value:e},n)}function re(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function ae(e){let t=function(e){let t=r.useContext(W);return i(t,re(e)),t}(e),n=t.matches[t.matches.length-1];return i(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}var oe={};function ie(e,t,n){t||oe[e]||(oe[e]=!0,l(!1,n))}function le(e){i(!1,"A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.")}function ue({basename:e="/",children:t=null,location:n,navigationType:a="POP",navigator:o,static:u=!1}){i(!H(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let s=e.replace(/^\/*/,"/"),c=r.useMemo((()=>({basename:s,navigator:o,static:u,future:{}})),[s,o,u]);"string"==typeof n&&(n=f(n));let{pathname:d="/",search:p="",hash:h="",state:m=null,key:g="default"}=n,y=r.useMemo((()=>{let e=A(d,s);return null==e?null:{location:{pathname:e,search:p,hash:h,state:m,key:g},navigationType:a}}),[s,d,p,h,m,g,a]);return l(null!=y,`<Router basename="${s}"> is not able to match the URL "${d}${p}${h}" because it does not start with the basename, so the <Router> won't render anything.`),null==y?null:r.createElement(D.Provider,{value:c},r.createElement(B.Provider,{children:t,value:y}))}function se({children:e,location:t}){return J(ce(e),t)}function ce(e,t=[]){let n=[];return r.Children.forEach(e,((e,a)=>{if(!r.isValidElement(e))return;let o=[...t,a];if(e.type===r.Fragment)return void n.push.apply(n,ce(e.props.children,o));i(e.type===le,`[${"string"==typeof e.type?e.type:e.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`),i(!e.props.index||!e.props.children,"An index route cannot have child routes.");let l={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,hydrateFallbackElement:e.props.hydrateFallbackElement,HydrateFallback:e.props.HydrateFallback,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:!0===e.props.hasErrorBoundary||null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(l.children=ce(e.props.children,o)),n.push(l)})),n}r.memo((function({routes:e,future:t,state:n}){return J(e,void 0,n,t)})),r.Component;var fe="get",de="application/x-www-form-urlencoded";function pe(e){return null!=e&&"string"==typeof e.tagName}var he=null,me=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function ge(e){return null==e||me.has(e)?e:(l(!1,`"${e}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${de}"`),null)}function ye(e,t){if(!1===e||null==e)throw new Error(t)}function ve(e){return null!=e&&(null==e.href?"preload"===e.rel&&"string"==typeof e.imageSrcSet&&"string"==typeof e.imageSizes:"string"==typeof e.rel&&"string"==typeof e.href)}function be(e,t,n,r,a,o){let i=(e,t)=>!n[t]||e.route.id!==n[t].route.id,l=(e,t)=>n[t].pathname!==e.pathname||n[t].route.path?.endsWith("*")&&n[t].params["*"]!==e.params["*"];return"assets"===o?t.filter(((e,t)=>i(e,t)||l(e,t))):"data"===o?t.filter(((t,o)=>{let u=r.routes[t.route.id];if(!u||!u.hasLoader)return!1;if(i(t,o)||l(t,o))return!0;if(t.route.shouldRevalidate){let r=t.route.shouldRevalidate({currentUrl:new URL(a.pathname+a.search+a.hash,window.origin),currentParams:n[0]?.params||{},nextUrl:new URL(e,window.origin),nextParams:t.params,defaultShouldRevalidate:!0});if("boolean"==typeof r)return r}return!0})):[]}function we(){let e=r.useContext(I);return ye(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}function Se(){let e=r.useContext(j);return ye(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}Symbol("SingleFetchRedirect"),r.Component;var ke=r.createContext(void 0);function xe(){let e=r.useContext(ke);return ye(e,"You must render this element inside a <HydratedRouter> element"),e}function Ce(e,t){return n=>{e&&e(n),n.defaultPrevented||t(n)}}function Ee({page:e,...t}){let{router:n}=we(),a=r.useMemo((()=>d(n.routes,e,n.basename)),[n.routes,e,n.basename]);return a?r.createElement(Pe,{page:e,matches:a,...t}):(console.warn(`Tried to prefetch ${e} but no routes matched.`),null)}function Ae(e){let{manifest:t,routeModules:n}=xe(),[a,o]=r.useState([]);return r.useEffect((()=>{let r=!1;return async function(e,t,n){return function(e,t){let n=new Set,r=new Set(t);return e.reduce(((e,a)=>{if(t&&(null==(o=a)||"string"!=typeof o.page)&&"script"===a.as&&a.href&&r.has(a.href))return e;var o;let i=JSON.stringify(function(e){let t={},n=Object.keys(e).sort();for(let r of n)t[r]=e[r];return t}(a));return n.has(i)||(n.add(i),e.push({key:i,link:a})),e}),[])}((await Promise.all(e.map((async e=>{let r=t.routes[e.route.id];if(r){let e=await async function(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise((()=>{}))}}(r,n);return e.links?e.links():[]}return[]})))).flat(1).filter(ve).filter((e=>"stylesheet"===e.rel||"preload"===e.rel)).map((e=>"stylesheet"===e.rel?{...e,rel:"prefetch",as:"style"}:{...e,rel:"prefetch"})))}(e,t,n).then((e=>{r||o(e)})),()=>{r=!0}}),[e,t,n]),a}function Pe({page:e,matches:t,...n}){let a=K(),{manifest:o,routeModules:i}=xe(),{loaderData:l,matches:u}=Se(),s=r.useMemo((()=>be(e,t,u,o,a,"data")),[e,t,u,o,a]),c=r.useMemo((()=>be(e,t,u,o,a,"assets")),[e,t,u,o,a]),f=r.useMemo((()=>{if(e===a.pathname+a.search+a.hash)return[];let n=new Set,r=!1;if(t.forEach((e=>{let t=o.routes[e.route.id];t&&t.hasLoader&&(!s.some((t=>t.route.id===e.route.id))&&e.route.id in l&&i[e.route.id]?.shouldRevalidate||t.hasClientLoader?r=!0:n.add(e.route.id))})),0===n.size)return[];let u=function(e){let t="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===t.pathname?t.pathname="_root.data":t.pathname=`${t.pathname.replace(/\/$/,"")}.data`,t}(e);return r&&n.size>0&&u.searchParams.set("_routes",t.filter((e=>n.has(e.route.id))).map((e=>e.route.id)).join(",")),[u.pathname+u.search]}),[l,a,o,s,t,e,i]),d=r.useMemo((()=>function(e,t){return n=e.map((e=>{let n=t.routes[e.route.id];if(!n)return[];let r=[n.module];return n.imports&&(r=r.concat(n.imports)),r})).flat(1),[...new Set(n)];var n}(c,o)),[c,o]),p=Ae(c);return r.createElement(r.Fragment,null,f.map((e=>r.createElement("link",{key:e,rel:"prefetch",as:"fetch",href:e,...n}))),d.map((e=>r.createElement("link",{key:e,rel:"modulepreload",href:e,...n}))),p.map((({key:e,link:t})=>r.createElement("link",{key:e,...t}))))}ke.displayName="FrameworkContext";function Te(...e){return t=>{e.forEach((e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)}))}}var Re="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;try{Re&&(window.__reactRouterVersion="7.0.1")}catch(e){}function _e({basename:e,children:t,window:n}){let a=r.useRef();null==a.current&&(a.current=o({window:n,v5Compat:!0}));let i=a.current,[l,u]=r.useState({action:i.action,location:i.location}),s=r.useCallback((e=>{r.startTransition((()=>u(e)))}),[u]);return r.useLayoutEffect((()=>i.listen(s)),[i,s]),r.createElement(ue,{basename:e,children:t,location:l.location,navigationType:l.action,navigator:i})}var Ne=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,$e=r.forwardRef((function({onClick:e,discover:t="render",prefetch:n="none",relative:a,reloadDocument:o,replace:u,state:s,target:f,to:d,preventScrollReset:p,viewTransition:h,...m},g){let y,{basename:v}=r.useContext(D),b="string"==typeof d&&Ne.test(d),w=!1;if("string"==typeof d&&b&&(y=d,Re))try{let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),n=A(t.pathname,v);t.origin===e.origin&&null!=n?d=n+t.search+t.hash:w=!0}catch(e){l(!1,`<Link to="${d}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let S=function(e,{relative:t}={}){i(H(),"useHref() may be used only in the context of a <Router> component.");let{basename:n,navigator:a}=r.useContext(D),{hash:o,pathname:l,search:u}=G(e,{relative:t}),s=l;return"/"!==n&&(s="/"===l?n:_([n,l])),a.createHref({pathname:s,search:u,hash:o})}(d,{relative:a}),[k,x,C]=function(e,t){let n=r.useContext(ke),[a,o]=r.useState(!1),[i,l]=r.useState(!1),{onFocus:u,onBlur:s,onMouseEnter:c,onMouseLeave:f,onTouchStart:d}=t,p=r.useRef(null);r.useEffect((()=>{if("render"===e&&l(!0),"viewport"===e){let e=new IntersectionObserver((e=>{e.forEach((e=>{l(e.isIntersecting)}))}),{threshold:.5});return p.current&&e.observe(p.current),()=>{e.disconnect()}}}),[e]),r.useEffect((()=>{if(a){let e=setTimeout((()=>{l(!0)}),100);return()=>{clearTimeout(e)}}}),[a]);let h=()=>{o(!0)},m=()=>{o(!1),l(!1)};return n?"intent"!==e?[i,p,{}]:[i,p,{onFocus:Ce(u,h),onBlur:Ce(s,m),onMouseEnter:Ce(c,h),onMouseLeave:Ce(f,m),onTouchStart:Ce(d,h)}]:[!1,p,{}]}(n,m),E=function(e,{target:t,replace:n,state:a,preventScrollReset:o,relative:i,viewTransition:l}={}){let u=q(),s=K(),f=G(e,{relative:i});return r.useCallback((r=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(r,t)){r.preventDefault();let t=void 0!==n?n:c(s)===c(f);u(e,{replace:t,state:a,preventScrollReset:o,relative:i,viewTransition:l})}}),[s,u,f,n,a,t,e,o,i,l])}(d,{replace:u,state:s,target:f,preventScrollReset:p,relative:a,viewTransition:h}),P=r.createElement("a",{...m,...C,href:y||S,onClick:w||o?e:function(t){e&&e(t),t.defaultPrevented||E(t)},ref:Te(g,x),target:f,"data-discover":b||"render"!==t?void 0:"true"});return k&&!b?r.createElement(r.Fragment,null,P,r.createElement(Ee,{page:S})):P}));function Oe(e){let t=r.useContext(I);return i(t,function(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}(e)),t}$e.displayName="Link",r.forwardRef((function({"aria-current":e="page",caseSensitive:t=!1,className:n="",end:a=!1,style:o,to:l,viewTransition:u,children:s,...c},f){let d=G(l,{relative:c.relative}),p=K(),h=r.useContext(j),{navigator:m,basename:g}=r.useContext(D),y=null!=h&&function(e,t={}){let n=r.useContext(F);i(null!=n,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:a}=Oe("useViewTransitionState"),o=G(e,{relative:t.relative});if(!n.isTransitioning)return!1;let l=A(n.currentLocation.pathname,a)||n.currentLocation.pathname,u=A(n.nextLocation.pathname,a)||n.nextLocation.pathname;return null!=C(o.pathname,u)||null!=C(o.pathname,l)}(d)&&!0===u,v=m.encodeLocation?m.encodeLocation(d).pathname:d.pathname,b=p.pathname,w=h&&h.navigation&&h.navigation.location?h.navigation.location.pathname:null;t||(b=b.toLowerCase(),w=w?w.toLowerCase():null,v=v.toLowerCase()),w&&g&&(w=A(w,g)||w);const S="/"!==v&&v.endsWith("/")?v.length-1:v.length;let k,x=b===v||!a&&b.startsWith(v)&&"/"===b.charAt(S),E=null!=w&&(w===v||!a&&w.startsWith(v)&&"/"===w.charAt(v.length)),P={isActive:x,isPending:E,isTransitioning:y},T=x?e:void 0;k="function"==typeof n?n(P):[n,x?"active":null,E?"pending":null,y?"transitioning":null].filter(Boolean).join(" ");let R="function"==typeof o?o(P):o;return r.createElement($e,{...c,"aria-current":T,className:k,ref:f,style:R,to:l,viewTransition:u},"function"==typeof s?s(P):s)})).displayName="NavLink",r.forwardRef((({discover:e="render",fetcherKey:t,navigate:n,reloadDocument:a,replace:o,state:l,method:u=fe,action:s,onSubmit:f,relative:d,preventScrollReset:p,viewTransition:h,...m},g)=>{let y=function(){let{router:e}=Oe("useSubmit"),{basename:t}=r.useContext(D),n=ae("useRouteId");return r.useCallback((async(r,a={})=>{let{action:o,method:i,encType:l,formData:u,body:s}=function(e,t){let n,r,a,o,i;if(pe(l=e)&&"form"===l.tagName.toLowerCase()){let i=e.getAttribute("action");r=i?A(i,t):null,n=e.getAttribute("method")||fe,a=ge(e.getAttribute("enctype"))||de,o=new FormData(e)}else if(function(e){return pe(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return pe(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let l=e.getAttribute("formaction")||i.getAttribute("action");if(r=l?A(l,t):null,n=e.getAttribute("formmethod")||i.getAttribute("method")||fe,a=ge(e.getAttribute("formenctype"))||ge(i.getAttribute("enctype"))||de,o=new FormData(i,e),!function(){if(null===he)try{new FormData(document.createElement("form"),0),he=!1}catch(e){he=!0}return he}()){let{name:t,type:n,value:r}=e;if("image"===n){let e=t?`${t}.`:"";o.append(`${e}x`,"0"),o.append(`${e}y`,"0")}else t&&o.append(t,r)}}else{if(pe(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');n=fe,r=null,a=de,i=e}var l;return o&&"text/plain"===a&&(i=o,o=void 0),{action:r,method:n.toLowerCase(),encType:a,formData:o,body:i}}(r,t);if(!1===a.navigate){let t=a.fetcherKey||Me();await e.fetch(t,n,a.action||o,{preventScrollReset:a.preventScrollReset,formData:u,body:s,formMethod:a.method||i,formEncType:a.encType||l,flushSync:a.flushSync})}else await e.navigate(a.action||o,{preventScrollReset:a.preventScrollReset,formData:u,body:s,formMethod:a.method||i,formEncType:a.encType||l,replace:a.replace,state:a.state,fromRouteId:n,flushSync:a.flushSync,viewTransition:a.viewTransition})}),[e,t,n])}(),v=function(e,{relative:t}={}){let{basename:n}=r.useContext(D),a=r.useContext(W);i(a,"useFormAction must be used inside a RouteContext");let[o]=a.matches.slice(-1),l={...G(e||".",{relative:t})},u=K();if(null==e){l.search=u.search;let e=new URLSearchParams(l.search),t=e.getAll("index");if(t.some((e=>""===e))){e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();l.search=n?`?${n}`:""}}return e&&"."!==e||!o.route.index||(l.search=l.search?l.search.replace(/^\?/,"?index&"):"?index"),"/"!==n&&(l.pathname="/"===l.pathname?n:_([n,l.pathname])),c(l)}(s,{relative:d}),b="get"===u.toLowerCase()?"get":"post",w="string"==typeof s&&Ne.test(s);return r.createElement("form",{ref:g,method:b,action:v,onSubmit:a?f:e=>{if(f&&f(e),e.defaultPrevented)return;e.preventDefault();let r=e.nativeEvent.submitter,a=r?.getAttribute("formmethod")||u;y(r||e.currentTarget,{fetcherKey:t,method:a,navigate:n,replace:o,state:l,relative:d,preventScrollReset:p,viewTransition:h})},...m,"data-discover":w||"render"!==e?void 0:"true"})})).displayName="Form";var Le=0,Me=()=>`__${String(++Le)}__`;new TextEncoder}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,